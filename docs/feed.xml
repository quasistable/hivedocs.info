<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://hivedocs.info/feed.xml" rel="self" type="application/atom+xml" /><link href="https://hivedocs.info/" rel="alternate" type="text/html" /><updated>2021-04-11T11:33:16-07:00</updated><id>https://hivedocs.info/feed.xml</id><title type="html">Hive Chain Documentation</title><subtitle>Your resource for various levels of Hive Documentation.</subtitle><author><name>site curated by: @inertia</name></author><entry><title type="html">Making a Decentralized Game on Hive - Part 5</title><link href="https://hivedocs.info/howto/nodejs/2021/04/11/making-a-decentralized-game-on-hive-part-5.html" rel="alternate" type="text/html" title="Making a Decentralized Game on Hive - Part 5" /><published>2021-04-11T10:06:57-07:00</published><updated>2021-04-11T10:06:57-07:00</updated><id>https://hivedocs.info/howto/nodejs/2021/04/11/making-a-decentralized-game-on-hive-part-5</id><content type="html" xml:base="https://hivedocs.info/howto/nodejs/2021/04/11/making-a-decentralized-game-on-hive-part-5.html">&lt;div id=&quot;content-mahdiyari-making-a-decentralized-game-on-hive-part-5&quot;&gt;&lt;center&gt;![game-pixabay.jpg](https://images.hive.blog/DQmSeL2wLvGPWHqcLVX4ZtfhqidWhj4GVNiVDC2LsHX6jNX/game-4648923_1280.jpg)&lt;/center&gt;
Games are fun and most people like to play different kinds of games. I'm not sure about the game we are building. Whether it be fun or not, the purpose of this project is the tutorial. To have a step-by-step guide that developers can use as a reference in building apps on Hive.

Check out previous posts:

***
#### Building the transactions
We will build the back-end for the front-end that we built in the previous post. All goes into `js/app.js`.
```
const random = (length = 20) =&amp;gt; {
  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'
  let str = ''
  for (let i = 0; i &amp;lt; length; i++) {
    str += chars.charAt(Math.floor(Math.random() * chars.length))
  }
  return str
}
```
A simple function to generate a random string. We will use the random string for the game_id.
***
```
const createGame = async () =&amp;gt; {
  const button = document.getElementById('create-game-btn')
  button.setAttribute('disabled', 'true')
  const errorOutput = document.getElementById('create-game-error')
  const successOutput = document.getElementById('create-game-success')
  errorOutput.innerHTML = ''
  successOutput.innerHTML = ''
  try {
    const game = {
      app: 'tictactoe/0.0.1',
      action: 'create_game',
      id: random(20),
      starting_player: document.getElementById('starting-player').value
    }
    const operations = [
      [
        'custom_json',
        {
          required_auths: [],
          required_posting_auths: [userData.username],
          id: 'tictactoe',
          json: JSON.stringify(game)
        }
      ]
    ]
    const tx = new hiveTx.Transaction()
    await tx.create(operations)
    const privateKey = hiveTx.PrivateKey.from(userData.key)
    tx.sign(privateKey)
    const result = await tx.broadcast()
    if (result &amp;amp;&amp;amp; result.result &amp;amp;&amp;amp; result.result.block_num) {
      successOutput.innerHTML =
        'Success! &lt;a href=&quot;link to game&quot;&gt;Click to see&lt;/a&gt;'
    } else {
      errorOutput.innerHTML =
        'Error! Check console for details. Press Ctrl+Shift+J'
      console.error(result)
    }
  } catch (e) {
    errorOutput.innerHTML =
      'Error! Check console for details. Press Ctrl+Shift+J'
    console.error(e)
  }
  button.removeAttribute('disabled')
}
```
We create the transaction by using the [hive-tx](https://www.npmjs.com/package/hive-tx) library then sign and broadcast it. We put the game link in the success message and show it to the user.

Now users can create the game and see the list of games. We create the `game.html` page for users to play the game.
***
#### Game page
We can add the game board, moves history, and the game stats like the winner, player1, and player2. I think we can make this page accessible by the game_id, like `/game.html?id=game_id_here`. Let's create the easier parts first.

`game.html`: We use the head from `index.html` and the same navbar code.
```
&amp;lt;!DOCTYPE html&amp;gt;
&lt;html lang=&quot;en&quot;&gt;

&lt;head&gt;
  &lt;meta charset=&quot;UTF-8&quot; /&gt;
  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot; /&gt;
  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;
  &lt;meta name=&quot;description&quot; content=&quot;A decentralized game on hive blockchain&quot; /&gt;
  &lt;title&gt;Tic-Tac-Toe on Hive blockchain&lt;/title&gt;
  &lt;link href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta2/dist/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot; integrity=&quot;sha384-BmbxuPwQa2lc/FVzBcNJ7UAyJxM6wuqIj61tLrc4wSX0szH/Ev+nYRRuWlolflfl&quot; crossorigin=&quot;anonymous&quot; /&gt;
  &lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta2/dist/js/bootstrap.bundle.min.js&quot; integrity=&quot;sha384-b5kHyXgcpbZJO/tY9Ul7kGkf1S0CWuKcCD38l8YkeH8z8QjE0GmW1gYU5S9FOnJ0&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;
  &lt;script src=&quot;https://cdn.jsdelivr.net/npm/hive-tx/dist/hive-tx.min.js&quot;&gt;&lt;/script&gt;
  &lt;link rel=&quot;stylesheet&quot; href=&quot;css/style.css&quot; /&gt;
&lt;/head&gt;

&lt;body&gt;
  &lt;nav class=&quot;navbar navbar-expand navbar-dark bg-dark&quot;&gt;
    &lt;div class=&quot;container-fluid&quot;&gt;
      &lt;a class=&quot;navbar-brand&quot; href=&quot;#&quot;&gt;Tic-Tac-Toe&lt;/a&gt;
      &lt;ul class=&quot;navbar-nav&quot;&gt;
        &lt;li class=&quot;nav-item&quot;&gt;
          &lt;a class=&quot;nav-link&quot; href=&quot;#&quot; data-bs-toggle=&quot;modal&quot; data-bs-target=&quot;#login-modal&quot; id=&quot;login-button&quot;&gt;
            Login
          &lt;/a&gt;
        &lt;li class=&quot;nav-item dropdown&quot; id=&quot;logout-menu&quot; style=&quot;display: none;&quot;&gt;
          &lt;a class=&quot;nav-link dropdown-toggle&quot; href=&quot;#&quot; id=&quot;username-button&quot; role=&quot;button&quot; data-bs-toggle=&quot;dropdown&quot; aria-expanded=&quot;false&quot;&gt;&lt;/a&gt;
          &lt;ul class=&quot;dropdown-menu dropdown-menu-end&quot; aria-labelledby=&quot;username-button&quot;&gt;
            &lt;li&gt;&lt;a class=&quot;dropdown-item&quot; href=&quot;#&quot; onclick=&quot;logout()&quot;&gt;Logout&lt;/a&gt;&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/div&gt;
  &lt;/nav&gt;
  &lt;!-- Login Modal --&gt;
  &lt;div class=&quot;modal fade&quot; id=&quot;login-modal&quot; tabindex=&quot;-1&quot; aria-labelledby=&quot;login-modal-title&quot; aria-hidden=&quot;true&quot;&gt;
    &lt;div class=&quot;modal-dialog&quot;&gt;
      &lt;div class=&quot;modal-content&quot;&gt;
        &lt;div class=&quot;modal-header&quot;&gt;
          &lt;h5 class=&quot;modal-title&quot; id=&quot;login-modal-title&quot;&gt;Login&lt;/h5&gt;
          &lt;button type=&quot;button&quot; class=&quot;btn-close&quot; data-bs-dismiss=&quot;modal&quot; aria-label=&quot;Close&quot;&gt;&lt;/button&gt;
        &lt;/div&gt;
        &lt;div class=&quot;modal-body&quot;&gt;
          &lt;form onsubmit=&quot;login(); return false&quot;&gt;
            &lt;div class=&quot;mb-3&quot;&gt;
              &lt;label for=&quot;username&quot; class=&quot;form-label&quot;&gt;Username:&lt;/label&gt;
              &lt;div class=&quot;input-group mb-3&quot;&gt;
                &lt;span class=&quot;input-group-text&quot;&gt;@&lt;/span&gt;
                &lt;input type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;username&quot; aria-label=&quot;username&quot; id=&quot;username&quot; required=&quot;&quot; /&gt;
              &lt;/div&gt;
              &lt;div class=&quot;form-text&quot;&gt;Your Hive username. Lowercase.&lt;/div&gt;
            &lt;/div&gt;
            &lt;div class=&quot;mb-3&quot;&gt;
              &lt;label for=&quot;posting-key&quot; class=&quot;form-label&quot;&gt;Posting key:&lt;/label&gt;
              &lt;input type=&quot;password&quot; class=&quot;form-control&quot; id=&quot;posting-key&quot; placeholder=&quot;Private posting key&quot; required=&quot;&quot; /&gt;
              &lt;div class=&quot;form-text&quot;&gt;Your key will never leave your browser.&lt;/div&gt;
            &lt;/div&gt;
            &lt;p id=&quot;login-error&quot;&gt;&lt;/p&gt;
            &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary&quot; id=&quot;login-form-btn&quot;&gt;Login&lt;/button&gt;
            &lt;button type=&quot;button&quot; class=&quot;btn btn-secondary&quot; data-bs-dismiss=&quot;modal&quot;&gt;Close&lt;/button&gt;
          &lt;/form&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;!-- Modal end --&gt;

  &lt;script src=&quot;js/app.js&quot;&gt;&lt;/script&gt;
&lt;/body&gt;

&lt;/html&gt;
```
Since we use `app.js` here too, we have to modify 2 lines in `app.js`:
```
// Run the script only in homepage
if (!window.location.pathname.match(/game.html$/)) {
  loadTheGames()
  setInterval(() =&amp;gt; loadTheGames(), 5000)
}
```
In the above code, we can define which scripts to run on the homepage and which run on the game page.

We need an API for retrieving the game details by game_id. Let's set that up in the back-end.
`api/game.js`:
```
const mysql = require('../helpers/mysql')
const express = require('express')
const router = express.Router()

router.get('/game/:id', async (req, res) =&amp;gt; {
  try {
    const id = req.params.id
    if (!id || id.length !== 20 || !id.match(/^[a-zA-Z0-9]+$/)) {
      return res.json({
        id: 0,
        error: 'Wrong id.'
      })
    }
    const game = await mysql.query(
      'SELECT `game_id`, `player1`, `player2`, `starting_player`, `status`, `winner` FROM `games`' +
        'WHERE `game_id`=?',
      [id]
    )
    if (!game || !Array.isArray(game) || game.length &amp;lt; 1) {
      return res.json({
        id: 1,
        game: []
      })
    }
    return res.json({
      id: 1,
      game
    })
  } catch (e) {
    return res.json({
      id: 0,
      error: 'Unexpected error.'
    })
  }
})

module.exports = router
```
The above code is similar to the other APIs we set up. Nothing new here. Now we can show the game details on the game.html page.

```
const getGameDetails = async (id) =&amp;gt; {
  const data = await APICall('/game/' + id)
  if (data &amp;amp;&amp;amp; data.id === 0) {
    document.getElementById('details-error').innerHTML = data.error
  } else if (data &amp;amp;&amp;amp; data.id === 1) {
    const game = data.game[0]
    document.getElementById('game-details').innerHTML = `&lt;tr&gt;
    &lt;td&gt;${game.player1}&lt;/td&gt;
    &lt;td&gt;${game.player2}&lt;/td&gt;
    &lt;td&gt;${game.starting_player}&lt;/td&gt;
    &lt;td&gt;${game.status}&lt;/td&gt;
    &lt;td&gt;${game.winner}&lt;/td&gt;
    &lt;/tr&gt;`
    if (game.player1 === userData.username) {
      document.getElementById('req-message-1').style.display = 'block'
      document.getElementById('req-message-2').style.display = 'none'
    }
  }
}
```
And running the above function:
```
const queryString = window.location.search
const urlParams = new URLSearchParams(queryString)

// Run the script only in homepage
if (!window.location.pathname.match(/game.html$/)) {
  loadTheGames()
  setInterval(() =&amp;gt; loadTheGames(), 5000)
} else {
  // Run the script only in game page
  if (urlParams.has('id')) {
    getGameDetails(urlParams.get('id'))
  }
}
```
We get the `id` from the page URL and use it in the API call. Then display the data in an HTML table.
```
&lt;table class=&quot;table&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Player1&lt;/th&gt;
      &lt;th&gt;Player2&lt;/th&gt;
      &lt;th&gt;Starting player&lt;/th&gt;
      &lt;th&gt;Status&lt;/th&gt;
      &lt;th&gt;Winner&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody id=&quot;game-details&quot;&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
```
***
We can get the join requests from API and show them beside the game so player1 can accept one of the coming requests and start the game.
A simple HTML table:
```
&lt;table class=&quot;table&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Player&lt;/th&gt;
      &lt;th&gt;Status&lt;/th&gt;
      &lt;th&gt;Action&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody id=&quot;request-list&quot;&gt;&lt;/tbody&gt;
&lt;/table&gt;
```
And the API call:
```
const getRequests = async (id, creator = false) =&amp;gt; {
  const data = await APICall('/requests/' + id)
  if (data &amp;amp;&amp;amp; data.id === 0) {
    document.getElementById('requests-error').innerHTML = data.error
  } else if (data &amp;amp;&amp;amp; data.id === 1) {
    let temp = ''
    for (let i = 0; i &amp;lt; data.requests.length; i++) {
      const request = data.requests[i]
      temp += `&lt;tr&gt;
        &lt;td&gt;${request.player}&lt;/td&gt;
        &lt;td&gt;${request.status}&lt;/td&gt;`
      if (creator) {
        // Add an Accept button if the visitor is player1 (creator)
        temp += `&lt;td&gt;
          &lt;button class=&quot;btn btn-primary&quot; onclick=&quot;acceptRequest(${id}, ${request.player})&quot;&gt;
            Accept
          &lt;/button&gt;
        &lt;/td&gt;`
      } else {
        temp += '&lt;td&gt;---&lt;/td&gt;'
      }
      temp += '&lt;/tr&gt;'
    }
    if (data.requests.length &amp;lt; 1) {
      temp = 'None'
    }
    document.getElementById('request-list').innerHTML = temp
  }
}
```
We can call the `getRequests` function inside the `getGameDetails` function because we can know when the user (visitor) is the creator of the game aka player1. Then show them an `Accept` button based on that so the player1 can accept the request.
```
const getGameDetails = async (id) =&amp;gt; {
  ... // skipped unchanged lines
    if (game.player1 === userData.username) {
      document.getElementById('req-message-1').style.display = 'block'
      document.getElementById('req-message-2').style.display = 'none'
      getRequests(id, true)
    } else {
      getRequests(id, false)
    }
  }
}
```

Also, let's make both functions run with an interval to auto-update the data.
```
// Run the script only in homepage
if (!window.location.pathname.match(/game.html$/)) {
  loadTheGames()
  setInterval(() =&amp;gt; loadTheGames(), 5000)
} else {
  // Run the script only in game page
  if (urlParams.has('id')) {
    getGameDetails(urlParams.get('id'))
    setInterval(() =&amp;gt; getGameDetails(urlParams.get('id')), 5000)
  }
}
```
***
We added the `accept` button so let's add its function and transaction too.
```
const acceptRequest = async (id, player) =&amp;gt; {
  const success = document.getElementById('requests-success')
  const error = document.getElementById('requests-error')
  if (!userData.username) {
    return
  }
  try {
    const accept = {
      app: 'tictactoe/0.0.1',
      action: 'accept_request',
      id,
      player
    }
    const operations = [
      [
        'custom_json',
        {
          required_auths: [],
          required_posting_auths: [userData.username],
          id: 'tictactoe',
          json: JSON.stringify(accept)
        }
      ]
    ]
    const tx = new hiveTx.Transaction()
    await tx.create(operations)
    const privateKey = hiveTx.PrivateKey.from(userData.key)
    tx.sign(privateKey)
    const result = await tx.broadcast()
    if (result &amp;amp;&amp;amp; result.result &amp;amp;&amp;amp; result.result.block_num) {
      success.innerHTML = 'Success! Game started.'
    } else {
      error.innerHTML = 'Error! Check console for details. Press Ctrl+Shift+J'
      console.error(result)
    }
  } catch (e) {
    error.innerHTML = 'Error! Check console for details. Press Ctrl+Shift+J'
    console.error(e)
  }
}
```
***
Now let's add a button for other users to join the game.
```
&lt;button id=&quot;join-btn&quot; class=&quot;btn btn-primary&quot; onclick=&quot;joinGame()&quot;&gt;Join the game&lt;/button&gt;
```
And build the transaction for it:
```
const joinGame = async (gameId) =&amp;gt; {
  const success = document.getElementById('join-success')
  const error = document.getElementById('join-error')
  if (!urlParams.has('id')) {
    return
  }
  const id = urlParams.get('id')
  try {
    const joinReq = {
      app: 'tictactoe/0.0.1',
      action: 'request_join',
      id
    }
    const operations = [
      [
        'custom_json',
        {
          required_auths: [],
          required_posting_auths: [userData.username],
          id: 'tictactoe',
          json: JSON.stringify(joinReq)
        }
      ]
    ]
    const tx = new hiveTx.Transaction()
    await tx.create(operations)
    const privateKey = hiveTx.PrivateKey.from(userData.key)
    tx.sign(privateKey)
    const result = await tx.broadcast()
    if (result &amp;amp;&amp;amp; result.result &amp;amp;&amp;amp; result.result.block_num) {
      success.innerHTML = 'Success! Your request submitted.'
    } else {
      error.innerHTML = 'Error! Check console for details. Press Ctrl+Shift+J'
      console.error(result)
    }
  } catch (e) {
    error.innerHTML = 'Error! Check console for details. Press Ctrl+Shift+J'
    console.error(e)
  }
}
```
***
## Next part
We finally finished most of the functions needed for starting the game. I think the only remaining challenge is the gameplay. We can use Canvas for the front-end graphical gameplay. I already built a project with Canvas but there is nothing easy about coding. It's still a challenge.

Let me list the remaining tasks:
- Gameplay front-end
- Gameplay back-end
- resync method for the database
- Front-end polishing

We are getting to the end of this project and I think we can finish it in the next post and finally play this boring game at least once.

Making tutorials and coding at the same time is really hard and tiring. I might continue writing this kind of series for different projects if there is enough interest but the target audience is too small. So let me know in the comments what you think.

I wouldn't mind building an interesting app or game which can be some kind of tutorial too.

TBH after writing the above line I wanted to remove it. Let's see what happens.

Thanks for reading. Make sure to follow me and share the post. Upvote if you like and leave a comment.


Enjoy the cat.
&lt;center&gt;![cat-pixabay.jpg](https://images.hive.blog/DQmSnpWeu5yxjzddzEavE4c61BkweaXrEJepuv4LHyMKpg1/cat-4611189_1280.jpg)
&lt;/center&gt;
&lt;sub&gt;Images source: pixabay.com&lt;/sub&gt;
***
[GitLab](https://gitlab.com/mahdiyari/decentralized-game-on-hive)
[Part 1](https://hive.blog/hive-139531/@mahdiyari/making-a-decentralized-game-on-hive-tic-tac-toe-part-1)
[Part 2](https://hive.blog/hive-139531/@mahdiyari/making-a-decentralized-game-on-hive-part-2)
[Part 3](https://hive.blog/hive-139531/@mahdiyari/making-a-decentralized-game-on-hive-part-3)
[Part 4](https://hive.blog/hive-169321/@mahdiyari/making-a-decentralized-game-on-hive-part-4)
***
**Vote for my witness:**
- https://wallet.hive.blog/~witnesses
- https://peakd.com/witnesses
- https://ecency.com/witnesses&lt;/div&gt;
&lt;script crossorigin=&quot;anonymous&quot; integrity=&quot;sha256-4+XzXVhsDmqanXGHaHvgh1gMQKX40OUvDEBTu8JcmNs=&quot; src=&quot;https://code.jquery.com/jquery-3.5.1.slim.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://unpkg.com/steem-content-renderer&quot;&gt;&lt;/script&gt;

&lt;script&gt;
  $(document).ready(function() {
    try {
      const renderer = new SteemContentRenderer.DefaultRenderer({
        baseUrl: &quot;https://hive.blog/&quot;,
        breaks: true,
        skipSanitization: false,
        allowInsecureScriptTags: false,
        addNofollowToLinks: true,
        doNotShowImages: false,
        ipfsPrefix: &quot;&quot;,
        assetsWidth: 640,
        assetsHeight: 480,
        imageProxyFn: (url) =&gt; url,
        usertagUrlFn: (account) =&gt; &quot;/@mahdiyari&quot;,
        hashtagUrlFn: (hashtag) =&gt; &quot;/making-a-decentralized-game-on-hive-part-5&quot;,
        isLinkSafeFn: (url) =&gt; true,
      });
      
      const inputElem = $('#content-mahdiyari-making-a-decentralized-game-on-hive-part-5').html();
      const outputElem = $('#content-mahdiyari-making-a-decentralized-game-on-hive-part-5');
      const output = renderer.render(inputElem);
      
      outputElem.html(output);
    } catch(e) {
      console.log(e);
    }
  });
&lt;/script&gt;

&lt;style&gt;
  #content-mahdiyari-making-a-decentralized-game-on-hive-part-5 {
    padding: 0 3rem;
    color: #444444;
    font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Helvetica, Arial, sans-serif;
    font-size: 16px;
    line-height: 1.8;
    text-shadow: 0 1px 0 #ffffff;
    padding: 0.5rem;
  }
  #content-mahdiyari-making-a-decentralized-game-on-hive-part-5 code {
    background: white;
  }
  #content-mahdiyari-making-a-decentralized-game-on-hive-part-5 a {
    border-bottom: 1px solid #444444; color: #444444; text-decoration: none;
  }
  #content-mahdiyari-making-a-decentralized-game-on-hive-part-5 a:hover {
    border-bottom: 0;
  }
  #content-mahdiyari-making-a-decentralized-game-on-hive-part-5 h1 {
    font-size: 2.2em;
  }
  #content-mahdiyari-making-a-decentralized-game-on-hive-part-5 h2, h3, h4, h5 {
    margin-bottom: 0;
  }
  #content-mahdiyari-making-a-decentralized-game-on-hive-part-5 header small {
    color: #999;
    font-size: 50%;
  }
  #content-mahdiyari-making-a-decentralized-game-on-hive-part-5 img {
    max-width: 100%;
  }
&lt;/style&gt;

&lt;hr /&gt;

&lt;p&gt;
  See: &lt;a href=&quot;https://hive.blog/hive-169321/@mahdiyari/making-a-decentralized-game-on-hive-part-5&quot;&gt;Making a Decentralized Game on Hive - Part 5&lt;/a&gt;
  by
  &lt;a href=&quot;https://hive.blog/@mahdiyari&quot;&gt;@mahdiyari&lt;/a&gt;
&lt;/p&gt;</content><author><name>mahdiyari</name></author><category term="howto" /><category term="nodejs" /><summary type="html">![game-pixabay.jpg](https://images.hive.blog/DQmSeL2wLvGPWHqcLVX4ZtfhqidWhj4GVNiVDC2LsHX6jNX/game-4648923_1280.jpg) Games are fun and most people like to play different kinds of games. I'm not sure about the game we are building. Whether it be fun or not, the purpose of this project is the tutorial. To have a step-by-step guide that developers can use as a reference in building apps on Hive. Check out previous posts: *** #### Building the transactions We will build the back-end for the front-end that we built in the previous post. All goes into `js/app.js`. ``` const random = (length = 20) =&amp;gt; { const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789' let str = '' for (let i = 0; i &amp;lt; length; i++) { str += chars.charAt(Math.floor(Math.random() * chars.length)) } return str } ``` A simple function to generate a random string. We will use the random string for the game_id. *** ``` const createGame = async () =&amp;gt; { const button = document.getElementById('create-game-btn') button.setAttribute('disabled', 'true') const errorOutput = document.getElementById('create-game-error') const successOutput = document.getElementById('create-game-success') errorOutput.innerHTML = '' successOutput.innerHTML = '' try { const game = { app: 'tictactoe/0.0.1', action: 'create_game', id: random(20), starting_player: document.getElementById('starting-player').value } const operations = [ [ 'custom_json', { required_auths: [], required_posting_auths: [userData.username], id: 'tictactoe', json: JSON.stringify(game) } ] ] const tx = new hiveTx.Transaction() await tx.create(operations) const privateKey = hiveTx.PrivateKey.from(userData.key) tx.sign(privateKey) const result = await tx.broadcast() if (result &amp;amp;&amp;amp; result.result &amp;amp;&amp;amp; result.result.block_num) { successOutput.innerHTML = 'Success! Click to see' } else { errorOutput.innerHTML = 'Error! Check console for details. Press Ctrl+Shift+J' console.error(result) } } catch (e) { errorOutput.innerHTML = 'Error! Check console for details. Press Ctrl+Shift+J' console.error(e) } button.removeAttribute('disabled') } ``` We create the transaction by using the [hive-tx](https://www.npmjs.com/package/hive-tx) library then sign and broadcast it. We put the game link in the success message and show it to the user. Now users can create the game and see the list of games. We create the `game.html` page for users to play the game. *** #### Game page We can add the game board, moves history, and the game stats like the winner, player1, and player2. I think we can make this page accessible by the game_id, like `/game.html?id=game_id_here`. Let's create the easier parts first. `game.html`: We use the head from `index.html` and the same navbar code. ``` &amp;lt;!DOCTYPE html&amp;gt; Tic-Tac-Toe on Hive blockchain Tic-Tac-Toe Login Logout Login Username: @ Your Hive username. Lowercase. Posting key: Your key will never leave your browser. Login Close ``` Since we use `app.js` here too, we have to modify 2 lines in `app.js`: ``` // Run the script only in homepage if (!window.location.pathname.match(/game.html$/)) { loadTheGames() setInterval(() =&amp;gt; loadTheGames(), 5000) } ``` In the above code, we can define which scripts to run on the homepage and which run on the game page. We need an API for retrieving the game details by game_id. Let's set that up in the back-end. `api/game.js`: ``` const mysql = require('../helpers/mysql') const express = require('express') const router = express.Router() router.get('/game/:id', async (req, res) =&amp;gt; { try { const id = req.params.id if (!id || id.length !== 20 || !id.match(/^[a-zA-Z0-9]+$/)) { return res.json({ id: 0, error: 'Wrong id.' }) } const game = await mysql.query( 'SELECT `game_id`, `player1`, `player2`, `starting_player`, `status`, `winner` FROM `games`' + 'WHERE `game_id`=?', [id] ) if (!game || !Array.isArray(game) || game.length &amp;lt; 1) { return res.json({ id: 1, game: [] }) } return res.json({ id: 1, game }) } catch (e) { return res.json({ id: 0, error: 'Unexpected error.' }) } }) module.exports = router ``` The above code is similar to the other APIs we set up. Nothing new here. Now we can show the game details on the game.html page. ``` const getGameDetails = async (id) =&amp;gt; { const data = await APICall('/game/' + id) if (data &amp;amp;&amp;amp; data.id === 0) { document.getElementById('details-error').innerHTML = data.error } else if (data &amp;amp;&amp;amp; data.id === 1) { const game = data.game[0] document.getElementById('game-details').innerHTML = ` ${game.player1} ${game.player2} ${game.starting_player} ${game.status} ${game.winner} ` if (game.player1 === userData.username) { document.getElementById('req-message-1').style.display = 'block' document.getElementById('req-message-2').style.display = 'none' } } } ``` And running the above function: ``` const queryString = window.location.search const urlParams = new URLSearchParams(queryString) // Run the script only in homepage if (!window.location.pathname.match(/game.html$/)) { loadTheGames() setInterval(() =&amp;gt; loadTheGames(), 5000) } else { // Run the script only in game page if (urlParams.has('id')) { getGameDetails(urlParams.get('id')) } } ``` We get the `id` from the page URL and use it in the API call. Then display the data in an HTML table. ``` Player1 Player2 Starting player Status Winner ``` *** We can get the join requests from API and show them beside the game so player1 can accept one of the coming requests and start the game. A simple HTML table: ``` Player Status Action ``` And the API call: ``` const getRequests = async (id, creator = false) =&amp;gt; { const data = await APICall('/requests/' + id) if (data &amp;amp;&amp;amp; data.id === 0) { document.getElementById('requests-error').innerHTML = data.error } else if (data &amp;amp;&amp;amp; data.id === 1) { let temp = '' for (let i = 0; i &amp;lt; data.requests.length; i++) { const request = data.requests[i] temp += ` ${request.player} ${request.status}` if (creator) { // Add an Accept button if the visitor is player1 (creator) temp += ` Accept ` } else { temp += '---' } temp += '' } if (data.requests.length &amp;lt; 1) { temp = 'None' } document.getElementById('request-list').innerHTML = temp } } ``` We can call the `getRequests` function inside the `getGameDetails` function because we can know when the user (visitor) is the creator of the game aka player1. Then show them an `Accept` button based on that so the player1 can accept the request. ``` const getGameDetails = async (id) =&amp;gt; { ... // skipped unchanged lines if (game.player1 === userData.username) { document.getElementById('req-message-1').style.display = 'block' document.getElementById('req-message-2').style.display = 'none' getRequests(id, true) } else { getRequests(id, false) } } } ``` Also, let's make both functions run with an interval to auto-update the data. ``` // Run the script only in homepage if (!window.location.pathname.match(/game.html$/)) { loadTheGames() setInterval(() =&amp;gt; loadTheGames(), 5000) } else { // Run the script only in game page if (urlParams.has('id')) { getGameDetails(urlParams.get('id')) setInterval(() =&amp;gt; getGameDetails(urlParams.get('id')), 5000) } } ``` *** We added the `accept` button so let's add its function and transaction too. ``` const acceptRequest = async (id, player) =&amp;gt; { const success = document.getElementById('requests-success') const error = document.getElementById('requests-error') if (!userData.username) { return } try { const accept = { app: 'tictactoe/0.0.1', action: 'accept_request', id, player } const operations = [ [ 'custom_json', { required_auths: [], required_posting_auths: [userData.username], id: 'tictactoe', json: JSON.stringify(accept) } ] ] const tx = new hiveTx.Transaction() await tx.create(operations) const privateKey = hiveTx.PrivateKey.from(userData.key) tx.sign(privateKey) const result = await tx.broadcast() if (result &amp;amp;&amp;amp; result.result &amp;amp;&amp;amp; result.result.block_num) { success.innerHTML = 'Success! Game started.' } else { error.innerHTML = 'Error! Check console for details. Press Ctrl+Shift+J' console.error(result) } } catch (e) { error.innerHTML = 'Error! Check console for details. Press Ctrl+Shift+J' console.error(e) } } ``` *** Now let's add a button for other users to join the game. ``` Join the game ``` And build the transaction for it: ``` const joinGame = async (gameId) =&amp;gt; { const success = document.getElementById('join-success') const error = document.getElementById('join-error') if (!urlParams.has('id')) { return } const id = urlParams.get('id') try { const joinReq = { app: 'tictactoe/0.0.1', action: 'request_join', id } const operations = [ [ 'custom_json', { required_auths: [], required_posting_auths: [userData.username], id: 'tictactoe', json: JSON.stringify(joinReq) } ] ] const tx = new hiveTx.Transaction() await tx.create(operations) const privateKey = hiveTx.PrivateKey.from(userData.key) tx.sign(privateKey) const result = await tx.broadcast() if (result &amp;amp;&amp;amp; result.result &amp;amp;&amp;amp; result.result.block_num) { success.innerHTML = 'Success! Your request submitted.' } else { error.innerHTML = 'Error! Check console for details. Press Ctrl+Shift+J' console.error(result) } } catch (e) { error.innerHTML = 'Error! Check console for details. Press Ctrl+Shift+J' console.error(e) } } ``` *** ## Next part We finally finished most of the functions needed for starting the game. I think the only remaining challenge is the gameplay. We can use Canvas for the front-end graphical gameplay. I already built a project with Canvas but there is nothing easy about coding. It's still a challenge. Let me list the remaining tasks: - Gameplay front-end - Gameplay back-end - resync method for the database - Front-end polishing We are getting to the end of this project and I think we can finish it in the next post and finally play this boring game at least once. Making tutorials and coding at the same time is really hard and tiring. I might continue writing this kind of series for different projects if there is enough interest but the target audience is too small. So let me know in the comments what you think. I wouldn't mind building an interesting app or game which can be some kind of tutorial too. TBH after writing the above line I wanted to remove it. Let's see what happens. Thanks for reading. Make sure to follow me and share the post. Upvote if you like and leave a comment. Enjoy the cat. ![cat-pixabay.jpg](https://images.hive.blog/DQmSnpWeu5yxjzddzEavE4c61BkweaXrEJepuv4LHyMKpg1/cat-4611189_1280.jpg) Images source: pixabay.com *** [GitLab](https://gitlab.com/mahdiyari/decentralized-game-on-hive) [Part 1](https://hive.blog/hive-139531/@mahdiyari/making-a-decentralized-game-on-hive-tic-tac-toe-part-1) [Part 2](https://hive.blog/hive-139531/@mahdiyari/making-a-decentralized-game-on-hive-part-2) [Part 3](https://hive.blog/hive-139531/@mahdiyari/making-a-decentralized-game-on-hive-part-3) [Part 4](https://hive.blog/hive-169321/@mahdiyari/making-a-decentralized-game-on-hive-part-4) *** **Vote for my witness:** - https://wallet.hive.blog/~witnesses - https://peakd.com/witnesses - https://ecency.com/witnesses See: Making a Decentralized Game on Hive - Part 5 by @mahdiyari</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://images.hive.blog/DQmSeL2wLvGPWHqcLVX4ZtfhqidWhj4GVNiVDC2LsHX6jNX/game-4648923_1280.jpg" /><media:content medium="image" url="https://images.hive.blog/DQmSeL2wLvGPWHqcLVX4ZtfhqidWhj4GVNiVDC2LsHX6jNX/game-4648923_1280.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">8th update of 2021 on BlockTrades work on Hive software</title><link href="https://hivedocs.info/news/core/development/2021/04/06/8th-update-of-2021-on-blocktrades-work-on-hive-software.html" rel="alternate" type="text/html" title="8th update of 2021 on BlockTrades work on Hive software" /><published>2021-04-06T17:42:57-07:00</published><updated>2021-04-06T17:42:57-07:00</updated><id>https://hivedocs.info/news/core/development/2021/04/06/8th-update-of-2021-on-blocktrades-work-on-hive-software</id><content type="html" xml:base="https://hivedocs.info/news/core/development/2021/04/06/8th-update-of-2021-on-blocktrades-work-on-hive-software.html">&lt;div id=&quot;content-blocktrades-8th-update-of-2021-on-blocktrades-work-on-hive-software&quot;&gt;Below is a list of some Hive-related programming issues worked on by BlockTrades team during the past few weeks:

# Hived work (blockchain node software)

## Code cleanup and investigation of support for Ubuntu 20

Separate from our hardfork 25 changes, we’ve been doing some general code cleanup to make the code more maintainable, and we also started a task to get the code to compile cleanly under Ubuntu 20 without requiring “fiddling” with the build process.

## HF25 changes (these are described in detail in our Hive roadmap post)

### Expiration of old governance votes
We’ve completed and written tests for all changes related to handling expiration of governance votes (votes for witnesses and Hive Fund proposals).

### Curation rewards calculation changes

We completed analysis and implementation of voting window curation changes for HF25. We’re also writing some tests for the curation calculator, as we found the current tests were inadequate (our changes only triggered one fail of existing tests). 

During the process, we also discovered an error in the implementation of the square-root function used by the current curation algorithm for unsigned 128 bit integers, but we’re removing use of this square-root function in the new curation calculation, as part of our removal of the convergent-linear curve code (this is the code that weakened small votes).

The new curation reward algorithm works as follows: 
* first day (24 hours) linear rewards (equal weight to all voters in that window)
* second window (24 hours to 72 hours/3 days) with reward weight/2
* remaining votes in 3rd window with reward weight/8

Under the new algorithm, anyone voting with the first 24 hours of the post receives the same proportional rewards. In other words, for any given voting strength, the voter will get the same percentage return-on-investment as any other voter during that period. 

Voters voting during the second and third window receive a smaller proportional curation reward (and voters who voted during the first 24 hour period receive a little more reward when voters vote during the 2nd or 3rd window). Note that if no one votes during the first window, then 2nd window voters will receive the same amount of curation as if they had voted during the first window.

The basic idea behind the new algorithm is to encourage voters to find good content, but to put them on an equal footing with voting bots. Under the current algorithm that we’re replacing, voting bots have an advantage because there’s a short window in time to cast a vote for optimal curation rewards.

Note that author rewards are not affected by this change: this change only affects how curation rewards are distributed among voters.

### Hive to HBD conversion operation

The only code we’re still working on in hived for hardfork 25 is the new operation that allows users to convert liquid Hive to HBD. We’re still researching some issues associated with the existing code that computes the median price for Hive, but we expect to have the conversion code completed and tested this week.

### Hardfork code freeze in middle of this month

We expect to do a code freeze on 4/15 (middle of this month) so that witnesses can launch a testnet and begin evaluating and testing the code changes for hardfork 25. 

### Testnet to operate for at least one month

Barring any problems, we expect the testnet to operate for at least one month, then we’ll begin final prep for HF25. 

This will allow time for Hive API libraries and frontend web sites to make changes to provide notifications related to vote expiration and to enable the use of the new Hive→HBD conversion operation and the recurrent payments and rc delegation functionality implemented by @howo. But strictly speaking, most of such frontend functionality can be implemented after the hardfork is executed without causing any problems, so the primary reason for this time interval is to allow for testing and evaluation of the performance of the new algorithms and features.

# Modular hivemind (application framework for 2nd layer apps)

## Syncing modular hivemind from SQL account history plugin

We were able to successfully sync a hivemind instance from the data injected by the SQL account history plugin (with the syncing taking place as the SQL data was injected by the plugin), but we encountered a problem at the end when some of the indexes were being recreated by hivemind as hivemind exited full sync mode and entered live sync mode. We’re investigating this issue now and we expect a fix in the next couple of days.

## Performance measurements for hivemind sync with SQL account history plugin

Despite the issue when exiting full sync mode, we were able to collect some useful performance measurements. 

On the regular hivemind sync version, where we first do a hived replay to fill hivemind’s database, and where we then do a hivemind sync where indexes and foreign keys are dropped automatically and rebuilt at the end), the hivemind sync process took 50983s (hivemind sync) + 4047s (index creation) + 1998s (foreign key creation) = 57028s

On the modified version of hivemind sync, where indexes are created before the sync begins, the hivemind sync took 67947s (regular version was 10918s faster).

Despite the increased time for the modified version (10918s/3600s = 3.03 hours), this allows for an overall decrease  in the time to fully sync the hivemind node using the SQL account history plugin, because it means that the hivemind sync can be started while the hived node is being replayed to fill hivemind’s database. 

In the “regular method”, the total time would be  hived sync (~8 hours) + hivemind full sync time (15.84 hours) = 23.84 hours. With the modified method, it looks like we can get this time down to just hivemind modified sync time (18.87 hours). 

Note that all these times should ultimate be compared with the existing time to do a hivemind sync without the SQL account history plugin (~90+ hours). So it seems possible we could be looking at a 4x or better speedup in the time to do a full hivemind sync of a new node with the SQL account history plugin, if I haven’t messed up any where in my assumptions (I didn’t want to delay this report any longer, so it’s not been “peer-reviewed”).

# Hivemind (social media middle-ware)

## Significantly reduced memory usage by hivemind process

We fixed an issue in hivemind where a dictionary was used as a cache for post ids, and this dictionary was progressively consuming more memory as the blockchain grew in size. We spotted this issue during some our performance testing of hivemind syncing using the data provided by the new SQL account history plugin (but the problem exists for all existing hivemind implementations).

Unfortunately, we haven’t had a chance to measure the exact memory savings for the fix yet, as we were focused on other tasks, but I should have those numbers for our next report.

## Testing hivemind syncing on a low-end server

We’ve setup a low end computer (8GB of RAM and only a conventional hard disk drive, no SSD drive) to see what the minimum requirements are for a full hivemind node are, and to see if we can lower those requirements. In our tests, the hivemind process did manage to finish the full sync process, but it hit some problems during creation of indexes, so we’ll be digging into this issue further in the upcoming week.

## Testing performance of hivemind with Postgres 13

Currently postgres version 10 is the recommended version of the database for use with hivemind, but we did some tests this week to check if hivemind was compatible with the latest version of postgres (version 13) and to measure the relative performance. 

It’s all good news: no code changes were required to support postgres 13, and as an extra bonus, we saw a 5% speedup in full sync time in our test. We didn’t make any comprehensive tests yet of API response time related to SQL query speed, but signs are good that we can only expect performance improvements and no regressions.

## Miscellaneous hivemind bug fixes and documentation

We fixed a couple of small bugs reported by users and frontend devs, such as a pagination issue with a community-related API call and an issue with community name validation:  https://gitlab.syncad.com/hive/hivemind/-/merge_requests/488
https://gitlab.syncad.com/hive/hivemind/-/merge_requests/489

And we have an open merge request for the code to generate openapi documentation for the various hivemind API methods: https://gitlab.syncad.com/hive/hivemind/-/merge_requests/486

# Another progress update soon

I’ll probably be putting out another progress update early next week, after we have more performance numbers. I kept delaying this one hoping to include those numbers, but we were caught up in too many tasks and small issues spoiled a bunch of our measurement attempts, and then the Easter holiday hit.&lt;/div&gt;
&lt;script crossorigin=&quot;anonymous&quot; integrity=&quot;sha256-4+XzXVhsDmqanXGHaHvgh1gMQKX40OUvDEBTu8JcmNs=&quot; src=&quot;https://code.jquery.com/jquery-3.5.1.slim.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://unpkg.com/steem-content-renderer&quot;&gt;&lt;/script&gt;

&lt;script&gt;
  $(document).ready(function() {
    try {
      const renderer = new SteemContentRenderer.DefaultRenderer({
        baseUrl: &quot;https://hive.blog/&quot;,
        breaks: true,
        skipSanitization: false,
        allowInsecureScriptTags: false,
        addNofollowToLinks: true,
        doNotShowImages: false,
        ipfsPrefix: &quot;&quot;,
        assetsWidth: 640,
        assetsHeight: 480,
        imageProxyFn: (url) =&gt; url,
        usertagUrlFn: (account) =&gt; &quot;/@blocktrades&quot;,
        hashtagUrlFn: (hashtag) =&gt; &quot;/8th-update-of-2021-on-blocktrades-work-on-hive-software&quot;,
        isLinkSafeFn: (url) =&gt; true,
      });
      
      const inputElem = $('#content-blocktrades-8th-update-of-2021-on-blocktrades-work-on-hive-software').html();
      const outputElem = $('#content-blocktrades-8th-update-of-2021-on-blocktrades-work-on-hive-software');
      const output = renderer.render(inputElem);
      
      outputElem.html(output);
    } catch(e) {
      console.log(e);
    }
  });
&lt;/script&gt;

&lt;style&gt;
  #content-blocktrades-8th-update-of-2021-on-blocktrades-work-on-hive-software {
    padding: 0 3rem;
    color: #444444;
    font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Helvetica, Arial, sans-serif;
    font-size: 16px;
    line-height: 1.8;
    text-shadow: 0 1px 0 #ffffff;
    padding: 0.5rem;
  }
  #content-blocktrades-8th-update-of-2021-on-blocktrades-work-on-hive-software code {
    background: white;
  }
  #content-blocktrades-8th-update-of-2021-on-blocktrades-work-on-hive-software a {
    border-bottom: 1px solid #444444; color: #444444; text-decoration: none;
  }
  #content-blocktrades-8th-update-of-2021-on-blocktrades-work-on-hive-software a:hover {
    border-bottom: 0;
  }
  #content-blocktrades-8th-update-of-2021-on-blocktrades-work-on-hive-software h1 {
    font-size: 2.2em;
  }
  #content-blocktrades-8th-update-of-2021-on-blocktrades-work-on-hive-software h2, h3, h4, h5 {
    margin-bottom: 0;
  }
  #content-blocktrades-8th-update-of-2021-on-blocktrades-work-on-hive-software header small {
    color: #999;
    font-size: 50%;
  }
  #content-blocktrades-8th-update-of-2021-on-blocktrades-work-on-hive-software img {
    max-width: 100%;
  }
&lt;/style&gt;

&lt;hr /&gt;

&lt;p&gt;
  See: &lt;a href=&quot;https://hive.blog/hive-139531/@blocktrades/8th-update-of-2021-on-blocktrades-work-on-hive-software&quot;&gt;8th update of 2021 on BlockTrades work on Hive software&lt;/a&gt;
  by
  &lt;a href=&quot;https://hive.blog/@blocktrades&quot;&gt;@blocktrades&lt;/a&gt;
&lt;/p&gt;</content><author><name>blocktrades</name></author><category term="news" /><category term="core" /><category term="development" /><summary type="html">Below is a list of some Hive-related programming issues worked on by BlockTrades team during the past few weeks: # Hived work (blockchain node software) ## Code cleanup and investigation of support for Ubuntu 20 Separate from our hardfork 25 changes, we’ve been doing some general code cleanup to make the code more maintainable, and we also started a task to get the code to compile cleanly under Ubuntu 20 without requiring “fiddling” with the build process. ## HF25 changes (these are described in detail in our Hive roadmap post) ### Expiration of old governance votes We’ve completed and written tests for all changes related to handling expiration of governance votes (votes for witnesses and Hive Fund proposals). ### Curation rewards calculation changes We completed analysis and implementation of voting window curation changes for HF25. We’re also writing some tests for the curation calculator, as we found the current tests were inadequate (our changes only triggered one fail of existing tests). During the process, we also discovered an error in the implementation of the square-root function used by the current curation algorithm for unsigned 128 bit integers, but we’re removing use of this square-root function in the new curation calculation, as part of our removal of the convergent-linear curve code (this is the code that weakened small votes). The new curation reward algorithm works as follows: * first day (24 hours) linear rewards (equal weight to all voters in that window) * second window (24 hours to 72 hours/3 days) with reward weight/2 * remaining votes in 3rd window with reward weight/8 Under the new algorithm, anyone voting with the first 24 hours of the post receives the same proportional rewards. In other words, for any given voting strength, the voter will get the same percentage return-on-investment as any other voter during that period. Voters voting during the second and third window receive a smaller proportional curation reward (and voters who voted during the first 24 hour period receive a little more reward when voters vote during the 2nd or 3rd window). Note that if no one votes during the first window, then 2nd window voters will receive the same amount of curation as if they had voted during the first window. The basic idea behind the new algorithm is to encourage voters to find good content, but to put them on an equal footing with voting bots. Under the current algorithm that we’re replacing, voting bots have an advantage because there’s a short window in time to cast a vote for optimal curation rewards. Note that author rewards are not affected by this change: this change only affects how curation rewards are distributed among voters. ### Hive to HBD conversion operation The only code we’re still working on in hived for hardfork 25 is the new operation that allows users to convert liquid Hive to HBD. We’re still researching some issues associated with the existing code that computes the median price for Hive, but we expect to have the conversion code completed and tested this week. ### Hardfork code freeze in middle of this month We expect to do a code freeze on 4/15 (middle of this month) so that witnesses can launch a testnet and begin evaluating and testing the code changes for hardfork 25. ### Testnet to operate for at least one month Barring any problems, we expect the testnet to operate for at least one month, then we’ll begin final prep for HF25. This will allow time for Hive API libraries and frontend web sites to make changes to provide notifications related to vote expiration and to enable the use of the new Hive→HBD conversion operation and the recurrent payments and rc delegation functionality implemented by @howo. But strictly speaking, most of such frontend functionality can be implemented after the hardfork is executed without causing any problems, so the primary reason for this time interval is to allow for testing and evaluation of the performance of the new algorithms and features. # Modular hivemind (application framework for 2nd layer apps) ## Syncing modular hivemind from SQL account history plugin We were able to successfully sync a hivemind instance from the data injected by the SQL account history plugin (with the syncing taking place as the SQL data was injected by the plugin), but we encountered a problem at the end when some of the indexes were being recreated by hivemind as hivemind exited full sync mode and entered live sync mode. We’re investigating this issue now and we expect a fix in the next couple of days. ## Performance measurements for hivemind sync with SQL account history plugin Despite the issue when exiting full sync mode, we were able to collect some useful performance measurements. On the regular hivemind sync version, where we first do a hived replay to fill hivemind’s database, and where we then do a hivemind sync where indexes and foreign keys are dropped automatically and rebuilt at the end), the hivemind sync process took 50983s (hivemind sync) + 4047s (index creation) + 1998s (foreign key creation) = 57028s On the modified version of hivemind sync, where indexes are created before the sync begins, the hivemind sync took 67947s (regular version was 10918s faster). Despite the increased time for the modified version (10918s/3600s = 3.03 hours), this allows for an overall decrease in the time to fully sync the hivemind node using the SQL account history plugin, because it means that the hivemind sync can be started while the hived node is being replayed to fill hivemind’s database. In the “regular method”, the total time would be hived sync (~8 hours) + hivemind full sync time (15.84 hours) = 23.84 hours. With the modified method, it looks like we can get this time down to just hivemind modified sync time (18.87 hours). Note that all these times should ultimate be compared with the existing time to do a hivemind sync without the SQL account history plugin (~90+ hours). So it seems possible we could be looking at a 4x or better speedup in the time to do a full hivemind sync of a new node with the SQL account history plugin, if I haven’t messed up any where in my assumptions (I didn’t want to delay this report any longer, so it’s not been “peer-reviewed”). # Hivemind (social media middle-ware) ## Significantly reduced memory usage by hivemind process We fixed an issue in hivemind where a dictionary was used as a cache for post ids, and this dictionary was progressively consuming more memory as the blockchain grew in size. We spotted this issue during some our performance testing of hivemind syncing using the data provided by the new SQL account history plugin (but the problem exists for all existing hivemind implementations). Unfortunately, we haven’t had a chance to measure the exact memory savings for the fix yet, as we were focused on other tasks, but I should have those numbers for our next report. ## Testing hivemind syncing on a low-end server We’ve setup a low end computer (8GB of RAM and only a conventional hard disk drive, no SSD drive) to see what the minimum requirements are for a full hivemind node are, and to see if we can lower those requirements. In our tests, the hivemind process did manage to finish the full sync process, but it hit some problems during creation of indexes, so we’ll be digging into this issue further in the upcoming week. ## Testing performance of hivemind with Postgres 13 Currently postgres version 10 is the recommended version of the database for use with hivemind, but we did some tests this week to check if hivemind was compatible with the latest version of postgres (version 13) and to measure the relative performance. It’s all good news: no code changes were required to support postgres 13, and as an extra bonus, we saw a 5% speedup in full sync time in our test. We didn’t make any comprehensive tests yet of API response time related to SQL query speed, but signs are good that we can only expect performance improvements and no regressions. ## Miscellaneous hivemind bug fixes and documentation We fixed a couple of small bugs reported by users and frontend devs, such as a pagination issue with a community-related API call and an issue with community name validation: https://gitlab.syncad.com/hive/hivemind/-/merge_requests/488 https://gitlab.syncad.com/hive/hivemind/-/merge_requests/489 And we have an open merge request for the code to generate openapi documentation for the various hivemind API methods: https://gitlab.syncad.com/hive/hivemind/-/merge_requests/486 # Another progress update soon I’ll probably be putting out another progress update early next week, after we have more performance numbers. I kept delaying this one hoping to include those numbers, but we were caught up in too many tasks and small issues spoiled a bunch of our measurement attempts, and then the Easter holiday hit. See: 8th update of 2021 on BlockTrades work on Hive software by @blocktrades</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://hivedocs.info/assets/images/favicon.png" /><media:content medium="image" url="https://hivedocs.info/assets/images/favicon.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Making a Decentralized Game on Hive - Part 4</title><link href="https://hivedocs.info/howto/nodejs/2021/04/01/making-a-decentralized-game-on-hive-part-4.html" rel="alternate" type="text/html" title="Making a Decentralized Game on Hive - Part 4" /><published>2021-04-01T10:09:48-07:00</published><updated>2021-04-01T10:09:48-07:00</updated><id>https://hivedocs.info/howto/nodejs/2021/04/01/making-a-decentralized-game-on-hive-part-4</id><content type="html" xml:base="https://hivedocs.info/howto/nodejs/2021/04/01/making-a-decentralized-game-on-hive-part-4.html">&lt;div id=&quot;content-mahdiyari-making-a-decentralized-game-on-hive-part-4&quot;&gt;&lt;center&gt;![coding-pixabay.jpg](https://images.hive.blog/DQmbqyPpfU2dpwYkn9GVJdMmJbfukkvZZ8Bwqk7epyswP9w/macbook-2617705_1280.jpg)&lt;/center&gt;
In the [previous part](https://hive.blog/hive-139531/@mahdiyari/making-a-decentralized-game-on-hive-part-3), we made a back-end that is streaming blocks and detects 3 methods in custom_json. Create a game, request to join a game, and accept the request. We also set up a MySQL server with 3 tables for the methods.

&lt;sub&gt;You can find the links to the other parts at the end of the post.&lt;/sub&gt;


### API
Let's start by implementing the API for retrieving the games list. Our API is public so it doesn't require user authentication. The API will just return the data synced from the blockchain.
`api/games.js`:
```
const mysql = require('../helpers/mysql')
const express = require('express')
const router = express.Router()

// Return all games on route /games
router.get('/games', async (req, res) =&amp;gt; {
  try {
    // Get games data from Database
    const games = await mysql.query(
      'SELECT `game_id`, `player1`, `player2`, `starting_player`, `status`, `winner` FROM `games`'
    )
    // Check for expected result
    if (!games || !Array.isArray(games) || games.length &amp;lt; 1) {
      // WE return id: 1 for success and id: 0 for errors
      return res.json({
        id: 1,
        games: []
      })
    }
    // We return `games` as we receive from MySQL but it's not a good practice
    // specially when you have critical data in the database
    // You can return data one by one like `games: [{game_id: games.game_id, ...}]`
    return res.json({
      id: 1,
      games
    })
  } catch (e) {
    // Return error for unexpected errors like connection drops
    res.json({
      id: 0,
      error: 'Unexpected error.'
    })
  }
})

module.exports = router
```
The comments are in the code itself for better understanding.
Note: We use `try{} catch{}` wherever we can. It is always good to handle errors.

We can test our API at this point to detect possible errors in the code.
Include the following code in `api/server.js` just above the `port` and `host` constants.
```
const games = require('./games')
app.use(games)
```

Run `node api/server.js`. We can see the console.log: `Application started on 127.0.0.1:2021`
Let's open `127.0.0.1:2021/games` in the browser.

&lt;center&gt;![image.png](https://images.hive.blog/DQmbTKVAbtUB6nDH8HWuvku8NuiZv3jovu94jtEMAEU1vSX/image.png)&lt;/center&gt;
The API works as expected.

But it's not done yet. This API returns ALL the games without a specific order. We should implement pagination and define an order for our list.

Updated code `api/games.js`:
```
const mysql = require('../helpers/mysql')
const express = require('express')
const router = express.Router()

router.get('/games/:page', async (req, res) =&amp;gt; {
  try {
    if (isNaN(req.params.page)) {
      res.json({
        id: 0,
        error: 'Expected number.'
      })
    }
    const page = Math.floor(req.params.page)
    if (page &amp;lt; 1) {
      res.json({
        id: 0,
        error: 'Expected &amp;gt; 0'
      })
    }
    const offset = (page - 1) * 10
    const games = await mysql.query(
      'SELECT `game_id`, `player1`, `player2`, `starting_player`, `status`, `winner` FROM `games`' +
        ' ORDER BY `id` DESC LIMIT 10 OFFSET ?',
      [offset]
    )
    if (!games || !Array.isArray(games) || games.length &amp;lt; 1) {
      return res.json({
        id: 1,
        games: []
      })
    }
    return res.json({
      id: 1,
      games
    })
  } catch (e) {
    res.json({
      id: 0,
      error: 'Unexpected error.'
    })
  }
})

module.exports = router
```
We used `id` to order our list and get the newly created games first. Each page returns up to 10 games. We can try `127.0.0.1:2021/games/1` for testing.
***
Let's set another API for requests. The code is almost similar but we return only requests for the specific game_id.
`api/requests.js`:
```
const mysql = require('../helpers/mysql')
const express = require('express')
const router = express.Router()

router.get('/requests/:id', async (req, res) =&amp;gt; {
  try {
    if (!req.params.id) {
      res.json({
        id: 0,
        error: 'Expected game_id.'
      })
    }
    // We are passing user input into the database
    // You should be careful in such cases
    // We use ? for parameters which escapes the characters
    const requests = await mysql.query(
      'SELECT `player`, `status` FROM `requests` WHERE `game_id`= ?',
      [req.params.id]
    )
    if (!requests || !Array.isArray(requests) || requests.length &amp;lt; 1) {
      return res.json({
        id: 1,
        requests: []
      })
    }
    return res.json({
      id: 1,
      requests
    })
  } catch (e) {
    res.json({
      id: 0,
      error: 'Unexpected error.'
    })
  }
})

module.exports = router
```
Note: `:id` in the above router represents a variable named id. So for example `http://127.0.0.1:2021/requests/mygameidhere` in this request, the `id` variable is `mygameidhere` which is accessible by `req.params.id`.
***
A similar code for the `moves` table. There wasn't a better name in my mind for this table.
`api/moves.js`:
```
const mysql = require('../helpers/mysql')
const express = require('express')
const router = express.Router()

router.get('/moves/:id', async (req, res) =&amp;gt; {
  try {
    if (!req.params.id) {
      res.json({
        id: 0,
        error: 'Expected game_id.'
      })
    }
    const moves = await mysql.query(
      'SELECT `player`, `col`, `row` FROM `moves` WHERE `game_id`= ?',
      [req.params.id]
    )
    if (!moves || !Array.isArray(moves) || moves.length &amp;lt; 1) {
      return res.json({
        id: 1,
        moves: []
      })
    }
    return res.json({
      id: 1,
      moves
    })
  } catch (e) {
    res.json({
      id: 0,
      error: 'Unexpected error.'
    })
  }
})

module.exports = router
```
Now our 3 APIs are ready to be implemented on the front-end.
***
Here is the updated `api/server.js` after including the APIs:
```
const express = require('express')
const bodyParser = require('body-parser')
const hpp = require('hpp')
const helmet = require('helmet')
const app = express()

// more info: www.npmjs.com/package/hpp
app.use(hpp())
app.use(helmet())

// support json encoded bodies and encoded bodies
app.use(bodyParser.json())
app.use(bodyParser.urlencoded({ extended: true }))

app.use(function (req, res, next) {
  res.header(
    'Access-Control-Allow-Origin',
    'http://localhost https://tic-tac-toe.mahdiyari.info/'
  )
  res.header('Access-Control-Allow-Credentials', true)
  res.header(
    'Access-Control-Allow-Headers',
    'Origin, X-Requested-With, Content-Type, Accept, access_key'
  )
  next()
})

// APIs
const games = require('./games')
const requests = require('./requests')
const moves = require('./moves')

app.use(games)
app.use(requests)
app.use(moves)

const port = process.env.PORT || 2021
const host = process.env.HOST || '127.0.0.1'
app.listen(port, host, () =&amp;gt; {
  console.log(`Application started on ${host}:${port}`)
})
```
***
### Front-end
I think using pure HTML is a mistake and I would prefer something like Angular for the web applications but that comes with its own learning process which can make this tutorial complex. So my recommendation is to learn something like Angular or Vue and live a happy life. Anyway, coding time.

I'm not going to drop `index.html` here. It doesn't need much explanation and it's long. You can see it on the [GitLab repository](https://gitlab.com/mahdiyari/decentralized-game-on-hive/-/blob/master/front-end/index.html). I will just add some references here used in `app.js`.

The table for listing the games and buttons for pagination.
`index.html`:
```
&lt;div class=&quot;card-body&quot;&gt;
  &lt;h5 class=&quot;card-title&quot; style=&quot;float: left;&quot;&gt;Games list&lt;/h5&gt;
  &lt;span style=&quot;float: right;&quot;&gt;Auto updating every 5s&lt;/span&gt;
  &lt;table class=&quot;table table-striped&quot;&gt;
    &lt;thead&gt;
      &lt;tr&gt;
        &lt;th&gt;#&lt;/th&gt;
        &lt;th&gt;Game ID&lt;/th&gt;
        &lt;th&gt;Player 1&lt;/th&gt;
        &lt;th&gt;Player 2&lt;/th&gt;
        &lt;th&gt;Starting Player&lt;/th&gt;
        &lt;th&gt;Status&lt;/th&gt;
        &lt;th&gt;Winner&lt;/th&gt;
        &lt;th&gt;Action&lt;/th&gt;
      &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody id=&quot;games-table-body&quot;&gt;
    &lt;/tbody&gt;
  &lt;/table&gt;
  &lt;nav aria-label=&quot;Page navigation example&quot;&gt;
    &lt;ul class=&quot;pagination justify-content-center&quot;&gt;
      &lt;li class=&quot;page-item disabled&quot; id=&quot;prev-btn&quot;&gt;
        &lt;a class=&quot;page-link&quot; onclick=&quot;prevGamesPage()&quot;&gt;&amp;laquo;&lt;/a&gt;
      &lt;/li&gt;
      &lt;li class=&quot;page-item disabled&quot;&gt;
        &lt;a class=&quot;page-link&quot; id=&quot;page-number&quot; tabindex=&quot;-1&quot;&gt; 1 &lt;/a&gt;
      &lt;/li&gt;
      &lt;li class=&quot;page-item&quot; id=&quot;next-btn&quot;&gt;
        &lt;a class=&quot;page-link&quot; onclick=&quot;nextGamesPage()&quot;&gt;&amp;raquo;&lt;/a&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/nav&gt;
&lt;/div&gt;
```
***
We have to fill the table above. So let's implement some basic functions.
`js/app.js`:
```
const baseAPI = 'http://127.0.0.1:2021'
const APICall = async (api) =&amp;gt; {
  return (await fetch(baseAPI + api)).json()
}
```
For ease of use, we define a function for `GET` calls using `fetch` and a variable for our API address.
***
```
const getGames = async (page = 1) =&amp;gt; {
  const games = await APICall('/games/' + page)
  return games.games
}
```
This function basically gets the games from the API per page.
***
```
const fillGamesTable = (data) =&amp;gt; {
  const tbody = document.getElementById('games-table-body')
  let temp = ''
  for (let i = 0; i &amp;lt; data.length; i++) {
    temp += `&lt;tr&gt;
    &lt;td&gt;${(gamesPage - 1) * 10 + i + 1}&lt;/td&gt;
    &lt;td&gt;${data[i].game_id}&lt;/td&gt;
    &lt;td&gt;${data[i].player1}&lt;/td&gt;
    &lt;td&gt;${data[i].player2}&lt;/td&gt;
    &lt;td&gt;${data[i].starting_player}&lt;/td&gt;
    &lt;td&gt;${data[i].status}&lt;/td&gt;
    &lt;td&gt;${data[i].winner}&lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;/tr&gt;`
  }
  if (data.length &amp;lt; 1) {
    temp = 'No games.'
  }
  tbody.innerHTML = temp
}
```
`fillGamesTable` takes the result from `getGames` function and fills the HTML table with data using a `for` loop.
***
```
let gamesPage = 1
const loadTheGames = async () =&amp;gt; {
  const games = await getGames(gamesPage)
  fillGamesTable(games)
  if (games.length &amp;lt; 10) {
    document.getElementById('next-btn').className = 'page-item disabled'
  } else {
    document.getElementById('next-btn').className = 'page-item'
  }
  if (gamesPage === 1) {
    document.getElementById('prev-btn').className = 'page-item disabled'
  } else {
    document.getElementById('prev-btn').className = 'page-item'
  }
  document.getElementById('page-number').innerHTML = ` ${gamesPage} `
}
loadTheGames()
setInterval(() =&amp;gt; loadTheGames(), 5000)
```
With this function, we call the two previously defined functions to do their job and update the pagination buttons and the page number every time we update the table data. Also, every 5 seconds, it gets new data from API and updates the table with new data so users don't have to reload the page for new data.
***
```
const nextGamesPage = () =&amp;gt; {
  gamesPage++
  loadTheGames()
}

const prevGamesPage = () =&amp;gt; {
  gamesPage--
  loadTheGames()
}
```
And two functions for changing pages. Simple as that.
***
The final result with dummy data looks like this on the browser:
&lt;center&gt;![Capture.PNG](https://images.hive.blog/DQmcYZC1vixajRW4Ui5dHiSfTy5MYqEYZhXy2bd2ituz4Ar/Capture.PNG)&lt;/center&gt;
***
That's it for this part. I'm really happy with the results we are getting. I didn't plan anything beforehand and I'm coding as I'm writing the posts.

Today we made 3 API calls and created the basic front-end which for now only shows the list of games that are submitted to the Hive blockchain. In the next part, we will implement the methods for creating and joining the games on the client side. We also probably need to create a game page where actual gaming happens.

Thanks for reading. Make sure to follow me and share the post. Upvote if you like and leave a comment.
***
[GitLab](https://gitlab.com/mahdiyari/decentralized-game-on-hive)
[Part 1](https://hive.blog/hive-139531/@mahdiyari/making-a-decentralized-game-on-hive-tic-tac-toe-part-1)
[Part 2](https://hive.blog/hive-139531/@mahdiyari/making-a-decentralized-game-on-hive-part-2)
[Part 3](https://hive.blog/hive-139531/@mahdiyari/making-a-decentralized-game-on-hive-part-3)
***
**Vote for my witness:**
- https://wallet.hive.blog/~witnesses
- https://peakd.com/witnesses
- https://ecency.com/witnesses&lt;/div&gt;
&lt;script crossorigin=&quot;anonymous&quot; integrity=&quot;sha256-4+XzXVhsDmqanXGHaHvgh1gMQKX40OUvDEBTu8JcmNs=&quot; src=&quot;https://code.jquery.com/jquery-3.5.1.slim.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://unpkg.com/steem-content-renderer&quot;&gt;&lt;/script&gt;

&lt;script&gt;
  $(document).ready(function() {
    try {
      const renderer = new SteemContentRenderer.DefaultRenderer({
        baseUrl: &quot;https://hive.blog/&quot;,
        breaks: true,
        skipSanitization: false,
        allowInsecureScriptTags: false,
        addNofollowToLinks: true,
        doNotShowImages: false,
        ipfsPrefix: &quot;&quot;,
        assetsWidth: 640,
        assetsHeight: 480,
        imageProxyFn: (url) =&gt; url,
        usertagUrlFn: (account) =&gt; &quot;/@mahdiyari&quot;,
        hashtagUrlFn: (hashtag) =&gt; &quot;/making-a-decentralized-game-on-hive-part-4&quot;,
        isLinkSafeFn: (url) =&gt; true,
      });
      
      const inputElem = $('#content-mahdiyari-making-a-decentralized-game-on-hive-part-4').html();
      const outputElem = $('#content-mahdiyari-making-a-decentralized-game-on-hive-part-4');
      const output = renderer.render(inputElem);
      
      outputElem.html(output);
    } catch(e) {
      console.log(e);
    }
  });
&lt;/script&gt;

&lt;style&gt;
  #content-mahdiyari-making-a-decentralized-game-on-hive-part-4 {
    padding: 0 3rem;
    color: #444444;
    font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Helvetica, Arial, sans-serif;
    font-size: 16px;
    line-height: 1.8;
    text-shadow: 0 1px 0 #ffffff;
    padding: 0.5rem;
  }
  #content-mahdiyari-making-a-decentralized-game-on-hive-part-4 code {
    background: white;
  }
  #content-mahdiyari-making-a-decentralized-game-on-hive-part-4 a {
    border-bottom: 1px solid #444444; color: #444444; text-decoration: none;
  }
  #content-mahdiyari-making-a-decentralized-game-on-hive-part-4 a:hover {
    border-bottom: 0;
  }
  #content-mahdiyari-making-a-decentralized-game-on-hive-part-4 h1 {
    font-size: 2.2em;
  }
  #content-mahdiyari-making-a-decentralized-game-on-hive-part-4 h2, h3, h4, h5 {
    margin-bottom: 0;
  }
  #content-mahdiyari-making-a-decentralized-game-on-hive-part-4 header small {
    color: #999;
    font-size: 50%;
  }
  #content-mahdiyari-making-a-decentralized-game-on-hive-part-4 img {
    max-width: 100%;
  }
&lt;/style&gt;

&lt;hr /&gt;

&lt;p&gt;
  See: &lt;a href=&quot;https://hive.blog/hive-169321/@mahdiyari/making-a-decentralized-game-on-hive-part-4&quot;&gt;Making a Decentralized Game on Hive - Part 4&lt;/a&gt;
  by
  &lt;a href=&quot;https://hive.blog/@mahdiyari&quot;&gt;@mahdiyari&lt;/a&gt;
&lt;/p&gt;</content><author><name>mahdiyari</name></author><category term="howto" /><category term="nodejs" /><summary type="html">![coding-pixabay.jpg](https://images.hive.blog/DQmbqyPpfU2dpwYkn9GVJdMmJbfukkvZZ8Bwqk7epyswP9w/macbook-2617705_1280.jpg) In the [previous part](https://hive.blog/hive-139531/@mahdiyari/making-a-decentralized-game-on-hive-part-3), we made a back-end that is streaming blocks and detects 3 methods in custom_json. Create a game, request to join a game, and accept the request. We also set up a MySQL server with 3 tables for the methods. You can find the links to the other parts at the end of the post. ### API Let's start by implementing the API for retrieving the games list. Our API is public so it doesn't require user authentication. The API will just return the data synced from the blockchain. `api/games.js`: ``` const mysql = require('../helpers/mysql') const express = require('express') const router = express.Router() // Return all games on route /games router.get('/games', async (req, res) =&amp;gt; { try { // Get games data from Database const games = await mysql.query( 'SELECT `game_id`, `player1`, `player2`, `starting_player`, `status`, `winner` FROM `games`' ) // Check for expected result if (!games || !Array.isArray(games) || games.length &amp;lt; 1) { // WE return id: 1 for success and id: 0 for errors return res.json({ id: 1, games: [] }) } // We return `games` as we receive from MySQL but it's not a good practice // specially when you have critical data in the database // You can return data one by one like `games: [{game_id: games.game_id, ...}]` return res.json({ id: 1, games }) } catch (e) { // Return error for unexpected errors like connection drops res.json({ id: 0, error: 'Unexpected error.' }) } }) module.exports = router ``` The comments are in the code itself for better understanding. Note: We use `try{} catch{}` wherever we can. It is always good to handle errors. We can test our API at this point to detect possible errors in the code. Include the following code in `api/server.js` just above the `port` and `host` constants. ``` const games = require('./games') app.use(games) ``` Run `node api/server.js`. We can see the console.log: `Application started on 127.0.0.1:2021` Let's open `127.0.0.1:2021/games` in the browser. ![image.png](https://images.hive.blog/DQmbTKVAbtUB6nDH8HWuvku8NuiZv3jovu94jtEMAEU1vSX/image.png) The API works as expected. But it's not done yet. This API returns ALL the games without a specific order. We should implement pagination and define an order for our list. Updated code `api/games.js`: ``` const mysql = require('../helpers/mysql') const express = require('express') const router = express.Router() router.get('/games/:page', async (req, res) =&amp;gt; { try { if (isNaN(req.params.page)) { res.json({ id: 0, error: 'Expected number.' }) } const page = Math.floor(req.params.page) if (page &amp;lt; 1) { res.json({ id: 0, error: 'Expected &amp;gt; 0' }) } const offset = (page - 1) * 10 const games = await mysql.query( 'SELECT `game_id`, `player1`, `player2`, `starting_player`, `status`, `winner` FROM `games`' + ' ORDER BY `id` DESC LIMIT 10 OFFSET ?', [offset] ) if (!games || !Array.isArray(games) || games.length &amp;lt; 1) { return res.json({ id: 1, games: [] }) } return res.json({ id: 1, games }) } catch (e) { res.json({ id: 0, error: 'Unexpected error.' }) } }) module.exports = router ``` We used `id` to order our list and get the newly created games first. Each page returns up to 10 games. We can try `127.0.0.1:2021/games/1` for testing. *** Let's set another API for requests. The code is almost similar but we return only requests for the specific game_id. `api/requests.js`: ``` const mysql = require('../helpers/mysql') const express = require('express') const router = express.Router() router.get('/requests/:id', async (req, res) =&amp;gt; { try { if (!req.params.id) { res.json({ id: 0, error: 'Expected game_id.' }) } // We are passing user input into the database // You should be careful in such cases // We use ? for parameters which escapes the characters const requests = await mysql.query( 'SELECT `player`, `status` FROM `requests` WHERE `game_id`= ?', [req.params.id] ) if (!requests || !Array.isArray(requests) || requests.length &amp;lt; 1) { return res.json({ id: 1, requests: [] }) } return res.json({ id: 1, requests }) } catch (e) { res.json({ id: 0, error: 'Unexpected error.' }) } }) module.exports = router ``` Note: `:id` in the above router represents a variable named id. So for example `http://127.0.0.1:2021/requests/mygameidhere` in this request, the `id` variable is `mygameidhere` which is accessible by `req.params.id`. *** A similar code for the `moves` table. There wasn't a better name in my mind for this table. `api/moves.js`: ``` const mysql = require('../helpers/mysql') const express = require('express') const router = express.Router() router.get('/moves/:id', async (req, res) =&amp;gt; { try { if (!req.params.id) { res.json({ id: 0, error: 'Expected game_id.' }) } const moves = await mysql.query( 'SELECT `player`, `col`, `row` FROM `moves` WHERE `game_id`= ?', [req.params.id] ) if (!moves || !Array.isArray(moves) || moves.length &amp;lt; 1) { return res.json({ id: 1, moves: [] }) } return res.json({ id: 1, moves }) } catch (e) { res.json({ id: 0, error: 'Unexpected error.' }) } }) module.exports = router ``` Now our 3 APIs are ready to be implemented on the front-end. *** Here is the updated `api/server.js` after including the APIs: ``` const express = require('express') const bodyParser = require('body-parser') const hpp = require('hpp') const helmet = require('helmet') const app = express() // more info: www.npmjs.com/package/hpp app.use(hpp()) app.use(helmet()) // support json encoded bodies and encoded bodies app.use(bodyParser.json()) app.use(bodyParser.urlencoded({ extended: true })) app.use(function (req, res, next) { res.header( 'Access-Control-Allow-Origin', 'http://localhost https://tic-tac-toe.mahdiyari.info/' ) res.header('Access-Control-Allow-Credentials', true) res.header( 'Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept, access_key' ) next() }) // APIs const games = require('./games') const requests = require('./requests') const moves = require('./moves') app.use(games) app.use(requests) app.use(moves) const port = process.env.PORT || 2021 const host = process.env.HOST || '127.0.0.1' app.listen(port, host, () =&amp;gt; { console.log(`Application started on ${host}:${port}`) }) ``` *** ### Front-end I think using pure HTML is a mistake and I would prefer something like Angular for the web applications but that comes with its own learning process which can make this tutorial complex. So my recommendation is to learn something like Angular or Vue and live a happy life. Anyway, coding time. I'm not going to drop `index.html` here. It doesn't need much explanation and it's long. You can see it on the [GitLab repository](https://gitlab.com/mahdiyari/decentralized-game-on-hive/-/blob/master/front-end/index.html). I will just add some references here used in `app.js`. The table for listing the games and buttons for pagination. `index.html`: ``` Games list Auto updating every 5s # Game ID Player 1 Player 2 Starting Player Status Winner Action &amp;laquo; 1 &amp;raquo; ``` *** We have to fill the table above. So let's implement some basic functions. `js/app.js`: ``` const baseAPI = 'http://127.0.0.1:2021' const APICall = async (api) =&amp;gt; { return (await fetch(baseAPI + api)).json() } ``` For ease of use, we define a function for `GET` calls using `fetch` and a variable for our API address. *** ``` const getGames = async (page = 1) =&amp;gt; { const games = await APICall('/games/' + page) return games.games } ``` This function basically gets the games from the API per page. *** ``` const fillGamesTable = (data) =&amp;gt; { const tbody = document.getElementById('games-table-body') let temp = '' for (let i = 0; i &amp;lt; data.length; i++) { temp += ` ${(gamesPage - 1) * 10 + i + 1} ${data[i].game_id} ${data[i].player1} ${data[i].player2} ${data[i].starting_player} ${data[i].status} ${data[i].winner} ` } if (data.length &amp;lt; 1) { temp = 'No games.' } tbody.innerHTML = temp } ``` `fillGamesTable` takes the result from `getGames` function and fills the HTML table with data using a `for` loop. *** ``` let gamesPage = 1 const loadTheGames = async () =&amp;gt; { const games = await getGames(gamesPage) fillGamesTable(games) if (games.length &amp;lt; 10) { document.getElementById('next-btn').className = 'page-item disabled' } else { document.getElementById('next-btn').className = 'page-item' } if (gamesPage === 1) { document.getElementById('prev-btn').className = 'page-item disabled' } else { document.getElementById('prev-btn').className = 'page-item' } document.getElementById('page-number').innerHTML = ` ${gamesPage} ` } loadTheGames() setInterval(() =&amp;gt; loadTheGames(), 5000) ``` With this function, we call the two previously defined functions to do their job and update the pagination buttons and the page number every time we update the table data. Also, every 5 seconds, it gets new data from API and updates the table with new data so users don't have to reload the page for new data. *** ``` const nextGamesPage = () =&amp;gt; { gamesPage++ loadTheGames() } const prevGamesPage = () =&amp;gt; { gamesPage-- loadTheGames() } ``` And two functions for changing pages. Simple as that. *** The final result with dummy data looks like this on the browser: ![Capture.PNG](https://images.hive.blog/DQmcYZC1vixajRW4Ui5dHiSfTy5MYqEYZhXy2bd2ituz4Ar/Capture.PNG) *** That's it for this part. I'm really happy with the results we are getting. I didn't plan anything beforehand and I'm coding as I'm writing the posts. Today we made 3 API calls and created the basic front-end which for now only shows the list of games that are submitted to the Hive blockchain. In the next part, we will implement the methods for creating and joining the games on the client side. We also probably need to create a game page where actual gaming happens. Thanks for reading. Make sure to follow me and share the post. Upvote if you like and leave a comment. *** [GitLab](https://gitlab.com/mahdiyari/decentralized-game-on-hive) [Part 1](https://hive.blog/hive-139531/@mahdiyari/making-a-decentralized-game-on-hive-tic-tac-toe-part-1) [Part 2](https://hive.blog/hive-139531/@mahdiyari/making-a-decentralized-game-on-hive-part-2) [Part 3](https://hive.blog/hive-139531/@mahdiyari/making-a-decentralized-game-on-hive-part-3) *** **Vote for my witness:** - https://wallet.hive.blog/~witnesses - https://peakd.com/witnesses - https://ecency.com/witnesses See: Making a Decentralized Game on Hive - Part 4 by @mahdiyari</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://images.hive.blog/DQmbqyPpfU2dpwYkn9GVJdMmJbfukkvZZ8Bwqk7epyswP9w/macbook-2617705_1280.jpg" /><media:content medium="image" url="https://images.hive.blog/DQmbqyPpfU2dpwYkn9GVJdMmJbfukkvZZ8Bwqk7epyswP9w/macbook-2617705_1280.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">My new contributions to the Hive Condenser and Wallet apps.</title><link href="https://hivedocs.info/news/nodejs/condenser/2021/03/30/5ejnqa-my-new-contributions-to-the-hive-condenser-and-wallet-apps.html" rel="alternate" type="text/html" title="My new contributions to the Hive Condenser and Wallet apps." /><published>2021-03-30T04:14:36-07:00</published><updated>2021-03-30T04:14:36-07:00</updated><id>https://hivedocs.info/news/nodejs/condenser/2021/03/30/5ejnqa-my-new-contributions-to-the-hive-condenser-and-wallet-apps</id><content type="html" xml:base="https://hivedocs.info/news/nodejs/condenser/2021/03/30/5ejnqa-my-new-contributions-to-the-hive-condenser-and-wallet-apps.html">&lt;div id=&quot;content-quochuy-5ejnqa-my-new-contributions-to-the-hive-condenser-and-wallet-apps&quot;&gt;## Context
I have been involved (voluntarily) with the development of the Condenser &amp;amp; Wallet apps (that are powering https://hive.blog and https://wallet.hive.blog) for quite a while now. There are other great frontends to Hive out there such as https://peakd.com and https://ecency.com but I have always been more or less faithful with the Condenser.

This is a regular report on my new contributions.

*Some of the new work below might still be in test and not yet deployed.*

## Display a message when community search does not return any result
@inertia raised [this issue](https://gitlab.syncad.com/hive/condenser/-/issues/123) where searching for a non-existing community would not refresh the current list of communities which is not an ideal experience as tit is more useful to display a message that tells the user that the searched keywords does not have any matching results.

![Community search](https://gitlab.syncad.com/hive/condenser/uploads/d62922fd5986b9b2741360b62480e92f/Screen_Shot_2021-03-30_at_10.06.23_pm.jpg)

Merge request: https://gitlab.syncad.com/hive/condenser/-/merge_requests/225

## Fix the search functionality
Recently, the search on this blog was broken. The page just kept displaying a spinning loading indicator but results were never displayed. Several users have raised the issue as it is an important feature. I've had a look and fixed it and took the opportunity to also add the ability to sort results by newest, popularity or relevance. Later on, I will add more advanced search such as search of posts from a specific user and tag.

![Search for content](https://gitlab.syncad.com/hive/condenser/uploads/f4fa269f197f03c507772d2d594e54d4/Screen_Shot_2021-03-29_at_9.39.13_pm.jpg)

Merge request: https://gitlab.syncad.com/hive/condenser/-/merge_requests/230

---

**Vote for my witness**
[![Support @quochuy Witness.jpg](https://images.hive.blog/DQmecYTZemY8SwU6rrg7awhpNRBsehUp7ivk9RGyZsUUpVw/quochuy-hive-witness.jpg)](https://hivesigner.com/sign/account-witness-vote?witness=quochuy&amp;amp;approve=1)
On Hive, Witnesses are playing the important role of providing a performant and safe network for all of us. You have the power to choose 30 trusty witnesses to package transactions and sign the blocks that will go in the Hive blockchain. [Vote for me via HiveSigner](https://hivesigner.com/sign/account-witness-vote?witness=quochuy&amp;amp;approve=1) to support my work for the community.&lt;/div&gt;
&lt;script crossorigin=&quot;anonymous&quot; integrity=&quot;sha256-4+XzXVhsDmqanXGHaHvgh1gMQKX40OUvDEBTu8JcmNs=&quot; src=&quot;https://code.jquery.com/jquery-3.5.1.slim.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://unpkg.com/steem-content-renderer&quot;&gt;&lt;/script&gt;

&lt;script&gt;
  $(document).ready(function() {
    try {
      const renderer = new SteemContentRenderer.DefaultRenderer({
        baseUrl: &quot;https://hive.blog/&quot;,
        breaks: true,
        skipSanitization: false,
        allowInsecureScriptTags: false,
        addNofollowToLinks: true,
        doNotShowImages: false,
        ipfsPrefix: &quot;&quot;,
        assetsWidth: 640,
        assetsHeight: 480,
        imageProxyFn: (url) =&gt; url,
        usertagUrlFn: (account) =&gt; &quot;/@quochuy&quot;,
        hashtagUrlFn: (hashtag) =&gt; &quot;/5ejnqa-my-new-contributions-to-the-hive-condenser-and-wallet-apps&quot;,
        isLinkSafeFn: (url) =&gt; true,
      });
      
      const inputElem = $('#content-quochuy-5ejnqa-my-new-contributions-to-the-hive-condenser-and-wallet-apps').html();
      const outputElem = $('#content-quochuy-5ejnqa-my-new-contributions-to-the-hive-condenser-and-wallet-apps');
      const output = renderer.render(inputElem);
      
      outputElem.html(output);
    } catch(e) {
      console.log(e);
    }
  });
&lt;/script&gt;

&lt;style&gt;
  #content-quochuy-5ejnqa-my-new-contributions-to-the-hive-condenser-and-wallet-apps {
    padding: 0 3rem;
    color: #444444;
    font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Helvetica, Arial, sans-serif;
    font-size: 16px;
    line-height: 1.8;
    text-shadow: 0 1px 0 #ffffff;
    padding: 0.5rem;
  }
  #content-quochuy-5ejnqa-my-new-contributions-to-the-hive-condenser-and-wallet-apps code {
    background: white;
  }
  #content-quochuy-5ejnqa-my-new-contributions-to-the-hive-condenser-and-wallet-apps a {
    border-bottom: 1px solid #444444; color: #444444; text-decoration: none;
  }
  #content-quochuy-5ejnqa-my-new-contributions-to-the-hive-condenser-and-wallet-apps a:hover {
    border-bottom: 0;
  }
  #content-quochuy-5ejnqa-my-new-contributions-to-the-hive-condenser-and-wallet-apps h1 {
    font-size: 2.2em;
  }
  #content-quochuy-5ejnqa-my-new-contributions-to-the-hive-condenser-and-wallet-apps h2, h3, h4, h5 {
    margin-bottom: 0;
  }
  #content-quochuy-5ejnqa-my-new-contributions-to-the-hive-condenser-and-wallet-apps header small {
    color: #999;
    font-size: 50%;
  }
  #content-quochuy-5ejnqa-my-new-contributions-to-the-hive-condenser-and-wallet-apps img {
    max-width: 100%;
  }
&lt;/style&gt;

&lt;hr /&gt;

&lt;p&gt;
  See: &lt;a href=&quot;https://hive.blog/hive-111111/@quochuy/5ejnqa-my-new-contributions-to-the-hive-condenser-and-wallet-apps&quot;&gt;My new contributions to the Hive Condenser and Wallet apps.&lt;/a&gt;
  by
  &lt;a href=&quot;https://hive.blog/@quochuy&quot;&gt;@quochuy&lt;/a&gt;
&lt;/p&gt;</content><author><name>quochuy</name></author><category term="news" /><category term="nodejs" /><category term="condenser" /><summary type="html">## Context I have been involved (voluntarily) with the development of the Condenser &amp;amp; Wallet apps (that are powering https://hive.blog and https://wallet.hive.blog) for quite a while now. There are other great frontends to Hive out there such as https://peakd.com and https://ecency.com but I have always been more or less faithful with the Condenser. This is a regular report on my new contributions. *Some of the new work below might still be in test and not yet deployed.* ## Display a message when community search does not return any result @inertia raised [this issue](https://gitlab.syncad.com/hive/condenser/-/issues/123) where searching for a non-existing community would not refresh the current list of communities which is not an ideal experience as tit is more useful to display a message that tells the user that the searched keywords does not have any matching results. ![Community search](https://gitlab.syncad.com/hive/condenser/uploads/d62922fd5986b9b2741360b62480e92f/Screen_Shot_2021-03-30_at_10.06.23_pm.jpg) Merge request: https://gitlab.syncad.com/hive/condenser/-/merge_requests/225 ## Fix the search functionality Recently, the search on this blog was broken. The page just kept displaying a spinning loading indicator but results were never displayed. Several users have raised the issue as it is an important feature. I've had a look and fixed it and took the opportunity to also add the ability to sort results by newest, popularity or relevance. Later on, I will add more advanced search such as search of posts from a specific user and tag. ![Search for content](https://gitlab.syncad.com/hive/condenser/uploads/f4fa269f197f03c507772d2d594e54d4/Screen_Shot_2021-03-29_at_9.39.13_pm.jpg) Merge request: https://gitlab.syncad.com/hive/condenser/-/merge_requests/230 --- **Vote for my witness** [![Support @quochuy Witness.jpg](https://images.hive.blog/DQmecYTZemY8SwU6rrg7awhpNRBsehUp7ivk9RGyZsUUpVw/quochuy-hive-witness.jpg)](https://hivesigner.com/sign/account-witness-vote?witness=quochuy&amp;amp;approve=1) On Hive, Witnesses are playing the important role of providing a performant and safe network for all of us. You have the power to choose 30 trusty witnesses to package transactions and sign the blocks that will go in the Hive blockchain. [Vote for me via HiveSigner](https://hivesigner.com/sign/account-witness-vote?witness=quochuy&amp;amp;approve=1) to support my work for the community. See: My new contributions to the Hive Condenser and Wallet apps. by @quochuy</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://gitlab.syncad.com/hive/condenser/uploads/d62922fd5986b9b2741360b62480e92f/Screen_Shot_2021-03-30_at_10.06.23_pm.jpg" /><media:content medium="image" url="https://gitlab.syncad.com/hive/condenser/uploads/d62922fd5986b9b2741360b62480e92f/Screen_Shot_2021-03-30_at_10.06.23_pm.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Changing your recovery account and recovering your account using python</title><link href="https://hivedocs.info/howto/beem/python/account/2021/03/29/changing-your-recovery-account-and-recovering-your-account-using-python.html" rel="alternate" type="text/html" title="Changing your recovery account and recovering your account using python" /><published>2021-03-29T12:39:09-07:00</published><updated>2021-03-29T12:39:09-07:00</updated><id>https://hivedocs.info/howto/beem/python/account/2021/03/29/changing-your-recovery-account-and-recovering-your-account-using-python</id><content type="html" xml:base="https://hivedocs.info/howto/beem/python/account/2021/03/29/changing-your-recovery-account-and-recovering-your-account-using-python.html">&lt;div id=&quot;content-primersion-changing-your-recovery-account-and-recovering-your-account-using-python&quot;&gt;
![Python_logo_and_wordmark.svg.png](https://files.peakd.com/file/peakd-hive/primersion/23wqEdP3oZmPkLo8xVeU41o1fCWu7gRKCsyNCrsAm5u73bhH4nocYD6AZpwmZjPWk8gxC.png)


With all of the recent scams and phishing websites here on HIVE the topic of recovery accounts has come up again. A lot of people still have there recovery account set to @steem or the account, which created their account e.g. @esteemapp or @blocktrades.

Setting the recovery account to a HIVE account you trust is really important in case someone is taking over your account. Otherwise all your hardly earned HIVE will be lost and there is no way of recovering it. When choosing a recovery account it is important you choose someone you trust and someone, who can identify you.

---

I myself use another account I created as my recovery account. The keys of the account are locked away and not easily accessible by an attacker. But this may not be the best solution for everyone. In particular I have set @recovery.hive as the recovery account for @primersion and @primersion as the recovery account for @recovery.hive.

The only way an attacker would be able to steal all of my funds would be to gain access to the keys for both accounts and if this should happen, it is my own fault ;)

---

Changing your recovery account is quite easy. You can use tools like the one created by @arcange [over here](https://tools.hivechain.app/recovery/) or the one created by @reazuliqbal you will find [over here](https://reazuliqbal.com/HiveAccountRecovery/) or change it directly on [peakd.com](https://peakd.com) under your Account Settings -&amp;gt; Keys &amp;amp; Permissions. Or you may use this small python script I wrote:

```
#!/usr/bin/python3

from beem import Hive
from beem.nodelist import NodeList
from beem.account import Account

nodelist = NodeList()
nodelist.update_nodes()
nodes = nodelist.get_hive_nodes()

account_name = input(&quot;Enter your account name: &quot;)
owner_key = input(&quot;Enter your private owner key: &quot;)
new_recovery_account = input(&quot;Enter new recovery account: &quot;)

hive = Hive(node=nodes, keys=[owner_key])
account = Account(account_name, blockchain_instance=hive)
account.change_recovery_account(new_recovery_account)

print(&quot;Successfully changed recovery account&quot;)
```

You have to enter your account name and private owner key and the new recovery account and the script does the rest for you. Please be careful when using the script and when pasting your private owner key.

---

In addition to that I wrote a small script for recovering your account (if you are using another of your accounts as a recovery account for your main account). The script is based on the information provided [here for Steem](https://developers.steem.io/tutorials-python/account_recovery) and was adapted for HIVE:

```
#!/usr/bin/python3

import beembase
from beem.account import Account
from beem import Hive
from beem.transactionbuilder import TransactionBuilder
from beemgraphenebase.account import PasswordKey
from beembase.objects import Permission
from beem.nodelist import NodeList

# acquire hive node list
nodelist = NodeList()
nodelist.update_nodes()
nodes = nodelist.get_hive_nodes()

# capture user information
username = input('account to be recovered: ')
old_password = input('recent password for account: ')
new_password = input('new password for account: ')

recovery_account = input('account owner (recovery account): ')
recovery_account_private_key = input('account owner private ACTIVE key: ')

# create new account owner keys
new_account_owner_private_key = PasswordKey(username, new_password, role='owner').get_private_key()
new_account_owner_private_key_string = str(new_account_owner_private_key)
new_account_owner_public_key = str(new_account_owner_private_key.pubkey)

# create old account owner keys
old_account_owner_private_key = PasswordKey(username, old_password, role='owner').get_private_key()
old_account_owner_private_key_string = str(old_account_owner_private_key)
old_account_owner_public_key = str(old_account_owner_private_key.pubkey)

new_owner_authority = {
    &quot;key_auths&quot;: [
        [new_account_owner_public_key, 1]
    ],
    &quot;account_auths&quot;: [],
    &quot;weight_threshold&quot;: 1
}

# recovery request data object creation
request_op_data = {
    'account_to_recover': username,
    'recovery_account': recovery_account,
    'new_owner_authority': new_owner_authority,
    'extensions': []
}

# recovery request operation creation
request_op = beembase.operations.Request_account_recovery(**request_op_data)

print('request_op_data')
print(request_op_data)

# recovery request broadcast
hive = Hive(node=nodes, keys=[recovery_account_private_key])
request_result = hive.finalizeOp(request_op, recovery_account, &quot;active&quot;)

print('request_result')
print(request_result)

recent_owner_authority = {
    &quot;key_auths&quot;: [
        [old_account_owner_public_key, 1]
    ],
    &quot;account_auths&quot;: [],
    &quot;weight_threshold&quot;: 1
}

op_recover_account_data = {
    'account_to_recover': username,
    'new_owner_authority': new_owner_authority,
    'recent_owner_authority': recent_owner_authority,
    'extensions': []
}

op_account_update_data = {
    &quot;account&quot;: username,
    &quot;active&quot;: {
        &quot;key_auths&quot;: [
            [str(PasswordKey(username, new_password, role='active').get_private_key().pubkey), 1]
        ],
        &quot;account_auths&quot;: [],
        &quot;weight_threshold&quot;: 1
    },
    &quot;posting&quot;: {
        &quot;key_auths&quot;: [
            [str(PasswordKey(username, new_password, role='posting').get_private_key().pubkey), 1]
        ],
        &quot;account_auths&quot;: [],
        &quot;weight_threshold&quot;: 1
    },
    &quot;memo_key&quot;: str(PasswordKey(username, new_password, role='memo').get_private_key().pubkey),
    &quot;json_metadata&quot;: &quot;&quot;
}

op_recover_account = beembase.operations.Recover_account(**op_recover_account_data)

print('op_recover_account')
print(op_recover_account)

tb = TransactionBuilder(blockchain_instance=hive)
tb.appendOps([op_recover_account])
tb.appendWif(str(old_account_owner_private_key))
tb.appendWif(str(new_account_owner_private_key))
tb.sign()

result = tb.broadcast()
print('result')
print(result)

op_account_update = beembase.operations.Account_update(**op_account_update_data)

print('op_account_update')
print(op_account_update)

hive = Hive(node=nodes, keys=[new_account_owner_private_key])
tb = TransactionBuilder(blockchain_instance=hive)
tb.appendOps([op_account_update])
tb.appendWif(str(new_account_owner_private_key))
tb.sign()

result = tb.broadcast()

print('result')
print(result)
```

You will have to enter the account to be recovered, a recent password of the account and a new password for the account. For the actual recovery account you have to enter the account name and the private active key of the account. The remaining stuff like creating the account recovery request, recovering the account and updating the account data will be done by the script.

---

##### Please update your recovery account right now if you still have it set to @steem

---

Which account are you using as your recovery account, someone you trust or just some well-known and trustworthy account?

---

Like what I am doing - please support me by voting for my [HIVE](https://vote.hive.uno/?witness=primersion) / [Hive-Engine](https://votify.now.sh/primersion) witness.&lt;/div&gt;
&lt;script crossorigin=&quot;anonymous&quot; integrity=&quot;sha256-4+XzXVhsDmqanXGHaHvgh1gMQKX40OUvDEBTu8JcmNs=&quot; src=&quot;https://code.jquery.com/jquery-3.5.1.slim.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://unpkg.com/steem-content-renderer&quot;&gt;&lt;/script&gt;

&lt;script&gt;
  $(document).ready(function() {
    try {
      const renderer = new SteemContentRenderer.DefaultRenderer({
        baseUrl: &quot;https://hive.blog/&quot;,
        breaks: true,
        skipSanitization: false,
        allowInsecureScriptTags: false,
        addNofollowToLinks: true,
        doNotShowImages: false,
        ipfsPrefix: &quot;&quot;,
        assetsWidth: 640,
        assetsHeight: 480,
        imageProxyFn: (url) =&gt; url,
        usertagUrlFn: (account) =&gt; &quot;/@primersion&quot;,
        hashtagUrlFn: (hashtag) =&gt; &quot;/changing-your-recovery-account-and-recovering-your-account-using-python&quot;,
        isLinkSafeFn: (url) =&gt; true,
      });
      
      const inputElem = $('#content-primersion-changing-your-recovery-account-and-recovering-your-account-using-python').html();
      const outputElem = $('#content-primersion-changing-your-recovery-account-and-recovering-your-account-using-python');
      const output = renderer.render(inputElem);
      
      outputElem.html(output);
    } catch(e) {
      console.log(e);
    }
  });
&lt;/script&gt;

&lt;style&gt;
  #content-primersion-changing-your-recovery-account-and-recovering-your-account-using-python {
    padding: 0 3rem;
    color: #444444;
    font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Helvetica, Arial, sans-serif;
    font-size: 16px;
    line-height: 1.8;
    text-shadow: 0 1px 0 #ffffff;
    padding: 0.5rem;
  }
  #content-primersion-changing-your-recovery-account-and-recovering-your-account-using-python code {
    background: white;
  }
  #content-primersion-changing-your-recovery-account-and-recovering-your-account-using-python a {
    border-bottom: 1px solid #444444; color: #444444; text-decoration: none;
  }
  #content-primersion-changing-your-recovery-account-and-recovering-your-account-using-python a:hover {
    border-bottom: 0;
  }
  #content-primersion-changing-your-recovery-account-and-recovering-your-account-using-python h1 {
    font-size: 2.2em;
  }
  #content-primersion-changing-your-recovery-account-and-recovering-your-account-using-python h2, h3, h4, h5 {
    margin-bottom: 0;
  }
  #content-primersion-changing-your-recovery-account-and-recovering-your-account-using-python header small {
    color: #999;
    font-size: 50%;
  }
  #content-primersion-changing-your-recovery-account-and-recovering-your-account-using-python img {
    max-width: 100%;
  }
&lt;/style&gt;

&lt;hr /&gt;

&lt;p&gt;
  See: &lt;a href=&quot;https://peakd.com/hive/@primersion/changing-your-recovery-account-and-recovering-your-account-using-python&quot;&gt;Changing your recovery account and recovering your account using python&lt;/a&gt;
  by
  &lt;a href=&quot;https://hive.blog/@primersion&quot;&gt;@primersion&lt;/a&gt;
&lt;/p&gt;</content><author><name>primersion</name></author><category term="howto" /><category term="beem" /><category term="python" /><category term="account" /><summary type="html">![Python_logo_and_wordmark.svg.png](https://files.peakd.com/file/peakd-hive/primersion/23wqEdP3oZmPkLo8xVeU41o1fCWu7gRKCsyNCrsAm5u73bhH4nocYD6AZpwmZjPWk8gxC.png) With all of the recent scams and phishing websites here on HIVE the topic of recovery accounts has come up again. A lot of people still have there recovery account set to @steem or the account, which created their account e.g. @esteemapp or @blocktrades. Setting the recovery account to a HIVE account you trust is really important in case someone is taking over your account. Otherwise all your hardly earned HIVE will be lost and there is no way of recovering it. When choosing a recovery account it is important you choose someone you trust and someone, who can identify you. --- I myself use another account I created as my recovery account. The keys of the account are locked away and not easily accessible by an attacker. But this may not be the best solution for everyone. In particular I have set @recovery.hive as the recovery account for @primersion and @primersion as the recovery account for @recovery.hive. The only way an attacker would be able to steal all of my funds would be to gain access to the keys for both accounts and if this should happen, it is my own fault ;) --- Changing your recovery account is quite easy. You can use tools like the one created by @arcange [over here](https://tools.hivechain.app/recovery/) or the one created by @reazuliqbal you will find [over here](https://reazuliqbal.com/HiveAccountRecovery/) or change it directly on [peakd.com](https://peakd.com) under your Account Settings -&amp;gt; Keys &amp;amp; Permissions. Or you may use this small python script I wrote: ``` #!/usr/bin/python3 from beem import Hive from beem.nodelist import NodeList from beem.account import Account nodelist = NodeList() nodelist.update_nodes() nodes = nodelist.get_hive_nodes() account_name = input(&quot;Enter your account name: &quot;) owner_key = input(&quot;Enter your private owner key: &quot;) new_recovery_account = input(&quot;Enter new recovery account: &quot;) hive = Hive(node=nodes, keys=[owner_key]) account = Account(account_name, blockchain_instance=hive) account.change_recovery_account(new_recovery_account) print(&quot;Successfully changed recovery account&quot;) ``` You have to enter your account name and private owner key and the new recovery account and the script does the rest for you. Please be careful when using the script and when pasting your private owner key. --- In addition to that I wrote a small script for recovering your account (if you are using another of your accounts as a recovery account for your main account). The script is based on the information provided [here for Steem](https://developers.steem.io/tutorials-python/account_recovery) and was adapted for HIVE: ``` #!/usr/bin/python3 import beembase from beem.account import Account from beem import Hive from beem.transactionbuilder import TransactionBuilder from beemgraphenebase.account import PasswordKey from beembase.objects import Permission from beem.nodelist import NodeList # acquire hive node list nodelist = NodeList() nodelist.update_nodes() nodes = nodelist.get_hive_nodes() # capture user information username = input('account to be recovered: ') old_password = input('recent password for account: ') new_password = input('new password for account: ') recovery_account = input('account owner (recovery account): ') recovery_account_private_key = input('account owner private ACTIVE key: ') # create new account owner keys new_account_owner_private_key = PasswordKey(username, new_password, role='owner').get_private_key() new_account_owner_private_key_string = str(new_account_owner_private_key) new_account_owner_public_key = str(new_account_owner_private_key.pubkey) # create old account owner keys old_account_owner_private_key = PasswordKey(username, old_password, role='owner').get_private_key() old_account_owner_private_key_string = str(old_account_owner_private_key) old_account_owner_public_key = str(old_account_owner_private_key.pubkey) new_owner_authority = { &quot;key_auths&quot;: [ [new_account_owner_public_key, 1] ], &quot;account_auths&quot;: [], &quot;weight_threshold&quot;: 1 } # recovery request data object creation request_op_data = { 'account_to_recover': username, 'recovery_account': recovery_account, 'new_owner_authority': new_owner_authority, 'extensions': [] } # recovery request operation creation request_op = beembase.operations.Request_account_recovery(**request_op_data) print('request_op_data') print(request_op_data) # recovery request broadcast hive = Hive(node=nodes, keys=[recovery_account_private_key]) request_result = hive.finalizeOp(request_op, recovery_account, &quot;active&quot;) print('request_result') print(request_result) recent_owner_authority = { &quot;key_auths&quot;: [ [old_account_owner_public_key, 1] ], &quot;account_auths&quot;: [], &quot;weight_threshold&quot;: 1 } op_recover_account_data = { 'account_to_recover': username, 'new_owner_authority': new_owner_authority, 'recent_owner_authority': recent_owner_authority, 'extensions': [] } op_account_update_data = { &quot;account&quot;: username, &quot;active&quot;: { &quot;key_auths&quot;: [ [str(PasswordKey(username, new_password, role='active').get_private_key().pubkey), 1] ], &quot;account_auths&quot;: [], &quot;weight_threshold&quot;: 1 }, &quot;posting&quot;: { &quot;key_auths&quot;: [ [str(PasswordKey(username, new_password, role='posting').get_private_key().pubkey), 1] ], &quot;account_auths&quot;: [], &quot;weight_threshold&quot;: 1 }, &quot;memo_key&quot;: str(PasswordKey(username, new_password, role='memo').get_private_key().pubkey), &quot;json_metadata&quot;: &quot;&quot; } op_recover_account = beembase.operations.Recover_account(**op_recover_account_data) print('op_recover_account') print(op_recover_account) tb = TransactionBuilder(blockchain_instance=hive) tb.appendOps([op_recover_account]) tb.appendWif(str(old_account_owner_private_key)) tb.appendWif(str(new_account_owner_private_key)) tb.sign() result = tb.broadcast() print('result') print(result) op_account_update = beembase.operations.Account_update(**op_account_update_data) print('op_account_update') print(op_account_update) hive = Hive(node=nodes, keys=[new_account_owner_private_key]) tb = TransactionBuilder(blockchain_instance=hive) tb.appendOps([op_account_update]) tb.appendWif(str(new_account_owner_private_key)) tb.sign() result = tb.broadcast() print('result') print(result) ``` You will have to enter the account to be recovered, a recent password of the account and a new password for the account. For the actual recovery account you have to enter the account name and the private active key of the account. The remaining stuff like creating the account recovery request, recovering the account and updating the account data will be done by the script. --- ##### Please update your recovery account right now if you still have it set to @steem --- Which account are you using as your recovery account, someone you trust or just some well-known and trustworthy account? --- Like what I am doing - please support me by voting for my [HIVE](https://vote.hive.uno/?witness=primersion) / [Hive-Engine](https://votify.now.sh/primersion) witness. See: Changing your recovery account and recovering your account using python by @primersion</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://files.peakd.com/file/peakd-hive/primersion/23wqEdP3oZmPkLo8xVeU41o1fCWu7gRKCsyNCrsAm5u73bhH4nocYD6AZpwmZjPWk8gxC.png" /><media:content medium="image" url="https://files.peakd.com/file/peakd-hive/primersion/23wqEdP3oZmPkLo8xVeU41o1fCWu7gRKCsyNCrsAm5u73bhH4nocYD6AZpwmZjPWk8gxC.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Making a Decentralized Game on Hive - Part 3</title><link href="https://hivedocs.info/howto/nodejs/2021/03/28/making-a-decentralized-game-on-hive-part-3.html" rel="alternate" type="text/html" title="Making a Decentralized Game on Hive - Part 3" /><published>2021-03-28T13:31:39-07:00</published><updated>2021-03-28T13:31:39-07:00</updated><id>https://hivedocs.info/howto/nodejs/2021/03/28/making-a-decentralized-game-on-hive-part-3</id><content type="html" xml:base="https://hivedocs.info/howto/nodejs/2021/03/28/making-a-decentralized-game-on-hive-part-3.html">&lt;div id=&quot;content-mahdiyari-making-a-decentralized-game-on-hive-part-3&quot;&gt;&lt;center&gt;![coding-1853305_1280.jpg](https://images.hive.blog/DQmeBMvQ9RAne3j2qH1RrtDaWEyQ2bZo81ik3wsNXYGbp3E/coding-1853305_1280.jpg)&lt;/center&gt;

This part took a little longer because it was actually time-consuming (also I took a little break). The process is getting harder so it might take a few days longer than expected for the coming parts but I will do my best.

In the previous parts, we made a simple front-end with login functionality and initialized our API and back-end application with streaming. ([Part1](https://hive.blog/hive-139531/@mahdiyari/making-a-decentralized-game-on-hive-tic-tac-toe-part-1) and [Part2](https://hive.blog/hive-139531/@mahdiyari/making-a-decentralized-game-on-hive-part-2))
## MySQL Setup
You can use apps like [AMPPS](https://www.ampps.com/) which comes with MySQL and other tools like PHPMyAdmin (one of the best MySQL management apps) or install MySQL directly. I have AMMPS on windows and use MySQL docker on Linux. 

MySQL docker installation:
```
docker pull mysql/mysql-server:latest
```
I create a folder `/root/mysql-docker1` and put the MySQL config file there `my.cnf` and another folder `data` for holding the database files.
Running on port `127.0.0.1:3306`:
```
docker run --name=mysql1 \
--mount type=bind,src=/root/mysql-docker1/my.cnf,dst=/etc/my.cnf \
--mount type=bind,src=/root/mysql-docker1/data,dst=/var/lib/mysql \
-p 127.0.0.1:3306:3306 -d mysql/mysql-server:latest
```
There are different ways to tune your MySQL server based on your hardware which I'm not going to talk about. The following config is for medium-range hardware (32GB ram).
`my.cnf`:
```
[mysqld]
skip_name_resolve
user=mysql
default_authentication_plugin = mysql_native_password

symbolic-links=0
character_set_server=utf8mb4
collation_server=utf8mb4_general_ci
innodb_max_dirty_pages_pct = 90
innodb_max_dirty_pages_pct_lwm = 10
innodb_flush_neighbors = 0
innodb_undo_log_truncate=off
max_connect_errors = 1000000

# InnoDB Settings
innodb_file_per_table
innodb_log_files_in_group       = 2
innodb_open_files               = 4000
default_storage_engine          = InnoDB
innodb_buffer_pool_instances    = 8     # Use 1 instance per 1GB of InnoDB pool size
innodb_buffer_pool_size         = 16G    # Use up to 70-80% of RAM
innodb_flush_method             = O_DIRECT_NO_FSYNC
innodb_log_buffer_size          = 64M
innodb_log_file_size            = 10G
innodb_stats_on_metadata        = 0

# tune
innodb_doublewrite= 1
innodb_thread_concurrency       = 0
innodb_flush_log_at_trx_commit  = 0
innodb_lru_scan_depth           = 2048
innodb_page_cleaners            = 4
join_buffer_size                = 256K
sort_buffer_size                = 256K
innodb_use_native_aio           = 1
innodb_stats_persistent         = 1

innodb_adaptive_flushing        = 1
innodb_read_io_threads          = 16
innodb_write_io_threads         = 16
innodb_io_capacity              = 1500
innodb_io_capacity_max          = 2500
innodb_purge_threads            = 4
innodb_adaptive_hash_index      = 0
max_prepared_stmt_count         = 1000000
innodb_monitor_enable           = '%'
performance_schema              = ON
key_buffer_size = 512M
# Connection Settings
max_connections                 = 2000   # UPD
back_log                        = 3000
interactive_timeout             = 180
wait_timeout                    = 10
table_open_cache                = 200000 # UPD
table_open_cache_instances      = 64
open_files_limit                = 100000 # UPD
```
Note: restart MySQL server after updating the`my.cnf` file.

MySQL password on AMMPS is `mysql` and on docker setup, I think you get the password from `docker logs mysql1`. Anyway, there are many documentations about MySQL already on the internet.

Create a database `tictactoe`. It's easier with tools like PHPMyAdmin if you are using AMPPS. Or try HeidiSQL.
Here is the SQL command for creating the database:
```
CREATE DATABASE `tictactoe`;
```
***
## Development
Let's create a config file for holding MySQL login information for our app. I will put this file as `config.example.js` in repository and you have to rename it manually.
`config.js`:
```
const config = {
  dbName: 'tictactoe',
  dbUser: 'root',
  dbPassword: 'password',
  dbHost: '127.0.0.1',
  dbPort: 3306
}

module.exports = config
```
***
I have a personal code for MySQL connection pooling. It simply makes a custom async function just like the original connect function of [mysqljs](https://github.com/mysqljs/mysql) library but for pooling connections.
`helpers/mysql.js`:
```
const mysql = require('mysql')
const config = require('../config')
const pool = mysql.createPool({
  connectionLimit: 5,
  host: config.dbHost,
  port: config.dbPort,
  user: config.dbUser,
  password: config.dbPassword,
  database: config.dbName,
  charset: 'utf8mb4'
})

// Rewriting MySQL query method as a promise
const con = {}
con.query = async (query, val) =&amp;gt; {
  if (val) {
    const qu = await new Promise((resolve, reject) =&amp;gt; {
      pool.query(query, val, (error, results) =&amp;gt; {
        if (error) reject(new Error(error))
        resolve(results)
      })
    })
    return qu
  } else {
    const qu = await new Promise((resolve, reject) =&amp;gt; {
      pool.query(query, (error, results) =&amp;gt; {
        if (error) reject(new Error(error))
        resolve(results)
      })
    })
    return qu
  }
}

module.exports = con
```
It creates a pool of 5 connections which is more than enough for our game.
And of course:
```
npm install mysql
```
***
#### Initializing database
We make a function to create necessary tables if they don't exist already.
`helpers/initDatabase.js`:
```
const mysql = require('./mysql')

/**
 * id, game_id, player1, player2, starting_player, status, winner
 */
const tableGames =
  'CREATE TABLE IF NOT EXISTS `tictactoe`.`games` ( `id` INT NOT NULL AUTO_INCREMENT , ' +
  '`game_id` TINYTEXT NOT NULL , ' +
  '`player1` TINYTEXT NOT NULL , `player2` TINYTEXT NULL DEFAULT NULL , ' +
  '`starting_player` TINYTEXT NOT NULL , `status` TINYTEXT NULL , ' +
  '`winner` TINYTEXT NULL DEFAULT NULL , PRIMARY KEY  (`id`)) ' +
  'ENGINE = InnoDB CHARSET=utf8mb4 COLLATE utf8mb4_general_ci;'

/**
 * id, game_id, player, col, row
 */
const tableMoves =
  'CREATE TABLE IF NOT EXISTS `tictactoe`.`moves` ( `id` INT NOT NULL AUTO_INCREMENT , ' +
  '`game_id` TINYTEXT NOT NULL , `player` TINYTEXT NOT NULL , ' +
  '`col` INT(1) NOT NULL , `row` INT(1) NOT NULL , ' +
  'PRIMARY KEY  (`id`)) ENGINE = InnoDB CHARSET=utf8mb4 COLLATE utf8mb4_general_ci;'

const tableRquests =
  'CREATE TABLE IF NOT EXISTS `tictactoe`.`requests` ( `id` INT NOT NULL AUTO_INCREMENT , ' +
  '`game_id` TINYTEXT NOT NULL , `player` TINYTEXT NOT NULL , `status` TINYTEXT NOT NULL , ' +
  'PRIMARY KEY  (`id`)) ENGINE = InnoDB CHARSET=utf8mb4 COLLATE utf8mb4_general_ci;'

const initDatabase = async () =&amp;gt; {
  await mysql.query(tableGames)
  await mysql.query(tableMoves)
  await mysql.query(tableRquests)
}

module.exports = initDatabase
```

#### Created tables
`games`
&lt;center&gt;![tablesqlgames.png](https://images.hive.blog/DQmVCMyNZax6xd6kCc2VZijGjMa9Qbt8Myeev7jF8KmcqXe/image.png)&lt;/center&gt;

`moves`
&lt;center&gt;![tablesqlmoves.png](https://images.hive.blog/DQmVwyDZg1N3KEteDgfA5NdMHeUkjpngHZEmizBXxhh3XPs/image.png)&lt;/center&gt;

`requests`
&lt;center&gt;![image.png](https://images.hive.blog/DQmQLxfwKEfWSQ614vWb6qfUNVMSyiFgnKEh5nSWcKYFQQv/image.png)&lt;/center&gt;
***
#### Updating main application
Now we can complete the game methods in `index.js`:
`createGame`
```
const createGame = async (data, user) =&amp;gt; {
  if (!data || !data.id || !data.starting_player) {
    return
  }
  // validating
  if (
    data.id.length !== 20 ||
    (data.starting_player !== 'first' &amp;amp;&amp;amp; data.starting_player !== 'second')
  ) {
    return
  }
  // Check already existing games
  const duplicate = await mysql.query(
    'SELECT `id` FROM `games` WHERE `game_id`= ?',
    [data.id]
  )
  if (duplicate &amp;amp;&amp;amp; Array.isArray(duplicate) &amp;amp;&amp;amp; duplicate.length &amp;gt; 0) {
    return
  }
  // Add game to database
  await mysql.query(
    'INSERT INTO `games`(`game_id`, `player1`, `starting_player`, `status`) VALUES (?, ?, ?, ?)',
    [data.id, user, data.starting_player, 'waiting']
  )
}
```
***
`requestJoin`
```
const requestJoin = async (data, user) =&amp;gt; {
  if (!data || !data.id || !data.id.length !== 20) {
    return
  }
  // Check game id in database
  const game = await mysql.query(
    'SELECT `player1` FROM `games` WHERE `game_id`= ? AND `status`= ?',
    [data.id, 'waiting']
  )
  if (!game || !Array.isArray(game) || game.length &amp;lt; 1) {
    return
  }
  // Players can not play with themselves
  if (game[0].player1 === user) {
    return
  }
  // Check already open requests
  const requests = await mysql.query(
    'SELECT `id` FROM `requests` WHERE `game_id`= ? AND (`player`= ? OR `status`= ?)',
    [data.id, user, 'accepted']
  )
  if (requests &amp;amp;&amp;amp; Array.isArray(requests) &amp;amp;&amp;amp; requests.length &amp;gt; 0) {
    return
  }
  // Request join game
  await mysql.query(
    'INSERT INTO `requests`(`game_id`, `player`, `status`) VALUES (?, ?, ?)',
    [data.id, user, 'waiting']
  )
}
```
***
`acceptRequest`
```
const acceptRequest = async (data, user) =&amp;gt; {
  if (!data || !data.id || !data.player || !data.id.length !== 20) {
    return
  }
  // Validate game in database
  const game = await mysql.query(
    'SELECT `player1` FROM `games` WHERE `game_id`= ? AND `status`= ?',
    [data.id, 'waiting']
  )
  if (!game || !Array.isArray(game) || game.length &amp;lt; 1) {
    return
  }
  const requests = await mysql.query(
    'SELECT `id` FROM `requests` WHERE `game_id`= ? AND `player`= ? AND `status`= ?',
    [data.id, data.player, 'waiting']
  )
  if (!requests || !Array.isArray(requests) || requests.length &amp;lt; 1) {
    return
  }
  // Accept the join request and update game status
  await mysql.query(
    'UPDATE `games` SET `player2`=?,`status`=? WHERE `game_id`=?',
    [data.player, 'running', data.id]
  )
  await mysql.query(
    'UPDATE `requests` SET `status`=? WHERE `game_id`=? AND `player`=?',
    ['accepted', data.id, data.player]
  )
}
```
***
Some updates to `processData`:
```
const processData = (jsonData, postingAuths) =&amp;gt; {
  try {
    if (!jsonData) {
      return
    }
    const data = JSON.parse(jsonData)
    if (!data || !data.action || !data.app) {
      return
    }
    if (
      !postingAuths ||
      !Array.isArray(postingAuths) ||
      postingAuths.length &amp;lt; 1
    ) {
      return
    }
    const user = postingAuths[0]
    if (data.action === 'create_game') {
      createGame(data, user)
    } else if (data.action === 'request_join') {
      requestJoin(data, user)
    } else if (data.action === 'accept_request') {
      acceptRequest(data, user)
    } else if (data.action === 'play') {
      play(data, user)
    }
  } catch (e) {
    // error might be on JSON.parse and wrong json format
    return null
  }
}
```
And streaming function:
```
try {
  stream.streamBlockOperations((ops) =&amp;gt; {
    if (ops) {
      const op = ops[0]
      if (op &amp;amp;&amp;amp; op[0] === 'custom_json' &amp;amp;&amp;amp; op[1].id === 'tictactoe') {
        processData(op[1].json, op[1].required_posting_auths)
      }
    }
  })
} catch (e) {
  throw new Error(e)
}
```
***
I think it's enough for this part. Let's finish before I sleep on the keyboard.

We set up the MySQL server and made a script to create 3 tables. Our back-end is now processing data into the database and 3 main functions are working as expected. Creating a game, Requesting to join a game, and accepting the requests.

We have to create the front-end for these functions in the next part. I think the hard part is going to be the `play` function which holds the game rules.

Upvote if you like and leave a comment. Make sure to follow me and share the post.

Thanks for reading.
***
[GitLab](https://gitlab.com/mahdiyari/decentralized-game-on-hive)
[Part1](https://hive.blog/hive-139531/@mahdiyari/making-a-decentralized-game-on-hive-tic-tac-toe-part-1)
[Part2](https://hive.blog/hive-139531/@mahdiyari/making-a-decentralized-game-on-hive-part-2)
***
**Vote for my witness:**
- https://wallet.hive.blog/~witnesses
- https://peakd.com/witnesses
- https://ecency.com/witnesses&lt;/div&gt;
&lt;script crossorigin=&quot;anonymous&quot; integrity=&quot;sha256-4+XzXVhsDmqanXGHaHvgh1gMQKX40OUvDEBTu8JcmNs=&quot; src=&quot;https://code.jquery.com/jquery-3.5.1.slim.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://unpkg.com/steem-content-renderer&quot;&gt;&lt;/script&gt;

&lt;script&gt;
  $(document).ready(function() {
    try {
      const renderer = new SteemContentRenderer.DefaultRenderer({
        baseUrl: &quot;https://hive.blog/&quot;,
        breaks: true,
        skipSanitization: false,
        allowInsecureScriptTags: false,
        addNofollowToLinks: true,
        doNotShowImages: false,
        ipfsPrefix: &quot;&quot;,
        assetsWidth: 640,
        assetsHeight: 480,
        imageProxyFn: (url) =&gt; url,
        usertagUrlFn: (account) =&gt; &quot;/@mahdiyari&quot;,
        hashtagUrlFn: (hashtag) =&gt; &quot;/making-a-decentralized-game-on-hive-part-3&quot;,
        isLinkSafeFn: (url) =&gt; true,
      });
      
      const inputElem = $('#content-mahdiyari-making-a-decentralized-game-on-hive-part-3').html();
      const outputElem = $('#content-mahdiyari-making-a-decentralized-game-on-hive-part-3');
      const output = renderer.render(inputElem);
      
      outputElem.html(output);
    } catch(e) {
      console.log(e);
    }
  });
&lt;/script&gt;

&lt;style&gt;
  #content-mahdiyari-making-a-decentralized-game-on-hive-part-3 {
    padding: 0 3rem;
    color: #444444;
    font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Helvetica, Arial, sans-serif;
    font-size: 16px;
    line-height: 1.8;
    text-shadow: 0 1px 0 #ffffff;
    padding: 0.5rem;
  }
  #content-mahdiyari-making-a-decentralized-game-on-hive-part-3 code {
    background: white;
  }
  #content-mahdiyari-making-a-decentralized-game-on-hive-part-3 a {
    border-bottom: 1px solid #444444; color: #444444; text-decoration: none;
  }
  #content-mahdiyari-making-a-decentralized-game-on-hive-part-3 a:hover {
    border-bottom: 0;
  }
  #content-mahdiyari-making-a-decentralized-game-on-hive-part-3 h1 {
    font-size: 2.2em;
  }
  #content-mahdiyari-making-a-decentralized-game-on-hive-part-3 h2, h3, h4, h5 {
    margin-bottom: 0;
  }
  #content-mahdiyari-making-a-decentralized-game-on-hive-part-3 header small {
    color: #999;
    font-size: 50%;
  }
  #content-mahdiyari-making-a-decentralized-game-on-hive-part-3 img {
    max-width: 100%;
  }
&lt;/style&gt;

&lt;hr /&gt;

&lt;p&gt;
  See: &lt;a href=&quot;https://hive.blog/hive-139531/@mahdiyari/making-a-decentralized-game-on-hive-part-3&quot;&gt;Making a Decentralized Game on Hive - Part 3&lt;/a&gt;
  by
  &lt;a href=&quot;https://hive.blog/@mahdiyari&quot;&gt;@mahdiyari&lt;/a&gt;
&lt;/p&gt;</content><author><name>mahdiyari</name></author><category term="howto" /><category term="nodejs" /><summary type="html">![coding-1853305_1280.jpg](https://images.hive.blog/DQmeBMvQ9RAne3j2qH1RrtDaWEyQ2bZo81ik3wsNXYGbp3E/coding-1853305_1280.jpg) This part took a little longer because it was actually time-consuming (also I took a little break). The process is getting harder so it might take a few days longer than expected for the coming parts but I will do my best. In the previous parts, we made a simple front-end with login functionality and initialized our API and back-end application with streaming. ([Part1](https://hive.blog/hive-139531/@mahdiyari/making-a-decentralized-game-on-hive-tic-tac-toe-part-1) and [Part2](https://hive.blog/hive-139531/@mahdiyari/making-a-decentralized-game-on-hive-part-2)) ## MySQL Setup You can use apps like [AMPPS](https://www.ampps.com/) which comes with MySQL and other tools like PHPMyAdmin (one of the best MySQL management apps) or install MySQL directly. I have AMMPS on windows and use MySQL docker on Linux. MySQL docker installation: ``` docker pull mysql/mysql-server:latest ``` I create a folder `/root/mysql-docker1` and put the MySQL config file there `my.cnf` and another folder `data` for holding the database files. Running on port `127.0.0.1:3306`: ``` docker run --name=mysql1 \ --mount type=bind,src=/root/mysql-docker1/my.cnf,dst=/etc/my.cnf \ --mount type=bind,src=/root/mysql-docker1/data,dst=/var/lib/mysql \ -p 127.0.0.1:3306:3306 -d mysql/mysql-server:latest ``` There are different ways to tune your MySQL server based on your hardware which I'm not going to talk about. The following config is for medium-range hardware (32GB ram). `my.cnf`: ``` [mysqld] skip_name_resolve user=mysql default_authentication_plugin = mysql_native_password symbolic-links=0 character_set_server=utf8mb4 collation_server=utf8mb4_general_ci innodb_max_dirty_pages_pct = 90 innodb_max_dirty_pages_pct_lwm = 10 innodb_flush_neighbors = 0 innodb_undo_log_truncate=off max_connect_errors = 1000000 # InnoDB Settings innodb_file_per_table innodb_log_files_in_group = 2 innodb_open_files = 4000 default_storage_engine = InnoDB innodb_buffer_pool_instances = 8 # Use 1 instance per 1GB of InnoDB pool size innodb_buffer_pool_size = 16G # Use up to 70-80% of RAM innodb_flush_method = O_DIRECT_NO_FSYNC innodb_log_buffer_size = 64M innodb_log_file_size = 10G innodb_stats_on_metadata = 0 # tune innodb_doublewrite= 1 innodb_thread_concurrency = 0 innodb_flush_log_at_trx_commit = 0 innodb_lru_scan_depth = 2048 innodb_page_cleaners = 4 join_buffer_size = 256K sort_buffer_size = 256K innodb_use_native_aio = 1 innodb_stats_persistent = 1 innodb_adaptive_flushing = 1 innodb_read_io_threads = 16 innodb_write_io_threads = 16 innodb_io_capacity = 1500 innodb_io_capacity_max = 2500 innodb_purge_threads = 4 innodb_adaptive_hash_index = 0 max_prepared_stmt_count = 1000000 innodb_monitor_enable = '%' performance_schema = ON key_buffer_size = 512M # Connection Settings max_connections = 2000 # UPD back_log = 3000 interactive_timeout = 180 wait_timeout = 10 table_open_cache = 200000 # UPD table_open_cache_instances = 64 open_files_limit = 100000 # UPD ``` Note: restart MySQL server after updating the`my.cnf` file. MySQL password on AMMPS is `mysql` and on docker setup, I think you get the password from `docker logs mysql1`. Anyway, there are many documentations about MySQL already on the internet. Create a database `tictactoe`. It's easier with tools like PHPMyAdmin if you are using AMPPS. Or try HeidiSQL. Here is the SQL command for creating the database: ``` CREATE DATABASE `tictactoe`; ``` *** ## Development Let's create a config file for holding MySQL login information for our app. I will put this file as `config.example.js` in repository and you have to rename it manually. `config.js`: ``` const config = { dbName: 'tictactoe', dbUser: 'root', dbPassword: 'password', dbHost: '127.0.0.1', dbPort: 3306 } module.exports = config ``` *** I have a personal code for MySQL connection pooling. It simply makes a custom async function just like the original connect function of [mysqljs](https://github.com/mysqljs/mysql) library but for pooling connections. `helpers/mysql.js`: ``` const mysql = require('mysql') const config = require('../config') const pool = mysql.createPool({ connectionLimit: 5, host: config.dbHost, port: config.dbPort, user: config.dbUser, password: config.dbPassword, database: config.dbName, charset: 'utf8mb4' }) // Rewriting MySQL query method as a promise const con = {} con.query = async (query, val) =&amp;gt; { if (val) { const qu = await new Promise((resolve, reject) =&amp;gt; { pool.query(query, val, (error, results) =&amp;gt; { if (error) reject(new Error(error)) resolve(results) }) }) return qu } else { const qu = await new Promise((resolve, reject) =&amp;gt; { pool.query(query, (error, results) =&amp;gt; { if (error) reject(new Error(error)) resolve(results) }) }) return qu } } module.exports = con ``` It creates a pool of 5 connections which is more than enough for our game. And of course: ``` npm install mysql ``` *** #### Initializing database We make a function to create necessary tables if they don't exist already. `helpers/initDatabase.js`: ``` const mysql = require('./mysql') /** * id, game_id, player1, player2, starting_player, status, winner */ const tableGames = 'CREATE TABLE IF NOT EXISTS `tictactoe`.`games` ( `id` INT NOT NULL AUTO_INCREMENT , ' + '`game_id` TINYTEXT NOT NULL , ' + '`player1` TINYTEXT NOT NULL , `player2` TINYTEXT NULL DEFAULT NULL , ' + '`starting_player` TINYTEXT NOT NULL , `status` TINYTEXT NULL , ' + '`winner` TINYTEXT NULL DEFAULT NULL , PRIMARY KEY (`id`)) ' + 'ENGINE = InnoDB CHARSET=utf8mb4 COLLATE utf8mb4_general_ci;' /** * id, game_id, player, col, row */ const tableMoves = 'CREATE TABLE IF NOT EXISTS `tictactoe`.`moves` ( `id` INT NOT NULL AUTO_INCREMENT , ' + '`game_id` TINYTEXT NOT NULL , `player` TINYTEXT NOT NULL , ' + '`col` INT(1) NOT NULL , `row` INT(1) NOT NULL , ' + 'PRIMARY KEY (`id`)) ENGINE = InnoDB CHARSET=utf8mb4 COLLATE utf8mb4_general_ci;' const tableRquests = 'CREATE TABLE IF NOT EXISTS `tictactoe`.`requests` ( `id` INT NOT NULL AUTO_INCREMENT , ' + '`game_id` TINYTEXT NOT NULL , `player` TINYTEXT NOT NULL , `status` TINYTEXT NOT NULL , ' + 'PRIMARY KEY (`id`)) ENGINE = InnoDB CHARSET=utf8mb4 COLLATE utf8mb4_general_ci;' const initDatabase = async () =&amp;gt; { await mysql.query(tableGames) await mysql.query(tableMoves) await mysql.query(tableRquests) } module.exports = initDatabase ``` #### Created tables `games` ![tablesqlgames.png](https://images.hive.blog/DQmVCMyNZax6xd6kCc2VZijGjMa9Qbt8Myeev7jF8KmcqXe/image.png) `moves` ![tablesqlmoves.png](https://images.hive.blog/DQmVwyDZg1N3KEteDgfA5NdMHeUkjpngHZEmizBXxhh3XPs/image.png) `requests` ![image.png](https://images.hive.blog/DQmQLxfwKEfWSQ614vWb6qfUNVMSyiFgnKEh5nSWcKYFQQv/image.png) *** #### Updating main application Now we can complete the game methods in `index.js`: `createGame` ``` const createGame = async (data, user) =&amp;gt; { if (!data || !data.id || !data.starting_player) { return } // validating if ( data.id.length !== 20 || (data.starting_player !== 'first' &amp;amp;&amp;amp; data.starting_player !== 'second') ) { return } // Check already existing games const duplicate = await mysql.query( 'SELECT `id` FROM `games` WHERE `game_id`= ?', [data.id] ) if (duplicate &amp;amp;&amp;amp; Array.isArray(duplicate) &amp;amp;&amp;amp; duplicate.length &amp;gt; 0) { return } // Add game to database await mysql.query( 'INSERT INTO `games`(`game_id`, `player1`, `starting_player`, `status`) VALUES (?, ?, ?, ?)', [data.id, user, data.starting_player, 'waiting'] ) } ``` *** `requestJoin` ``` const requestJoin = async (data, user) =&amp;gt; { if (!data || !data.id || !data.id.length !== 20) { return } // Check game id in database const game = await mysql.query( 'SELECT `player1` FROM `games` WHERE `game_id`= ? AND `status`= ?', [data.id, 'waiting'] ) if (!game || !Array.isArray(game) || game.length &amp;lt; 1) { return } // Players can not play with themselves if (game[0].player1 === user) { return } // Check already open requests const requests = await mysql.query( 'SELECT `id` FROM `requests` WHERE `game_id`= ? AND (`player`= ? OR `status`= ?)', [data.id, user, 'accepted'] ) if (requests &amp;amp;&amp;amp; Array.isArray(requests) &amp;amp;&amp;amp; requests.length &amp;gt; 0) { return } // Request join game await mysql.query( 'INSERT INTO `requests`(`game_id`, `player`, `status`) VALUES (?, ?, ?)', [data.id, user, 'waiting'] ) } ``` *** `acceptRequest` ``` const acceptRequest = async (data, user) =&amp;gt; { if (!data || !data.id || !data.player || !data.id.length !== 20) { return } // Validate game in database const game = await mysql.query( 'SELECT `player1` FROM `games` WHERE `game_id`= ? AND `status`= ?', [data.id, 'waiting'] ) if (!game || !Array.isArray(game) || game.length &amp;lt; 1) { return } const requests = await mysql.query( 'SELECT `id` FROM `requests` WHERE `game_id`= ? AND `player`= ? AND `status`= ?', [data.id, data.player, 'waiting'] ) if (!requests || !Array.isArray(requests) || requests.length &amp;lt; 1) { return } // Accept the join request and update game status await mysql.query( 'UPDATE `games` SET `player2`=?,`status`=? WHERE `game_id`=?', [data.player, 'running', data.id] ) await mysql.query( 'UPDATE `requests` SET `status`=? WHERE `game_id`=? AND `player`=?', ['accepted', data.id, data.player] ) } ``` *** Some updates to `processData`: ``` const processData = (jsonData, postingAuths) =&amp;gt; { try { if (!jsonData) { return } const data = JSON.parse(jsonData) if (!data || !data.action || !data.app) { return } if ( !postingAuths || !Array.isArray(postingAuths) || postingAuths.length &amp;lt; 1 ) { return } const user = postingAuths[0] if (data.action === 'create_game') { createGame(data, user) } else if (data.action === 'request_join') { requestJoin(data, user) } else if (data.action === 'accept_request') { acceptRequest(data, user) } else if (data.action === 'play') { play(data, user) } } catch (e) { // error might be on JSON.parse and wrong json format return null } } ``` And streaming function: ``` try { stream.streamBlockOperations((ops) =&amp;gt; { if (ops) { const op = ops[0] if (op &amp;amp;&amp;amp; op[0] === 'custom_json' &amp;amp;&amp;amp; op[1].id === 'tictactoe') { processData(op[1].json, op[1].required_posting_auths) } } }) } catch (e) { throw new Error(e) } ``` *** I think it's enough for this part. Let's finish before I sleep on the keyboard. We set up the MySQL server and made a script to create 3 tables. Our back-end is now processing data into the database and 3 main functions are working as expected. Creating a game, Requesting to join a game, and accepting the requests. We have to create the front-end for these functions in the next part. I think the hard part is going to be the `play` function which holds the game rules. Upvote if you like and leave a comment. Make sure to follow me and share the post. Thanks for reading. *** [GitLab](https://gitlab.com/mahdiyari/decentralized-game-on-hive) [Part1](https://hive.blog/hive-139531/@mahdiyari/making-a-decentralized-game-on-hive-tic-tac-toe-part-1) [Part2](https://hive.blog/hive-139531/@mahdiyari/making-a-decentralized-game-on-hive-part-2) *** **Vote for my witness:** - https://wallet.hive.blog/~witnesses - https://peakd.com/witnesses - https://ecency.com/witnesses See: Making a Decentralized Game on Hive - Part 3 by @mahdiyari</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://images.hive.blog/DQmeBMvQ9RAne3j2qH1RrtDaWEyQ2bZo81ik3wsNXYGbp3E/coding-1853305_1280.jpg" /><media:content medium="image" url="https://images.hive.blog/DQmeBMvQ9RAne3j2qH1RrtDaWEyQ2bZo81ik3wsNXYGbp3E/coding-1853305_1280.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Using Hive Blockchain Custom Json Operation with Python &amp;amp; Beem</title><link href="https://hivedocs.info/howto/beem/python/custom_json/2021/03/22/using-hive-blockchain-custom-json-operation-with-python-and-beem.html" rel="alternate" type="text/html" title="Using Hive Blockchain Custom Json Operation with Python &amp;amp; Beem" /><published>2021-03-22T20:43:24-07:00</published><updated>2021-03-22T20:43:24-07:00</updated><id>https://hivedocs.info/howto/beem/python/custom_json/2021/03/22/using-hive-blockchain-custom-json-operation-with-python-and-beem</id><content type="html" xml:base="https://hivedocs.info/howto/beem/python/custom_json/2021/03/22/using-hive-blockchain-custom-json-operation-with-python-and-beem.html">&lt;div id=&quot;content-geekgirl-using-hive-blockchain-custom-json-operation-with-python-and-beem&quot;&gt;
&lt;center&gt;![hivewp20.png](https://images.hive.blog/DQmcXEvn33Sph3AMpajUr46mCxbM4GZFKYupgof5aaHQnZQ/hivewp20.png)Image by @doze&lt;/center&gt;

One of Hive blockchain's powerful features is its custom_json operation. Normally, users don't even see and hear about this operations. However, this operation enables developers to store their game or web application data on the Hive blockchain. If you would like to know more about what is stored in Hive blocks and and curious about various Hive operations, feel free to read my [Exploring Hive Blocks](https://leofinance.io/@geekgirl/exploring-hive-blocks) post.

In this post I would like to share how to broadcast custom_json operations to Hive blockchain, how to retrieve them afterwards using Beem module in Python. Beem is a python module created by @holger80, and makes is easy to connect to Hive blockchain and interact with it using python programming language.

Custom_json is one of many operations of Hive. It allow developers to store game or applications data on Hive blockchain. Data is stored as text in Json format. Sine Json is a native JavaScript format and widely used in website and web applications, Hive makes it super easy to create Apps and Games that would like to use decentralized solutions.

&lt;center&gt;**Broadcasting a Transaction to Hive Blockchain**&lt;/center&gt;

Every Hive block has a size limit of 65536 bytes. Which means we can only store 65536 characters including all the properties in one block. I believe this is a parameters that witnesses can change if they wish to based on demand, infrastructure, scaling, etc. For now and foreseeable future this is the limitation every developer of apps and games should consider.

Another limitation is each custom_json operation is limited to 8192 bytes or characters. However, it is possible to broadcast multiple operations within a transaction. We face another limitation there. We can only broadcast 5 operations within a transaction by the broadcasting account. 

Before we get to the code, another thing to keep in mind is, once transaction is built and we broadcast it, the return value doesn't not give the block number where the transaction is stored. That is because when we broadcast with python we don't wait until the block is produced. A couple minutes after broadcasting the transaction the block is produced and available for us to retrieve the data stored. When we broadcast we get back values like `expiration`, `ref_block_num` and `ref_block_prefix`. Using these three values we can find our transaction and the block it is stored in. So that we don't search the entire blockchain form the beginning, I also decided to store the current block number before broadcasting. That way I can start searching for the transaction starting from that block number.

Following is the code to broadcast custom_json operations:

```
from beem.transactionbuilder import TransactionBuilder
from beembase.operations import Custom_json
from beem import Hive
from beem.blockchain import Blockchain 
from beem.block import Block
from helper import wif, name 
from beem.nodelist import NodeList
from pprint import pprint

nodelist = NodeList()
nodelist.update_nodes()
nodes = nodelist.get_hive_nodes()

hive = Hive(node=nodes, nobroadcast=False, keys={'posting': wif})
blockchain = Blockchain(hive)
current_block_num = blockchain.get_current_block_num()

tx = TransactionBuilder(blockchain_instance=hive)

for i in range(1,6):
  txt = str(i) * 8100
  data = {}
  data['data'] = txt
  cj = {
      &quot;required_auths&quot;: [],
      &quot;required_posting_auths&quot;: [name],
      &quot;id&quot;: &quot;librarian&quot;,
      &quot;json&quot;: data
    }
  tx.appendOps(Custom_json(cj))

tx.appendWif(wif)
signed_tx = tx.sign()
broadcast_tx = tx.broadcast()

print(current_block_num)
print(broadcast_tx)
```

Main thing to pay attention to is the TransactionBuilder. It allows us to build a transaction before broadcasting then broadcast it. I stored Hive account name and keys in a separate python file named helper.py, and imported variables name and wif to sign the transaction. To broadcast a this transaction posting key was enough.

We can add upto 5 operations in our transaction using .appendOps() method. Everything else should be self-explanatory. Feel free to ask in the comments if something doesn't make sense. I will be happy to explain each line.

Now the last two print statements show the block number before the transaction was broadcasted, and return values after the broadcast happened. 

Now we need to retrieve the data from Hive. We will use the printed or stored block number to start the search from and values returned when we broadcasted the transactions such as `expiration`,  `ref_block_num`, and `ref_block_prefix`. 

```
from beem import Hive
from beem.block import Block
from pprint import pprint
from beem.blockchain import Blockchain
from beem.nodelist import NodeList

nodelist = NodeList()
nodelist.update_nodes()
nodes = nodelist.get_hive_nodes()
hive = Hive(node=nodes)

start_block_num = 52374262
blockchain = Blockchain(hive)
end_block_num = blockchain.get_current_block_num()

exp = '2021-03-23T02:08:41'
rbn = 10998
rbp = 3231133325

def get_data(start, end, exp, rbn, rbp):
    ref = []
    for num in range(start, end):
        block = Block(block=num, blockchain_instance=hive)
        b = block.json()
        for i, tr in enumerate(b['transactions']):
            if tr['expiration'] == exp and tr['ref_block_num'] == rbn and tr['ref_block_prefix'] == rbp:
                print(i)
                print(b['id'])
                print(b['timestamp'])
                print(tr['operations'])
                print(b['transaction_ids'][i])
                ref.append(b['id'])
                ref.append(i)
                return ref

ref = get_data(start_block_num, end_block_num, exp, rbn, rbp)

print('-----')
print(ref)
bb = Block(block=ref[0])
bb = bb.json()
bb = bb['transactions'][ref[1]]
bb = bb['operations'][0]['value']['json']

print(bb)

```

What the code above does is, it searches for the stored transaction with custom_json operations starting with the nearest known block numbers. Once found it displays the data we are searching for. It also provides the block number the transaction is stored at. 

Now, we want to store this block number as reference for future use. Next time we need the same data, we can just get the block from the blockchain instead of iterating through multiple blocks and save us time.

If we have the block number, then we can easily get everything stored in that block as following:

```
block_num = 52374284

block = Block(block=block_num, blockchain_instance=hive)
b = block.json()

pprint(b)
```

One last thing I would like to share has to do with resource credits. I used an account with 1006 HP to test the codes above. The transaction above had 5 operations with 8100 characters each in size. It only took less than 1% of resource credits for this account to broadcast the transaction.

I hope you find this post useful. Let me know your thoughts. Also, let me know if there are better ways of broadcasting transactions and retrieving data from Hive blockchain using python.


Posted Using [LeoFinance &lt;sup&gt;Beta&lt;/sup&gt;](https://leofinance.io/@geekgirl/using-hive-blockchain-custom-json-operation-with-python-and-beem)&lt;/div&gt;
&lt;script crossorigin=&quot;anonymous&quot; integrity=&quot;sha256-4+XzXVhsDmqanXGHaHvgh1gMQKX40OUvDEBTu8JcmNs=&quot; src=&quot;https://code.jquery.com/jquery-3.5.1.slim.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://unpkg.com/steem-content-renderer&quot;&gt;&lt;/script&gt;

&lt;script&gt;
  $(document).ready(function() {
    try {
      const renderer = new SteemContentRenderer.DefaultRenderer({
        baseUrl: &quot;https://hive.blog/&quot;,
        breaks: true,
        skipSanitization: false,
        allowInsecureScriptTags: false,
        addNofollowToLinks: true,
        doNotShowImages: false,
        ipfsPrefix: &quot;&quot;,
        assetsWidth: 640,
        assetsHeight: 480,
        imageProxyFn: (url) =&gt; url,
        usertagUrlFn: (account) =&gt; &quot;/@geekgirl&quot;,
        hashtagUrlFn: (hashtag) =&gt; &quot;/using-hive-blockchain-custom-json-operation-with-python-and-beem&quot;,
        isLinkSafeFn: (url) =&gt; true,
      });
      
      const inputElem = $('#content-geekgirl-using-hive-blockchain-custom-json-operation-with-python-and-beem').html();
      const outputElem = $('#content-geekgirl-using-hive-blockchain-custom-json-operation-with-python-and-beem');
      const output = renderer.render(inputElem);
      
      outputElem.html(output);
    } catch(e) {
      console.log(e);
    }
  });
&lt;/script&gt;

&lt;style&gt;
  #content-geekgirl-using-hive-blockchain-custom-json-operation-with-python-and-beem {
    padding: 0 3rem;
    color: #444444;
    font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Helvetica, Arial, sans-serif;
    font-size: 16px;
    line-height: 1.8;
    text-shadow: 0 1px 0 #ffffff;
    padding: 0.5rem;
  }
  #content-geekgirl-using-hive-blockchain-custom-json-operation-with-python-and-beem code {
    background: white;
  }
  #content-geekgirl-using-hive-blockchain-custom-json-operation-with-python-and-beem a {
    border-bottom: 1px solid #444444; color: #444444; text-decoration: none;
  }
  #content-geekgirl-using-hive-blockchain-custom-json-operation-with-python-and-beem a:hover {
    border-bottom: 0;
  }
  #content-geekgirl-using-hive-blockchain-custom-json-operation-with-python-and-beem h1 {
    font-size: 2.2em;
  }
  #content-geekgirl-using-hive-blockchain-custom-json-operation-with-python-and-beem h2, h3, h4, h5 {
    margin-bottom: 0;
  }
  #content-geekgirl-using-hive-blockchain-custom-json-operation-with-python-and-beem header small {
    color: #999;
    font-size: 50%;
  }
  #content-geekgirl-using-hive-blockchain-custom-json-operation-with-python-and-beem img {
    max-width: 100%;
  }
&lt;/style&gt;

&lt;hr /&gt;

&lt;p&gt;
  See: &lt;a href=&quot;https://leofinance.io/@geekgirl/using-hive-blockchain-custom-json-operation-with-python-and-beem&quot;&gt;Using Hive Blockchain Custom Json Operation with Python &amp;amp; Beem&lt;/a&gt;
  by
  &lt;a href=&quot;https://hive.blog/@geekgirl&quot;&gt;@geekgirl&lt;/a&gt;
&lt;/p&gt;</content><author><name>geekgirl</name></author><category term="howto" /><category term="beem" /><category term="python" /><category term="custom_json" /><summary type="html">![hivewp20.png](https://images.hive.blog/DQmcXEvn33Sph3AMpajUr46mCxbM4GZFKYupgof5aaHQnZQ/hivewp20.png)Image by @doze One of Hive blockchain's powerful features is its custom_json operation. Normally, users don't even see and hear about this operations. However, this operation enables developers to store their game or web application data on the Hive blockchain. If you would like to know more about what is stored in Hive blocks and and curious about various Hive operations, feel free to read my [Exploring Hive Blocks](https://leofinance.io/@geekgirl/exploring-hive-blocks) post. In this post I would like to share how to broadcast custom_json operations to Hive blockchain, how to retrieve them afterwards using Beem module in Python. Beem is a python module created by @holger80, and makes is easy to connect to Hive blockchain and interact with it using python programming language. Custom_json is one of many operations of Hive. It allow developers to store game or applications data on Hive blockchain. Data is stored as text in Json format. Sine Json is a native JavaScript format and widely used in website and web applications, Hive makes it super easy to create Apps and Games that would like to use decentralized solutions. **Broadcasting a Transaction to Hive Blockchain** Every Hive block has a size limit of 65536 bytes. Which means we can only store 65536 characters including all the properties in one block. I believe this is a parameters that witnesses can change if they wish to based on demand, infrastructure, scaling, etc. For now and foreseeable future this is the limitation every developer of apps and games should consider. Another limitation is each custom_json operation is limited to 8192 bytes or characters. However, it is possible to broadcast multiple operations within a transaction. We face another limitation there. We can only broadcast 5 operations within a transaction by the broadcasting account. Before we get to the code, another thing to keep in mind is, once transaction is built and we broadcast it, the return value doesn't not give the block number where the transaction is stored. That is because when we broadcast with python we don't wait until the block is produced. A couple minutes after broadcasting the transaction the block is produced and available for us to retrieve the data stored. When we broadcast we get back values like `expiration`, `ref_block_num` and `ref_block_prefix`. Using these three values we can find our transaction and the block it is stored in. So that we don't search the entire blockchain form the beginning, I also decided to store the current block number before broadcasting. That way I can start searching for the transaction starting from that block number. Following is the code to broadcast custom_json operations: ``` from beem.transactionbuilder import TransactionBuilder from beembase.operations import Custom_json from beem import Hive from beem.blockchain import Blockchain from beem.block import Block from helper import wif, name from beem.nodelist import NodeList from pprint import pprint nodelist = NodeList() nodelist.update_nodes() nodes = nodelist.get_hive_nodes() hive = Hive(node=nodes, nobroadcast=False, keys={'posting': wif}) blockchain = Blockchain(hive) current_block_num = blockchain.get_current_block_num() tx = TransactionBuilder(blockchain_instance=hive) for i in range(1,6): txt = str(i) * 8100 data = {} data['data'] = txt cj = { &quot;required_auths&quot;: [], &quot;required_posting_auths&quot;: [name], &quot;id&quot;: &quot;librarian&quot;, &quot;json&quot;: data } tx.appendOps(Custom_json(cj)) tx.appendWif(wif) signed_tx = tx.sign() broadcast_tx = tx.broadcast() print(current_block_num) print(broadcast_tx) ``` Main thing to pay attention to is the TransactionBuilder. It allows us to build a transaction before broadcasting then broadcast it. I stored Hive account name and keys in a separate python file named helper.py, and imported variables name and wif to sign the transaction. To broadcast a this transaction posting key was enough. We can add upto 5 operations in our transaction using .appendOps() method. Everything else should be self-explanatory. Feel free to ask in the comments if something doesn't make sense. I will be happy to explain each line. Now the last two print statements show the block number before the transaction was broadcasted, and return values after the broadcast happened. Now we need to retrieve the data from Hive. We will use the printed or stored block number to start the search from and values returned when we broadcasted the transactions such as `expiration`, `ref_block_num`, and `ref_block_prefix`. ``` from beem import Hive from beem.block import Block from pprint import pprint from beem.blockchain import Blockchain from beem.nodelist import NodeList nodelist = NodeList() nodelist.update_nodes() nodes = nodelist.get_hive_nodes() hive = Hive(node=nodes) start_block_num = 52374262 blockchain = Blockchain(hive) end_block_num = blockchain.get_current_block_num() exp = '2021-03-23T02:08:41' rbn = 10998 rbp = 3231133325 def get_data(start, end, exp, rbn, rbp): ref = [] for num in range(start, end): block = Block(block=num, blockchain_instance=hive) b = block.json() for i, tr in enumerate(b['transactions']): if tr['expiration'] == exp and tr['ref_block_num'] == rbn and tr['ref_block_prefix'] == rbp: print(i) print(b['id']) print(b['timestamp']) print(tr['operations']) print(b['transaction_ids'][i]) ref.append(b['id']) ref.append(i) return ref ref = get_data(start_block_num, end_block_num, exp, rbn, rbp) print('-----') print(ref) bb = Block(block=ref[0]) bb = bb.json() bb = bb['transactions'][ref[1]] bb = bb['operations'][0]['value']['json'] print(bb) ``` What the code above does is, it searches for the stored transaction with custom_json operations starting with the nearest known block numbers. Once found it displays the data we are searching for. It also provides the block number the transaction is stored at. Now, we want to store this block number as reference for future use. Next time we need the same data, we can just get the block from the blockchain instead of iterating through multiple blocks and save us time. If we have the block number, then we can easily get everything stored in that block as following: ``` block_num = 52374284 block = Block(block=block_num, blockchain_instance=hive) b = block.json() pprint(b) ``` One last thing I would like to share has to do with resource credits. I used an account with 1006 HP to test the codes above. The transaction above had 5 operations with 8100 characters each in size. It only took less than 1% of resource credits for this account to broadcast the transaction. I hope you find this post useful. Let me know your thoughts. Also, let me know if there are better ways of broadcasting transactions and retrieving data from Hive blockchain using python. Posted Using [LeoFinance Beta](https://leofinance.io/@geekgirl/using-hive-blockchain-custom-json-operation-with-python-and-beem) See: Using Hive Blockchain Custom Json Operation with Python &amp;amp; Beem by @geekgirl</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://images.hive.blog/DQmcXEvn33Sph3AMpajUr46mCxbM4GZFKYupgof5aaHQnZQ/hivewp20.png" /><media:content medium="image" url="https://images.hive.blog/DQmcXEvn33Sph3AMpajUr46mCxbM4GZFKYupgof5aaHQnZQ/hivewp20.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Phishing on Hive? No more. Solution for all Frontends.</title><link href="https://hivedocs.info/news/devops/security/2021/03/17/phishing-on-hive-no-more-solution-for-all-frontends.html" rel="alternate" type="text/html" title="Phishing on Hive? No more. Solution for all Frontends." /><published>2021-03-17T00:06:09-07:00</published><updated>2021-03-17T00:06:09-07:00</updated><id>https://hivedocs.info/news/devops/security/2021/03/17/phishing-on-hive-no-more-solution-for-all-frontends</id><content type="html" xml:base="https://hivedocs.info/news/devops/security/2021/03/17/phishing-on-hive-no-more-solution-for-all-frontends.html">&lt;div id=&quot;content-keys-defender-phishing-on-hive-no-more-solution-for-all-frontends&quot;&gt;&lt;center&gt;
&lt;div&gt;
&lt;h4&gt;One &amp;nbsp; &lt;i&gt;script&lt;/i&gt; &amp;nbsp; to rule them all..&lt;/h4&gt;

https://files.peakd.com/file/peakd-hive/keys-defender/23uEx3ge6ahMEAqbNu2KxP3EvamdsBroMaGSYrkDRPsGUHc7sjst6GKUUPo7MoFq9YGo6.png
&lt;/div&gt;
&lt;/center&gt;

-----

&lt;h5&gt;Problem:&lt;/h5&gt;
In the past few weeks Hive has been plagued by &lt;u&gt;phishing campaigns&lt;/u&gt; and some users lost access to their account or lost their funds. This is nothing new and has been going on for years on ~~Steem~~ and Hive.

&lt;div class=&quot;pull-right&quot;&gt; https://files.peakd.com/file/peakd-hive/keys-defender/23ynfLMyQ7Cub6dZ3Dkgy3ibKnFc8DCeGkhiMRJjhBRtEVFTGBzSfAF8SxegpyrQM4eg4.png&lt;/div&gt;

To make things worse, registrars are not quick enough to take down phishing domains..

&lt;br /&gt;&lt;div class=&quot;pull-right&quot;&gt;&lt;div class=&quot;pull-left&quot;&gt;
https://files.peakd.com/file/peakd-hive/keys-defender/243MPzTbbyDU6fHr6SnsBBTJ3VSMBJk9KgL2At8pnztriEQmsYMWGAMwgEApYdzvTfB5e.png
&lt;/div&gt;&lt;sub&gt;&lt;sub&gt;&lt;a href=&quot;&quot;&gt;src&lt;/a&gt;&lt;/sub&gt;&lt;/sub&gt;&lt;/div&gt;

&lt;br /&gt;It is time that the Hive community tries to mitigate this issue on their own.

&lt;br /&gt;&lt;h5&gt;Potential solution:&lt;/h5&gt;Use a &lt;u&gt;plug-and-play universal script&lt;/u&gt; (or a modified copy of it) that all Hive frontends can integrate to block phishing links in a timely matter. As soon as a phishing campaign starts on Hive and the attacker's domain is spotted and added to a blacklist API (eg. @spaminator's), the universal script would immediately block the attack in all Hive frontends and at the same time leave the User Experience unaffected.

&lt;u&gt;As a matter of fact, this is what I worked on in the past few days.&lt;/u&gt;

- Here is the universal script for all Hive frontends: https://github.com/keys-defender/hive/blob/master/scripts/universal-bridge-against-phishing.js
- Here is a &lt;u&gt;demo website&lt;/u&gt; with my script in action: https://keys-defender.github.io/hive

*NOTE* : the demo page will not be sanitized by my universal script until you: 1. Navigate to https://cors-anywhere.herokuapp.com/corsdemo and click on the &quot;Request temporary access&quot; button, 2. refresh the demo website.

&lt;br /&gt;&lt;b&gt;I have proved my universal script working on:&lt;/b&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;sub&gt;(see screenshots down below)&lt;/sub&gt;

HIVE.BLOG - https://hive.blog - @blocktrades @quochuy 
PEAKD - https://peakd.com - @asgarth, @jarvie
LEOFINANCE - https://leofinance.io - @khaleelkazi
ECENCY - https://ecency.com - @good-karma
3SPEAK - https://3speak.tv - @theycallmedan, @starkerz
D.BUZZ - https://d.buzz - @chrisrice
STEM social - https://stem.openhive.network - @lemouth
STEM geeks - https://stemgeeks.net - @enforcer48 ?

It would be great if each Hive frontend maintaner could review it and adapt it to their needs (if they need to -- I tested this script in all major Hive frontends already and it did not seem to have unwanted side effects). I highly recommend though that the integration is thoroughly regression tested before it's used in production.

&lt;i&gt;FYI also for:&lt;/i&gt;
AnonRamblings	@emrebeyler, DTube	@heimindanger, Engage	@arcange, Engrave	@engrave, @nicniezgrublem, Hive-db	@jesta, Hive-Engine	@aggroed, Hiveblockexplorer	@penguinpablo, Hiveblocks	@roadscape, HiveEngine	@holger80, Quello	@tobias-g, ...
\+ other project maintaners: @yabapmatt, @stoodkev, @aggroed, @louis88, @mahdiyari, @acidyo, @fbslo, @rishi556.
&lt;sub&gt;(apologies for the mass tag)&lt;/sub&gt;

I believe that blocking phishing campaigns in an unified way in all frontends is possible despite the different tech stacks in use. It does no matter which framework the website maintainer used to develop their website (eg. ReactJS, AngularJS, VueJS, JQuery, vanilla JS, etc). Using JS global overrides it is possible to prevent users from falling victim of phishing.

&lt;br /&gt;

&lt;h5&gt;What does my script do?&lt;/h5&gt;
It uses the native APIs offered by all browsers in order to immediately block phishing links and images in all Hive frontends as soon as they are discovered and published into the blacklist.

- Any known phishing &lt;b&gt;&lt;u&gt;link&lt;/u&gt;&lt;/b&gt; in the UI will be red and strikethrough-ed. Furthermore if you click on a known phishing link you'll see an alert telling you that it's phishing and it won't allow you to navigate to the phishing domain from the Hive frontend.

- Any &lt;b&gt;&lt;u&gt;image&lt;/u&gt;&lt;/b&gt; that is marked as a phishing attempt (eg. an image with some text saying &quot;claim your $ 1000 in tokens at www.justinscam.com&quot;) will not be displayed in any frontend that uses my script (or a variant of it) as soon as its URL is published into the public blacklist.

More details will follow towards the end of the post to list all the native features of the browser that are hardened by my script in order to prevent phishing (ie. iframes, scripts, window open, XHR requests, Fetch api).

&lt;br /&gt;

&lt;h5&gt;Usage:&lt;/h5&gt;
&lt;b&gt;How difficult is it to try out my universal script in your Hive-powered website?&lt;/b&gt;

Integrating this script is very **straightforward**. In order to integrate it, simply add a `&lt;script&gt;` tag to the head section of your *index.html* page. That's it!

Your *index.html* :

```&lt;!DOCTYPE html&gt;
  &lt;head&gt;
    // ADD THIS ONE LINE WITH MY SCRIPT vvv
    &lt;script src=&quot;https://keys-defender.github.io/hive/scripts/universal-bridge-against-phishing.js&quot;&gt; 
    ...
  &lt;/head&gt;
  &lt;body&gt;
    ...
  &lt;/body&gt;
&lt;/html&gt;
```

This should be enough for your tests. Some intial recommendations though:
- Keep an eye on &lt;u&gt;CORS&lt;/u&gt; issues. If a request is failing because of CORS, use https://cors-anywhere.herokuapp.com for your tests (it's already there commented out in my script).
- Update your &lt;u&gt;Content Security Policy&lt;/u&gt; if necessary to allow your website to load my script from Github and to allow the request to @spaminator's api to go through.
- It is highly recommended that you host your own version of this script for your &lt;u&gt;production&lt;/u&gt; website. It is clearly not a good idea to rely on my github as it's a single point of failure. For example, what if my github account gets compromised? If all Hive frontends point to my script they would all be affected!

&lt;br&gt;

-----

&lt;h5&gt;And now.. some proof of this thing working:&lt;/h5&gt;

&lt;b&gt;Overview of protected features on various Hive Frontends&lt;/b&gt;

&lt;div class=&quot;phishy&quot;&gt;- PHISHING LINKS&lt;/div&gt;

&lt;br&gt;[screenshot taken after applying my script to **Leofinance**]

&lt;i&gt;styling applied to known phishing links: red and strike-through&lt;/i&gt;
![image.png](https://files.peakd.com/file/peakd-hive/keys-defender/246b3Cen96nYaVXhEMyFx18VLkF8VXxXeN7ZJYab7A2C88ACatV7ZEKg7MzmmzqSeWpfv.png)

*alert displayed when a known phishing link is clicked:*
![image.png](https://files.peakd.com/file/peakd-hive/keys-defender/246b13s66MSa65fzhbCtVxHMk3GTKBg4ay7gQq6KqyumJ1ZH1jU4RmnHefVT2XhURof7a.png)

&lt;sub&gt;(my comment: https://hive.blog/hive-167922/@keys-defender/re-keys-defender-6byyqg)&lt;/sub&gt;

&lt;br&gt;&lt;b&gt;Other frontends:&lt;/b&gt;

[screenshot taken after applying my script to **3speak**]
![image.png](https://files.peakd.com/file/peakd-hive/keys-defender/23tHbTv6ofWAmyVButa4tHLcpzh4QPypAiRGEGDN4fMmBFeDAj5agD66xUmV5KJSjZEYC.png)

&lt;br&gt;[screenshot taken after applying my script to **d.buzz**]
![image.png](https://files.peakd.com/file/peakd-hive/keys-defender/23u6YyraYptC4ZXLBBE5xdsEepUD5kEZr532zZTKtGJ2TM1zU7Jes14TAZjGtDBDjumsa.png)
&lt;sub&gt;(my post: https://hive.blog/hive-193084/@keys-defender/zy71ydsnp4o1ufhs6j7ksz)&lt;/sub&gt;

&lt;br&gt;[screenshot taken after applying my script to **Stem social**]
![image.png](https://files.peakd.com/file/peakd-hive/keys-defender/23wXL9BoY2G2KKfNWe6yeTzXqpquMtyf2nbr9jBn3VummyooS7xVjAFv8ZnnYnxTGyTjA.png)

&lt;br&gt;[screenshot taken after applying my script to **Stem Geeks**]:
![image.png](https://files.peakd.com/file/peakd-hive/keys-defender/23tHbYLE2fe9m2QhkixXFbvYXvuMJeUu1XrBnBm2vvXkLTeCny5dxZyYDcdw3dhYaVUyS.png) .


&lt;BR&gt;&lt;div class=&quot;phishy&quot;&gt;- IMAGES&lt;/div&gt;
&lt;br&gt;Both &quot;img&quot; tags and direct uploads get correctly sanitized:

[screenshot taken after applying my script to **hive.blog**]
![image.png](https://files.peakd.com/file/peakd-hive/keys-defender/Eo8ZZNvKmzwu5YKRHswUd32AATpnEGBtTPC6tec2W8RCTM5b5ZuPmJmpDBY8S8VaAck.png)

&lt;br&gt;&lt;div class=&quot;phishy&quot;&gt;- SCRIPTS&lt;/div&gt;
&lt;br&gt;Eg. malicious ads - see &lt;a href=&quot;https://hive.blog/steemit/@gaottantacinque/steemit-got-hacked&quot;&gt;this phishing campaign&lt;/a&gt;

[screenshot taken after applying my script to **hive.blog**]
https://files.peakd.com/file/peakd-hive/keys-defender/23sUEimLkGd2bAm2yHiGdP4gmerpj4WKdG5fuP3TQsExSwp4pZisB8KMgR9DrjNaEoNGk.png

&lt;BR&gt;&lt;div class=&quot;phishy&quot;&gt;- FETCH API&lt;/div&gt;

[screenshot taken after applying my script to **Peakd**]
![image.png](https://files.peakd.com/file/peakd-hive/keys-defender/Eo45poYAdQqmYZjVmCBFLJQZjRQbb1Ee76a8qVcG1WG3rkEnbLjSQbMS4ptV2duyeig.png)

&lt;br&gt;&lt;div class=&quot;phishy&quot;&gt;- WINDOW OPEN:&lt;/div&gt;

[screenshot taken after applying my script to **Ecency**]
![image.png](https://files.peakd.com/file/peakd-hive/keys-defender/246axgrsA2empck8RAxDomd7nmeQCV5aREaEw2RtPSnbUSNVa5HkqitF7TwnPMG56xTaU.png)

-----

&lt;br&gt;

&lt;h5&gt;MORE STUFF..&lt;/h5&gt;

&lt;b&gt;Not supported by my universal script:&lt;/b&gt;
- &lt;u&gt;*window.location*&lt;/u&gt; (*window.location.replace(url)* and assignments to *window.location.href*)
The *window.location* object is immutable therefore if you use that approach to open external lilnks, please consider switching to *window.open* so that my script will protect your user base from known phishing domains.

&lt;br&gt;

**Potential improvements:**

- Instead of just using a list of known phishing domains, the blacklist could be restructured to something similar to what I'm currently using for @keys-defender's blacklist (merged with the @spaminator's one).
Instead of just using a list of links, I use an array of objects and each object has the following properties:
-- *&quot;regex&quot;*: used to match a known phishing domain
-- *&quot;fullLink&quot;*: full link to the homepage of the phishing site
-- *&quot;threatType&quot;*: PHISHING or COMPROMISED_DOMAIN. I used the latter in the past when I found a critical vulnerability in a Hive website and only until it got patched. This attribute is also used in @keys-defender auto-[replies to phishing comments](https://hive.blog/hive-193552/@keys-defender/antiphish-keys-defender-bot-1615674771037) to categorize threats.
-- *&quot;infoBlog&quot;*: link to article that warns against the phishing campaing in progress. This is already in @keys-defender auto-replies and if none is provided it defaults to an intro post.
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; If we had multiple blacklists and they all shared this interface (eg. using a &lt;u&gt;swagger&lt;/u&gt; file) it would be easy to merge them and use them to block phishing campaigns in their early stages. The warnings displayed to the users would be more accurate as well.
- Add a warning to all Hive frontends for all &lt;u&gt;comments containing links left by known compromised accounts&lt;/u&gt;. This should be easy to add re-using the global overrides already added in my script and @spaminator's [api dedicated for this purpose](https://spaminator.me/api/bl/hacked.json).
- Display a proper message on the UI instead of just an alert (probably not important, a fancy UX in my opinion is not necessary for this edge case). Hive frontends maintainers can &lt;u&gt;adjust the messaging&lt;/u&gt; as they see fit though. My alerts are more of a Proof of Concept after all.

&lt;br&gt;

**Concerns:**

- &lt;u&gt;Centralization&lt;/u&gt;. Despite being a good start, we should not rely only on [@spaminator's API](@@@). Some potential solutions to this is to allow users to choose which blacklist to use, or fetch multiple blacklists at the same time. Or even have each Hive website maintainer host their own blacklist.

- No &lt;u&gt;load testing&lt;/u&gt; was performed on @spaminator API. If all Hive frontends start using their API it may become an issue. @spaminator team to chim in on this.
The requests from my script are already throttled significantly on the client side and a local cache is used as well.
- Proper server-side &lt;u&gt;caching&lt;/u&gt; on @spaminator API. Eg. *Cache-Control* response header set to 5 mins? Cloudfront (AWS) caching / Varnish / Redis? 
- Scaling. How scalable is @spaminator API? Would they incur in prohibitive &lt;u&gt;cost&lt;/u&gt; if too many requests were to be sent daily? Do they have a defense mechanism in place for &lt;u&gt;DDOS&lt;/u&gt; attacks? This is not a deal breaker since all users will have a cached version of the blacklist, but an attacker could try and take advantage of this for a new phishing campaign.

&lt;br&gt;

**Notes for devs that try my script:**
- To turn OFF verbose &lt;u&gt;logging&lt;/u&gt; and remove the cors-anywhere proxy, set `IS_DEBUG` to false.
- @spaminator's list of blacklisted domains lives at https://spaminator.me/api/p/domains.json. This list of known phishing domains targeting Hive is stored in the &lt;u&gt;localstorage&lt;/u&gt; as well. If the API is down (eg. DDOS-ed) the Frontends will still block known phishing domains.

![image.png](https://files.peakd.com/file/peakd-hive/keys-defender/23t7FQnUT6RM6QZhZk8zrA5A3QNzAsaTq8TvqRBAxMYdYjrW6vaNou1N3DmM6XqBtkA9i.png)

- The list of &lt;u&gt;global overrides&lt;/u&gt; added in my script is: *document.createElement, element.setAttribute and getAttribute, history.pushState, XMLHttpRequestClass, window.fetch, window.open*.
- The DOM &lt;u&gt;elements sanitized&lt;/u&gt; by my script are: *iframe, script, img, a*. Other potential candidates that would be easy to cover: *input, audio, embed, source, track, video, link*.
- When the document is fully rendered all the risky elements (anchors, images, etc) are &lt;u&gt;checked again&lt;/u&gt; if they weren't already. Eg. comments fetched after the page is fully loaded.
- In order to &lt;u&gt;reduce the load&lt;/u&gt; on @spaminator's servers, if the user is idle on a page the API is queried again only every 15 minutes. If the user navigates to a different subpath of a Single Page Application (eg. https://hive.blog) (would not cause a page refresh) the api is queried only if at least 5 mins passed from the last query.
The same applies for non-SPA (eg. Leofinance, Peakd). A new API request to fetch the updated list of domains is sent only if more than 5 minutes passed from the last request.
&lt;sub&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Example of phishing domains fetch on history change&lt;/sub&gt;
![image.png](https://files.peakd.com/file/peakd-hive/keys-defender/23s9VYpXhV672UiRiZoZJ3hFwFyJe1tymtJfcP392Y4PFdpZDR8j8p3t18KQniG8XCUBW.png)

- Metrics - I added some timers and I noticed no significant &lt;u&gt;performance impact&lt;/u&gt; validating all risky elements against the list of known phishing domains.
- The script is already &lt;u&gt;resilient&lt;/u&gt; to API 500 responses (eg. DDOS-ed). We could also periodically rotate to different APIs or fetch multiple ones at the same time.

- Here is a link to my script transpiled with &lt;u&gt;BabelJS&lt;/u&gt; for older browsers and minified to save some milliseconds in the load time: https://keys-defender.github.io/scripts/universal-bridge-against-phishing.min.js



- &lt;u&gt;Test it&lt;/u&gt;!

To reiterate, before using this script in production it is highly recommended that you perform regression testing to make sure that existing features are not affected by the global overrides in my script. From my own tests they seem to all work correctly but this should not be put in production as is without review and further testing on each Hive frontend.

-----

&lt;br&gt;
- When all frontends will have in place an effective defense mechanism against phishing, it won't be necessary anymore for @keys-defender to keep warning Hive users against shortened links (eg. &lt;a href=&quot;https://hive.blog/hive-156509/@keys-defender/antiunsafelinks-keys-defender-bot-1615861217985&quot;&gt;https://hive.blog/hive-156509/@keys-defender/antiunsafelinks-keys-defender-bot-1615861217985&lt;/a&gt;) and phishing campaigns (eg. https://peakd.com/@leemikyung/qpwsgn).

-----

&lt;br&gt;

**Are you bored with your day and willing to read more?**

If you're not tired of hearing me rumble about this stuff in your head, here is some more stuff to read..
&lt;u&gt;Why&lt;/u&gt; did I decide to work on this solution?
There were some discussion ongoing on Discord and Slack about how to timely react to phishing campaigns that recently plagued Hive. @guiltyparties and @pfunk claimed that our best shot would be to block dangerous links directly in the Hive frontends. 


![image.png](https://files.peakd.com/file/peakd-hive/keys-defender/23u6YmnLys8BronfhK6AJfxpTnBSQv5KHLV83McP9FXTm8UgTzZa3bPEHt66FAbgz8sdn.png)

This though required every single maintainer of the Hive condensers to implement their own logic from scratch in order to block attackers.

![image.png](https://files.peakd.com/file/peakd-hive/keys-defender/23twABkvgbu378nPXEe6b84SjU3xg92rLant5dM5E5qpbKSVZFeJLU7QaQueeJxYR5wJt.png)

The idea I already have had in mind for a while though was to use a single script, as an universal solution for most Hive frontend out there.

I had already worked on something similar for a client of my employer. It was not for phishing, but the same logic applied. The platform I was working on used a custom scheme (eg. *somescheme://* instead of *https://*) and all relative protocol links added by third party scripts (eg. *&quot;//www.googletagmanager.com&quot;*) were defaulting to the custom scheme instead of using HTTPS.
In that occasion I had to use some global overrides to add the https prefix to anything that was meant to go out to third parties. That ended up being handy for this solution on Hive.

&lt;u&gt;When&lt;/u&gt; did I work on this Proof of Concept for Hive frontends, you ask?
Late at night in the past few days while caring for my few-days-old newborn. I'm off work and getting bored so I decided to put my sleep deprivation at work and started writing some code for this purpose. I hope it will be useful and get used to effectively improve our Hive frontends and discourage scammers.
&lt;br&gt;

-----

&lt;br&gt;

Take care,
@keys-defender (@gaottantacinque)

&lt;sub&gt;&lt;i&gt;Please don't forget to upvote and reblog. Donations are welcome as well, those damn diapers aren't free! &amp;nbsp; =P&lt;/i&gt;&lt;/sub&gt;
&lt;/div&gt;
&lt;script crossorigin='anonymous' integrity='sha256-4+XzXVhsDmqanXGHaHvgh1gMQKX40OUvDEBTu8JcmNs=' src='https://code.jquery.com/jquery-3.5.1.slim.min.js'&gt;&lt;/script&gt;
&lt;script src=&quot;https://unpkg.com/steem-content-renderer&quot;&gt;&lt;/script&gt;
&lt;script&gt;
  $(document).ready(function() {
    try {
      const renderer = new SteemContentRenderer.DefaultRenderer({
        baseUrl: &quot;https://hive.blog/&quot;,
        breaks: true,
        skipSanitization: false,
        allowInsecureScriptTags: false,
        addNofollowToLinks: true,
        doNotShowImages: false,
        ipfsPrefix: &quot;&quot;,
        assetsWidth: 640,
        assetsHeight: 480,
        imageProxyFn: (url) =&gt; url,
        usertagUrlFn: (account) =&gt; &quot;/@keys-defender&quot;,
        hashtagUrlFn: (hashtag) =&gt; &quot;/phishing-on-hive-no-more-solution-for-all-frontends&quot;,
        isLinkSafeFn: (url) =&gt; true,
      });
      
      const inputElem = $('#content-keys-defender-phishing-on-hive-no-more-solution-for-all-frontends').html();
      const outputElem = $('#content-keys-defender-phishing-on-hive-no-more-solution-for-all-frontends');
      const output = renderer.render(inputElem);
      
      outputElem.html(output);
    } catch(e) {
      console.log(e);
    }
  });
&lt;/script&gt;
&lt;style&gt;
  #content-keys-defender-phishing-on-hive-no-more-solution-for-all-frontends {
    padding: 0 3rem;
    color: #444444;
    font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Helvetica, Arial, sans-serif;
    font-size: 16px;
    line-height: 1.8;
    text-shadow: 0 1px 0 #ffffff;
    padding: 0.5rem;
  }
  #content-keys-defender-phishing-on-hive-no-more-solution-for-all-frontends code {
    background: white;
  }
  #content-keys-defender-phishing-on-hive-no-more-solution-for-all-frontends a {
    border-bottom: 1px solid #444444; color: #444444; text-decoration: none;
  }
  #content-keys-defender-phishing-on-hive-no-more-solution-for-all-frontends a:hover {
    border-bottom: 0;
  }
  #content-keys-defender-phishing-on-hive-no-more-solution-for-all-frontends h1 {
    font-size: 2.2em;
  }
  #content-keys-defender-phishing-on-hive-no-more-solution-for-all-frontends h2, h3, h4, h5 {
    margin-bottom: 0;
  }
  #content-keys-defender-phishing-on-hive-no-more-solution-for-all-frontends header small {
    color: #999;
    font-size: 50%;
  }
  #content-keys-defender-phishing-on-hive-no-more-solution-for-all-frontends img {
    max-width: 100%;
  }
&lt;/style&gt;

&lt;hr /&gt;
&lt;p&gt;
  See: &lt;a href=&quot;https://peakd.com/hive-139531/@keys-defender/phishing-on-hive-no-more-solution-for-all-frontends&quot;&gt;Phishing on Hive? No more. Solution for all Frontends.&lt;/a&gt;
  by
  &lt;a href=&quot;https://hive.blog/@keys-defender&quot;&gt;@keys-defender&lt;/a&gt;
&lt;/p&gt;

&lt;/div&gt;</content><author><name>keys-defender</name></author><category term="news" /><category term="devops" /><category term="security" /><summary type="html">One &amp;nbsp; script &amp;nbsp; to rule them all.. https://files.peakd.com/file/peakd-hive/keys-defender/23uEx3ge6ahMEAqbNu2KxP3EvamdsBroMaGSYrkDRPsGUHc7sjst6GKUUPo7MoFq9YGo6.png ----- Problem: In the past few weeks Hive has been plagued by phishing campaigns and some users lost access to their account or lost their funds. This is nothing new and has been going on for years on ~~Steem~~ and Hive. https://files.peakd.com/file/peakd-hive/keys-defender/23ynfLMyQ7Cub6dZ3Dkgy3ibKnFc8DCeGkhiMRJjhBRtEVFTGBzSfAF8SxegpyrQM4eg4.png To make things worse, registrars are not quick enough to take down phishing domains.. https://files.peakd.com/file/peakd-hive/keys-defender/243MPzTbbyDU6fHr6SnsBBTJ3VSMBJk9KgL2At8pnztriEQmsYMWGAMwgEApYdzvTfB5e.png src It is time that the Hive community tries to mitigate this issue on their own. Potential solution:Use a plug-and-play universal script (or a modified copy of it) that all Hive frontends can integrate to block phishing links in a timely matter. As soon as a phishing campaign starts on Hive and the attacker's domain is spotted and added to a blacklist API (eg. @spaminator's), the universal script would immediately block the attack in all Hive frontends and at the same time leave the User Experience unaffected. As a matter of fact, this is what I worked on in the past few days. - Here is the universal script for all Hive frontends: https://github.com/keys-defender/hive/blob/master/scripts/universal-bridge-against-phishing.js - Here is a demo website with my script in action: https://keys-defender.github.io/hive *NOTE* : the demo page will not be sanitized by my universal script until you: 1. Navigate to https://cors-anywhere.herokuapp.com/corsdemo and click on the &quot;Request temporary access&quot; button, 2. refresh the demo website. I have proved my universal script working on: &amp;nbsp; &amp;nbsp; &amp;nbsp;(see screenshots down below) HIVE.BLOG - https://hive.blog - @blocktrades @quochuy PEAKD - https://peakd.com - @asgarth, @jarvie LEOFINANCE - https://leofinance.io - @khaleelkazi ECENCY - https://ecency.com - @good-karma 3SPEAK - https://3speak.tv - @theycallmedan, @starkerz D.BUZZ - https://d.buzz - @chrisrice STEM social - https://stem.openhive.network - @lemouth STEM geeks - https://stemgeeks.net - @enforcer48 ? It would be great if each Hive frontend maintaner could review it and adapt it to their needs (if they need to -- I tested this script in all major Hive frontends already and it did not seem to have unwanted side effects). I highly recommend though that the integration is thoroughly regression tested before it's used in production. FYI also for: AnonRamblings @emrebeyler, DTube @heimindanger, Engage @arcange, Engrave @engrave, @nicniezgrublem, Hive-db @jesta, Hive-Engine @aggroed, Hiveblockexplorer @penguinpablo, Hiveblocks @roadscape, HiveEngine @holger80, Quello @tobias-g, ... \+ other project maintaners: @yabapmatt, @stoodkev, @aggroed, @louis88, @mahdiyari, @acidyo, @fbslo, @rishi556. (apologies for the mass tag) I believe that blocking phishing campaigns in an unified way in all frontends is possible despite the different tech stacks in use. It does no matter which framework the website maintainer used to develop their website (eg. ReactJS, AngularJS, VueJS, JQuery, vanilla JS, etc). Using JS global overrides it is possible to prevent users from falling victim of phishing. What does my script do? It uses the native APIs offered by all browsers in order to immediately block phishing links and images in all Hive frontends as soon as they are discovered and published into the blacklist. - Any known phishing link in the UI will be red and strikethrough-ed. Furthermore if you click on a known phishing link you'll see an alert telling you that it's phishing and it won't allow you to navigate to the phishing domain from the Hive frontend. - Any image that is marked as a phishing attempt (eg. an image with some text saying &quot;claim your $ 1000 in tokens at www.justinscam.com&quot;) will not be displayed in any frontend that uses my script (or a variant of it) as soon as its URL is published into the public blacklist. More details will follow towards the end of the post to list all the native features of the browser that are hardened by my script in order to prevent phishing (ie. iframes, scripts, window open, XHR requests, Fetch api). Usage: How difficult is it to try out my universal script in your Hive-powered website? Integrating this script is very **straightforward**. In order to integrate it, simply add a ` See: Phishing on Hive? No more. Solution for all Frontends. by @keys-defender</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://files.peakd.com/file/peakd-hive/keys-defender/23uEx3ge6ahMEAqbNu2KxP3EvamdsBroMaGSYrkDRPsGUHc7sjst6GKUUPo7MoFq9YGo6.png" /><media:content medium="image" url="https://files.peakd.com/file/peakd-hive/keys-defender/23uEx3ge6ahMEAqbNu2KxP3EvamdsBroMaGSYrkDRPsGUHc7sjst6GKUUPo7MoFq9YGo6.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Devportal Python Tutorial Review Complete</title><link href="https://hivedocs.info/howto/beem/python/2021/03/16/devportal-python-tutorial-review-complete.html" rel="alternate" type="text/html" title="Devportal Python Tutorial Review Complete" /><published>2021-03-16T22:05:21-07:00</published><updated>2021-03-16T22:05:21-07:00</updated><id>https://hivedocs.info/howto/beem/python/2021/03/16/devportal-python-tutorial-review-complete</id><content type="html" xml:base="https://hivedocs.info/howto/beem/python/2021/03/16/devportal-python-tutorial-review-complete.html">&lt;div id=&quot;content-inertia-devportal-python-tutorial-review-complete&quot;&gt;&lt;div class=&quot;pull-right&quot;&gt;
  &lt;img src=&quot;https://developers.hive.io/images/sticker.png&quot; /&gt;
&lt;/div&gt;

Prior to this merge, the bulk of my work was on [the javascript tutorials](https://peakd.com/hive/@inertia/hive-developer-portal-update-language-tutorials-et-al).  After my proposal got funded, I was able to [dig deep into the API Definitions and begin the python tutorials](https://peakd.com/hive-139531/@inertia/hive-devportal-update-sdk-references-python-tutorials).

For this merge, I've continued to spend the last few weeks on the python tutorials.  There are 30+ tutorials ranging from how to vote to account recovery.

Most of them were written with the previous chain in mind.  As such, they all used the previous chain's &quot;official&quot; python library.  Now, they all use [beem](http://beem.readthedocs.io/) instead, because beem rocks.

Anyway, here are all the newly audited python tutorials:

http://developers-staging.hive.io/tutorials/#tutorials-python

Related merge:

https://gitlab.syncad.com/hive/devportal/-/merge_requests/66

This update also tracks the new Bridge API changes (Hivemind/Communities), [thanks to the information provided by openapi](https://peakd.com/openapi/@inertia/questions-about-hivemind-api-documentation).

---

One of the python tutorials I'm particularly proud of is the one about delegations:

https://developers.hive.io/tutorials-python/delegate_power.html

Before my changes, it was technically correct, which I admit is [the best kind of correct](https://www.youtube.com/watch?v=hou0lU8WMgo).  But in addition, I wanted to clarify in the tutorial, and in code examples, that it's best to present HIVE Power to the end-user, not VESTS.

While it's fine to write scripts that deal in VESTS, most people never encounter them.  Not only that, but the amount of HIVE Power vs. VESTS always changes.  Like, right now, at the time of writing, 527.344 HIVE Power is worth 1,000,000 VESTS.  That's not a very intuitive conversion, especially since it changes continuously.

&lt;center&gt;&lt;img src=&quot;https://files.peakd.com/file/peakd-hive/inertia/23uQvSia5q4QnBBeK9pYZ7bFsUawG5UWsdcFpygaxX4RQ9T9QEyB1PAE8Nm5HzLgj6a8c.jpg&quot; /&gt;&lt;/center&gt;

So I added steps to present VESTS as HIVE Power and capture HIVE Power inputs and turn them back to VESTS, since the blockchain wants to deal in VESTS.

That's just an example of the kinds of principles and best practices I want to enforce in the devportal, as much as possible.

&lt;center&gt;
  &lt;a href=&quot;https://xkcd.com/353/&quot;&gt;
    &lt;img src=&quot;https://imgs.xkcd.com/comics/python.png&quot; /&gt;
  &lt;/a&gt;
  &lt;sup&gt;I wrote 20 short programs in Python yesterday.  It was wonderful.  Perl, I'm leaving you.&lt;/sup&gt;
&lt;/center&gt;

Next, I'll do the same review audit for the ruby tutorials, but somehow I don't think that will take as long.

---

If you'd like to vote for my current proposal:

[https://hivesigner.com/sign/update-proposal-votes?proposal_ids=[151]&amp;amp;approve=true](https://hivesigner.com/sign/update-proposal-votes?proposal_ids=[151]&amp;amp;approve=true)

Also see: https://peakd.com/proposals/inertia&lt;/div&gt;
&lt;script crossorigin=&quot;anonymous&quot; integrity=&quot;sha256-4+XzXVhsDmqanXGHaHvgh1gMQKX40OUvDEBTu8JcmNs=&quot; src=&quot;https://code.jquery.com/jquery-3.5.1.slim.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://unpkg.com/steem-content-renderer&quot;&gt;&lt;/script&gt;

&lt;script&gt;
  $(document).ready(function() {
    try {
      const renderer = new SteemContentRenderer.DefaultRenderer({
        baseUrl: &quot;https://hive.blog/&quot;,
        breaks: true,
        skipSanitization: false,
        allowInsecureScriptTags: false,
        addNofollowToLinks: true,
        doNotShowImages: false,
        ipfsPrefix: &quot;&quot;,
        assetsWidth: 640,
        assetsHeight: 480,
        imageProxyFn: (url) =&gt; url,
        usertagUrlFn: (account) =&gt; &quot;/@inertia&quot;,
        hashtagUrlFn: (hashtag) =&gt; &quot;/devportal-python-tutorial-review-complete&quot;,
        isLinkSafeFn: (url) =&gt; true,
      });
      
      const inputElem = $('#content-inertia-devportal-python-tutorial-review-complete').html();
      const outputElem = $('#content-inertia-devportal-python-tutorial-review-complete');
      const output = renderer.render(inputElem);
      
      outputElem.html(output);
    } catch(e) {
      console.log(e);
    }
  });
&lt;/script&gt;

&lt;style&gt;
  #content-inertia-devportal-python-tutorial-review-complete {
    padding: 0 3rem;
    color: #444444;
    font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Helvetica, Arial, sans-serif;
    font-size: 16px;
    line-height: 1.8;
    text-shadow: 0 1px 0 #ffffff;
    padding: 0.5rem;
  }
  #content-inertia-devportal-python-tutorial-review-complete code {
    background: white;
  }
  #content-inertia-devportal-python-tutorial-review-complete a {
    border-bottom: 1px solid #444444; color: #444444; text-decoration: none;
  }
  #content-inertia-devportal-python-tutorial-review-complete a:hover {
    border-bottom: 0;
  }
  #content-inertia-devportal-python-tutorial-review-complete h1 {
    font-size: 2.2em;
  }
  #content-inertia-devportal-python-tutorial-review-complete h2, h3, h4, h5 {
    margin-bottom: 0;
  }
  #content-inertia-devportal-python-tutorial-review-complete header small {
    color: #999;
    font-size: 50%;
  }
  #content-inertia-devportal-python-tutorial-review-complete img {
    max-width: 100%;
  }
&lt;/style&gt;

&lt;hr /&gt;

&lt;p&gt;
  See: &lt;a href=&quot;https://peakd.com/hive-139531/@inertia/devportal-python-tutorial-review-complete&quot;&gt;Devportal Python Tutorial Review Complete&lt;/a&gt;
  by
  &lt;a href=&quot;https://hive.blog/@inertia&quot;&gt;@inertia&lt;/a&gt;
&lt;/p&gt;</content><author><name>inertia</name></author><category term="howto" /><category term="beem" /><category term="python" /><summary type="html">Prior to this merge, the bulk of my work was on [the javascript tutorials](https://peakd.com/hive/@inertia/hive-developer-portal-update-language-tutorials-et-al). After my proposal got funded, I was able to [dig deep into the API Definitions and begin the python tutorials](https://peakd.com/hive-139531/@inertia/hive-devportal-update-sdk-references-python-tutorials). For this merge, I've continued to spend the last few weeks on the python tutorials. There are 30+ tutorials ranging from how to vote to account recovery. Most of them were written with the previous chain in mind. As such, they all used the previous chain's &quot;official&quot; python library. Now, they all use [beem](http://beem.readthedocs.io/) instead, because beem rocks. Anyway, here are all the newly audited python tutorials: http://developers-staging.hive.io/tutorials/#tutorials-python Related merge: https://gitlab.syncad.com/hive/devportal/-/merge_requests/66 This update also tracks the new Bridge API changes (Hivemind/Communities), [thanks to the information provided by openapi](https://peakd.com/openapi/@inertia/questions-about-hivemind-api-documentation). --- One of the python tutorials I'm particularly proud of is the one about delegations: https://developers.hive.io/tutorials-python/delegate_power.html Before my changes, it was technically correct, which I admit is [the best kind of correct](https://www.youtube.com/watch?v=hou0lU8WMgo). But in addition, I wanted to clarify in the tutorial, and in code examples, that it's best to present HIVE Power to the end-user, not VESTS. While it's fine to write scripts that deal in VESTS, most people never encounter them. Not only that, but the amount of HIVE Power vs. VESTS always changes. Like, right now, at the time of writing, 527.344 HIVE Power is worth 1,000,000 VESTS. That's not a very intuitive conversion, especially since it changes continuously. So I added steps to present VESTS as HIVE Power and capture HIVE Power inputs and turn them back to VESTS, since the blockchain wants to deal in VESTS. That's just an example of the kinds of principles and best practices I want to enforce in the devportal, as much as possible. I wrote 20 short programs in Python yesterday. It was wonderful. Perl, I'm leaving you. Next, I'll do the same review audit for the ruby tutorials, but somehow I don't think that will take as long. --- If you'd like to vote for my current proposal: [https://hivesigner.com/sign/update-proposal-votes?proposal_ids=[151]&amp;amp;approve=true](https://hivesigner.com/sign/update-proposal-votes?proposal_ids=[151]&amp;amp;approve=true) Also see: https://peakd.com/proposals/inertia See: Devportal Python Tutorial Review Complete by @inertia</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://developers.hive.io/images/sticker.png" /><media:content medium="image" url="https://developers.hive.io/images/sticker.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Hive Account Recovery - Major update and new User Interface</title><link href="https://hivedocs.info/tools/2021/03/16/hive-account-recovery-major-update-and-new-user-interface.html" rel="alternate" type="text/html" title="Hive Account Recovery - Major update and new User Interface" /><published>2021-03-16T15:26:24-07:00</published><updated>2021-03-16T15:26:24-07:00</updated><id>https://hivedocs.info/tools/2021/03/16/hive-account-recovery-major-update-and-new-user-interface</id><content type="html" xml:base="https://hivedocs.info/tools/2021/03/16/hive-account-recovery-major-update-and-new-user-interface.html">&lt;div id=&quot;content-arcange-hive-account-recovery-major-update-and-new-user-interface&quot;&gt;&lt;center&gt;![](https://i.imgur.com/bVz67Yj.png)&lt;/center&gt;

Last week, I deployed an [update to the Hive Recovery service](/hive-139531/@arcange/hive-account-recovery-update). Hive Recovery is a service that runs continuously and on its own to help you secure and recover your account if it were to be compromised.

The latest wave of phishing currently raging and the growing number of accounts that have been hacked recently make the recovery process more than topical.

I recently had to provide assistance to users who wanted to change their recovery account. It allowed me to realize how the recovery procedure can seem complex for some. On the other hand, it's always a good thing to review your basics, the things that you (think you) have mastered and that seem obvious to you but not to others.

This previous update allowed me to dive back into the code and the associated process of recovering accounts and I realized that I was not fully satisfied with the proposed solution and that it could still be greatly improved, mainly at the user interface level. It also needed better edge cases and error handling and better feedback to users.

Therefore, I decided to go back to the drawing board and redesign it to transform what may seem complex for users to achieve into something simple and intuitive.

### Introducing Hive Recovery v2.0

The new [**Hive Recovery web page**](https://tools.hivechain.app/recovery) has been radically simplified and now clearly reflects the 3 steps associated with the Hive account recovery process:

![](https://i.imgur.com/im6VOdS.png)

1. You set @hive.recovery as your trusted account recovery partner.
2. Should your account be compromised, you request @hive.recovery to initiate the recovery process
3. Once @hive.recovery has done so, you confirm and finalize the process.

I will not provide you here with all the details regarding the use of this brand new recovery UI. It is available in the updated [Hive Recovery User Guide](/hive/@hive.recovery/userguide). Better to avoid turning this post into a wall of text and pictures. Anyway, here are a few screenshots of the new user interface.

### A quick overview of the recovery process

**Navigate to https://tools.hivechain.app/recovery**

The first thing to do is to enter your username (without the @) and hit enter or click on the account check button. If the account name is valid, the change recovery account button will light up and allow you to click on it.

![](https://i.imgur.com/ZTyY1Z0.png)

&amp;gt; **Note:** If you have already set @hive.recovery as your recovery account, the button will turn green. You can go to the next step or perform this step again if you want to change your recovery settings.

#### 1. Changing your recovery account

After clicking on the &quot;Change Recovery Account&quot; button, the following form will be displayed:

![](https://i.imgur.com/HUi2s0H.png)

Refer to the [Hive Recovery User Guide](/hive/@hive.recovery/userguide) for more information on how to fill the form and perform this step.

Once you have completed the first step, you will have to wait for 30 days before @hive.recovery actually becomes your recovery account. 

![](https://i.imgur.com/dZubbxc.png)

#### 2. Requesting for your recovery account

Should your account be compromised, head back to the [Hive Recovery website](https://tools.hivechain.app/recovery) and request @hive.recovery to initiate the recovery process. After validating your username, the first button should have turned to green (meaning @hive.recovery is now your recovery account) and the Request Recovery button should the page should be enabled

![](https://i.imgur.com/94vb8CG.png)
![](https://i.imgur.com/dYxb0iP.png)

Once again, refer to the [Hive Recovery User Guide](/hive/@hive.recovery/userguide) for more information on how to fill the form and what will happen when you perform this step.

@hive.recovery will initiate the recovery process. If all of the information you provided is correct, it should automatically take place within a few minutes.

![](https://i.imgur.com/OyRRJTY.png)

You now then have 24 hours to confirm the recovery of your account.

#### 3. Confirming the recovery of your account.

This is the very last step. You are now in control to finalize the recovery process

![](https://i.imgur.com/jIAKOCW.png)

After entering the required information and clicking on the confirmation button, the page will send a recovery confirmation to the blockchain, update your account keys and confirm that everything has gone well.

![](https://i.imgur.com/PQGSGu6.png)

Hooray, you are done and you have recovered your account!

### Please read the guide!

Check out the [Hive Recovery User Guide](/hive/@hive.recovery/userguide) for a complete and detailed description of the entire account recovery process.

The [Hive Recovery User Guide](/hive/@hive.recovery/userguide) also covers any questions you might have about security, privacy and how trusted it can be.

### Check your Recovery Account before it's too late

As mentioned at the beginning of this post, I have been led on several occasions to assist users who have their accounts hacked and who wanted to recover them.

Unfortunately, some of them still had @steem as their recovery account or had chosen an account that is no longer active or that does not respond to their request. What a pity that we can no longer help them

Therefore, check your recovery account and change it if the current one is inappropriate.

It's been a lot of work to create and improve this service and make the recovery process as easy as possible for all non-tech-savvy users. It would be a shame not to take advantage of it.

Take care of your account!

## &lt;center&gt;https://tools.hivechain.app/recovery&lt;/center&gt;
---
&lt;center&gt;

### Check out my apps and services
&lt;a href=&quot;/hive/@hive.engage/stay-connected-with-your-hive-audience-and-catch-attention&quot;&gt;&lt;img src=&quot;https://i.imgur.com/GiNJqlm.png&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;/@hivebuzz&quot;&gt;&lt;img src=&quot;https://i.imgur.com/B4UTun2.png&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;/@hivesql&quot;&gt;&lt;img src=&quot;https://i.imgur.com/EPN8RW6.png&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;/hive/@arcange/introducing-hive-account-recovery&quot;&gt;&lt;img src=&quot;https://i.imgur.com/6TWeW7V.png&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;/@hive.autoclaim&quot;&gt;&lt;img src=&quot;https://i.imgur.com/ih2pEOw.png&quot; /&gt;&lt;/a&gt;&lt;/center&gt;
&lt;center&gt;

### [Vote for me as a witness ![](https://i.imgur.com/2bi4SnT.png)](https://hivesigner.com/sign/account-witness-vote?witness=arcange&amp;amp;approve=1)&amp;lt;/div&amp;gt;
&lt;script crossorigin=&quot;anonymous&quot; integrity=&quot;sha256-4+XzXVhsDmqanXGHaHvgh1gMQKX40OUvDEBTu8JcmNs=&quot; src=&quot;https://code.jquery.com/jquery-3.5.1.slim.min.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;https://unpkg.com/steem-content-renderer&quot;&gt;&lt;/script&gt;
&lt;script&gt;
  $(document).ready(function() {
    try {
      const renderer = new SteemContentRenderer.DefaultRenderer({
        baseUrl: &quot;https://hive.blog/&quot;,
        breaks: true,
        skipSanitization: false,
        allowInsecureScriptTags: false,
        addNofollowToLinks: true,
        doNotShowImages: false,
        ipfsPrefix: &quot;&quot;,
        assetsWidth: 640,
        assetsHeight: 480,
        imageProxyFn: (url) =&gt; url,
        usertagUrlFn: (account) =&gt; &quot;/@arcange&quot;,
        hashtagUrlFn: (hashtag) =&gt; &quot;/hive-account-recovery-major-update-and-new-user-interface&quot;,
        isLinkSafeFn: (url) =&gt; true,
      });
      
      const inputElem = $('#content-arcange-hive-account-recovery-major-update-and-new-user-interface').html();
      const outputElem = $('#content-arcange-hive-account-recovery-major-update-and-new-user-interface');
      const output = renderer.render(inputElem);
      
      outputElem.html(output);
    } catch(e) {
      console.log(e);
    }
  });
&lt;/script&gt;
&lt;style&gt;
  #content-arcange-hive-account-recovery-major-update-and-new-user-interface {
    padding: 0 3rem;
    color: #444444;
    font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Helvetica, Arial, sans-serif;
    font-size: 16px;
    line-height: 1.8;
    text-shadow: 0 1px 0 #ffffff;
    padding: 0.5rem;
  }
  #content-arcange-hive-account-recovery-major-update-and-new-user-interface code {
    background: white;
  }
  #content-arcange-hive-account-recovery-major-update-and-new-user-interface a {
    border-bottom: 1px solid #444444; color: #444444; text-decoration: none;
  }
  #content-arcange-hive-account-recovery-major-update-and-new-user-interface a:hover {
    border-bottom: 0;
  }
  #content-arcange-hive-account-recovery-major-update-and-new-user-interface h1 {
    font-size: 2.2em;
  }
  #content-arcange-hive-account-recovery-major-update-and-new-user-interface h2, h3, h4, h5 {
    margin-bottom: 0;
  }
  #content-arcange-hive-account-recovery-major-update-and-new-user-interface header small {
    color: #999;
    font-size: 50%;
  }
  #content-arcange-hive-account-recovery-major-update-and-new-user-interface img {
    max-width: 100%;
  }
&lt;/style&gt;

&lt;hr /&gt;
&lt;p&gt;
  See: &lt;a href=&quot;https://peakd.com/hive-139531/@arcange/hive-account-recovery-major-update-and-new-user-interface&quot;&gt;Hive Account Recovery - Major update and new User Interface&lt;/a&gt;
  by
  &lt;a href=&quot;https://hive.blog/@arcange&quot;&gt;@arcange&lt;/a&gt;
&lt;/p&gt;

&lt;/center&gt;&lt;/div&gt;</content><author><name>arcange</name></author><category term="tools" /><summary type="html">![](https://i.imgur.com/bVz67Yj.png) Last week, I deployed an [update to the Hive Recovery service](/hive-139531/@arcange/hive-account-recovery-update). Hive Recovery is a service that runs continuously and on its own to help you secure and recover your account if it were to be compromised. The latest wave of phishing currently raging and the growing number of accounts that have been hacked recently make the recovery process more than topical. I recently had to provide assistance to users who wanted to change their recovery account. It allowed me to realize how the recovery procedure can seem complex for some. On the other hand, it's always a good thing to review your basics, the things that you (think you) have mastered and that seem obvious to you but not to others. This previous update allowed me to dive back into the code and the associated process of recovering accounts and I realized that I was not fully satisfied with the proposed solution and that it could still be greatly improved, mainly at the user interface level. It also needed better edge cases and error handling and better feedback to users. Therefore, I decided to go back to the drawing board and redesign it to transform what may seem complex for users to achieve into something simple and intuitive. ### Introducing Hive Recovery v2.0 The new [**Hive Recovery web page**](https://tools.hivechain.app/recovery) has been radically simplified and now clearly reflects the 3 steps associated with the Hive account recovery process: ![](https://i.imgur.com/im6VOdS.png) 1. You set @hive.recovery as your trusted account recovery partner. 2. Should your account be compromised, you request @hive.recovery to initiate the recovery process 3. Once @hive.recovery has done so, you confirm and finalize the process. I will not provide you here with all the details regarding the use of this brand new recovery UI. It is available in the updated [Hive Recovery User Guide](/hive/@hive.recovery/userguide). Better to avoid turning this post into a wall of text and pictures. Anyway, here are a few screenshots of the new user interface. ### A quick overview of the recovery process **Navigate to https://tools.hivechain.app/recovery** The first thing to do is to enter your username (without the @) and hit enter or click on the account check button. If the account name is valid, the change recovery account button will light up and allow you to click on it. ![](https://i.imgur.com/ZTyY1Z0.png) &amp;gt; **Note:** If you have already set @hive.recovery as your recovery account, the button will turn green. You can go to the next step or perform this step again if you want to change your recovery settings. #### 1. Changing your recovery account After clicking on the &quot;Change Recovery Account&quot; button, the following form will be displayed: ![](https://i.imgur.com/HUi2s0H.png) Refer to the [Hive Recovery User Guide](/hive/@hive.recovery/userguide) for more information on how to fill the form and perform this step. Once you have completed the first step, you will have to wait for 30 days before @hive.recovery actually becomes your recovery account. ![](https://i.imgur.com/dZubbxc.png) #### 2. Requesting for your recovery account Should your account be compromised, head back to the [Hive Recovery website](https://tools.hivechain.app/recovery) and request @hive.recovery to initiate the recovery process. After validating your username, the first button should have turned to green (meaning @hive.recovery is now your recovery account) and the Request Recovery button should the page should be enabled ![](https://i.imgur.com/94vb8CG.png) ![](https://i.imgur.com/dYxb0iP.png) Once again, refer to the [Hive Recovery User Guide](/hive/@hive.recovery/userguide) for more information on how to fill the form and what will happen when you perform this step. @hive.recovery will initiate the recovery process. If all of the information you provided is correct, it should automatically take place within a few minutes. ![](https://i.imgur.com/OyRRJTY.png) You now then have 24 hours to confirm the recovery of your account. #### 3. Confirming the recovery of your account. This is the very last step. You are now in control to finalize the recovery process ![](https://i.imgur.com/jIAKOCW.png) After entering the required information and clicking on the confirmation button, the page will send a recovery confirmation to the blockchain, update your account keys and confirm that everything has gone well. ![](https://i.imgur.com/PQGSGu6.png) Hooray, you are done and you have recovered your account! ### Please read the guide! Check out the [Hive Recovery User Guide](/hive/@hive.recovery/userguide) for a complete and detailed description of the entire account recovery process. The [Hive Recovery User Guide](/hive/@hive.recovery/userguide) also covers any questions you might have about security, privacy and how trusted it can be. ### Check your Recovery Account before it's too late As mentioned at the beginning of this post, I have been led on several occasions to assist users who have their accounts hacked and who wanted to recover them. Unfortunately, some of them still had @steem as their recovery account or had chosen an account that is no longer active or that does not respond to their request. What a pity that we can no longer help them Therefore, check your recovery account and change it if the current one is inappropriate. It's been a lot of work to create and improve this service and make the recovery process as easy as possible for all non-tech-savvy users. It would be a shame not to take advantage of it. Take care of your account! ## https://tools.hivechain.app/recovery --- ### Check out my apps and services ### [Vote for me as a witness ![](https://i.imgur.com/2bi4SnT.png)](https://hivesigner.com/sign/account-witness-vote?witness=arcange&amp;amp;approve=1)&amp;lt;/div&amp;gt; See: Hive Account Recovery - Major update and new User Interface by @arcange</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://i.imgur.com/bVz67Yj.png" /><media:content medium="image" url="https://i.imgur.com/bVz67Yj.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>