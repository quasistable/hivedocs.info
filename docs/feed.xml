<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://hivedocs.info/feed.xml" rel="self" type="application/atom+xml" /><link href="https://hivedocs.info/" rel="alternate" type="text/html" /><updated>2021-05-06T10:04:13-07:00</updated><id>https://hivedocs.info/feed.xml</id><title type="html">Hive Chain Documentation</title><subtitle>Your resource for various levels of Hive Documentation.</subtitle><author><name>site curated by: @inertia</name></author><entry><title type="html">HiveSQL Update - New Status Page</title><link href="https://hivedocs.info/news/sql/database/2021/05/06/hivesql-status.html" rel="alternate" type="text/html" title="HiveSQL Update - New Status Page" /><published>2021-05-06T05:32:57-07:00</published><updated>2021-05-06T05:32:57-07:00</updated><id>https://hivedocs.info/news/sql/database/2021/05/06/hivesql-status</id><content type="html" xml:base="https://hivedocs.info/news/sql/database/2021/05/06/hivesql-status.html">&lt;div id=&quot;content-arcange-hivesql-status&quot;&gt;![](https://i.imgur.com/HbmjGRG.png)

Every day, HiveSQL provides its services to dozens of users and (d)Apps that hammer the server with thousands of queries. At the same time, it also has to process all the new blocks, split the data into different tables, update indexes, update non-transactional tables, etc…

**HiveSQL is close to real-time synced with the blockchain** for transactional tables. But with all this work to do and the ever-growing number of transactions per day, it sometimes happens that it struggles a bit to sustain the pace, especially when it has to process some resource-intensive queries at peak time.

So, it can sometimes happen that HiveSQL is a little late by a few seconds on the blockchain.

### How to check if HiveSQL in sync with the blockchain?

To enable users to monitor HiveSQL, I created a new [HiveSQL status page](https://hivesql/status).
The page is available from [HiveSQL website](https://hivesql.io) or using the following link:

**https://hivesql.io/status**

The page will display the following information:

![](https://i.imgur.com/PyJqK0W.png)

* The status of the server:
***Online:*** the server is running and available for users to issue queries
***Offline:*** the server has been shut down for maintenance
* The last irreversible block number from the blockchain
* The last block number in the database
* The sync difference between the blockchain and the database

### Detailed tables information 

The status page will also display some information for each table into the database:

* the name of the table
* the number of rows into the table
* the size of the table (data + indexes)

This will give you a good idea of the amount of data HiveSQL has to manage (more than 2TB as of today) and how many rows each table contains.

As you will see, some tables contain several hundred million records. The `Transactions` table even contains **over 1.365 billion rows**!

This is why it is important to carefully write your SQL queries and optimize them. It is a subject on which I will come back later.

Meantime, enjoy this new monitoring tool.

## Support

If you have any questions or remarks, support is provided on the [HiveSQL Discord Channel](https://discord.gg/kyEFDfT).

Thank you for reading.

---
**Let's keep HiveSQL free to use - Support its proposals**!
|HiveSQL|HiveBuzz|
|-|-|
|[Vote for the proposal on PeakD](https://peakd.com/me/proposals/138)&lt;br /&gt;[Vote for the proposal on Ecency](https://ecency.com/proposals/138)&lt;br /&gt;[Vote for the proposal using HiveSigner](https://hivesigner.com/sign/update_proposal_votes?proposal_ids=%5B%22138%22%5D&amp;amp;approve=true)|[Vote for the proposal on PeakD](https://peakd.com/me/proposals/147)&lt;br /&gt;[Vote for the proposal on Ecency](https://ecency.com/proposals/147)&lt;br /&gt;[Vote for the proposal using HiveSigner](https://hivesigner.com/sign/update_proposal_votes?proposal_ids=%5B%22147%22%5D&amp;amp;approve=true)|

---
&lt;center&gt;

### Check out my apps and services
&lt;a href=&quot;/hive/@hive.engage/stay-connected-with-your-hive-audience-and-catch-attention&quot;&gt;&lt;img src=&quot;https://i.imgur.com/GiNJqlm.png&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;/@hivebuzz&quot;&gt;&lt;img src=&quot;https://i.imgur.com/B4UTun2.png&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;/@hivesql&quot;&gt;&lt;img src=&quot;https://i.imgur.com/EPN8RW6.png&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;/hive/@arcange/introducing-hive-account-recovery&quot;&gt;&lt;img src=&quot;https://i.imgur.com/6TWeW7V.png&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;/@hive.autoclaim&quot;&gt;&lt;img src=&quot;https://i.imgur.com/ih2pEOw.png&quot; /&gt;&lt;/a&gt;&lt;/center&gt;
&lt;center&gt;

### [Vote for me as a witness ![](https://i.imgur.com/2bi4SnT.png)](https://hivesigner.com/sign/account-witness-vote?witness=arcange&amp;amp;approve=1)&amp;lt;/div&amp;gt;
&lt;script crossorigin=&quot;anonymous&quot; integrity=&quot;sha256-4+XzXVhsDmqanXGHaHvgh1gMQKX40OUvDEBTu8JcmNs=&quot; src=&quot;https://code.jquery.com/jquery-3.5.1.slim.min.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;https://unpkg.com/steem-content-renderer&quot;&gt;&lt;/script&gt;
&lt;!-- &lt;script src=&quot;https://cdn.jsdelivr.net/npm/hive-content-renderer/dist/hive-content-renderer.min.js&quot;&gt;&lt;/script&gt; --&gt;
&lt;script&gt;
  $(document).ready(function() {
    try {
      const renderer = new SteemContentRenderer.DefaultRenderer({
      // const renderer = new HiveContentRenderer({
        baseUrl: &quot;https://hive.blog/&quot;,
        breaks: true,
        skipSanitization: false,
        allowInsecureScriptTags: false,
        addNofollowToLinks: true,
        doNotShowImages: false,
        ipfsPrefix: &quot;&quot;,
        assetsWidth: 640,
        assetsHeight: 480,
        imageProxyFn: (url) =&gt; url,
        usertagUrlFn: (account) =&gt; &quot;/@arcange&quot;,
        hashtagUrlFn: (hashtag) =&gt; &quot;/hivesql-status&quot;,
        isLinkSafeFn: (url) =&gt; true,
      });
      
      const inputElem = $('#content-arcange-hivesql-status').html();
      const outputElem = $('#content-arcange-hivesql-status');
      const output = renderer.render(inputElem);
      
      outputElem.html(output);
    } catch(e) {
      console.log(e);
    }
  });
&lt;/script&gt;
&lt;style&gt;
  #content-arcange-hivesql-status {
    padding: 0 3rem;
    color: #444444;
    font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Helvetica, Arial, sans-serif;
    font-size: 16px;
    line-height: 1.8;
    text-shadow: 0 1px 0 #ffffff;
    padding: 0.5rem;
  }
  #content-arcange-hivesql-status code {
    background: white;
  }
  #content-arcange-hivesql-status a {
    border-bottom: 1px solid #444444; color: #444444; text-decoration: none;
  }
  #content-arcange-hivesql-status a:hover {
    border-bottom: 0;
  }
  #content-arcange-hivesql-status h1 {
    font-size: 2.2em;
  }
  #content-arcange-hivesql-status h2, h3, h4, h5 {
    margin-bottom: 0;
  }
  #content-arcange-hivesql-status header small {
    color: #999;
    font-size: 50%;
  }
  #content-arcange-hivesql-status img {
    max-width: 100%;
  }
&lt;/style&gt;

&lt;hr /&gt;
&lt;p&gt;
  See: &lt;a href=&quot;https://peakd.com/hive-139531/@arcange/hivesql-status&quot;&gt;HiveSQL Update - New Status Page&lt;/a&gt;
  by
  &lt;a href=&quot;https://hive.blog/@arcange&quot;&gt;@arcange&lt;/a&gt;
&lt;/p&gt;

&lt;/center&gt;&lt;/div&gt;</content><author><name>arcange</name></author><category term="news" /><category term="sql" /><category term="database" /><summary type="html">![](https://i.imgur.com/HbmjGRG.png) Every day, HiveSQL provides its services to dozens of users and (d)Apps that hammer the server with thousands of queries. At the same time, it also has to process all the new blocks, split the data into different tables, update indexes, update non-transactional tables, etc… **HiveSQL is close to real-time synced with the blockchain** for transactional tables. But with all this work to do and the ever-growing number of transactions per day, it sometimes happens that it struggles a bit to sustain the pace, especially when it has to process some resource-intensive queries at peak time. So, it can sometimes happen that HiveSQL is a little late by a few seconds on the blockchain. ### How to check if HiveSQL in sync with the blockchain? To enable users to monitor HiveSQL, I created a new [HiveSQL status page](https://hivesql/status). The page is available from [HiveSQL website](https://hivesql.io) or using the following link: **https://hivesql.io/status** The page will display the following information: ![](https://i.imgur.com/PyJqK0W.png) * The status of the server: ***Online:*** the server is running and available for users to issue queries ***Offline:*** the server has been shut down for maintenance * The last irreversible block number from the blockchain * The last block number in the database * The sync difference between the blockchain and the database ### Detailed tables information The status page will also display some information for each table into the database: * the name of the table * the number of rows into the table * the size of the table (data + indexes) This will give you a good idea of the amount of data HiveSQL has to manage (more than 2TB as of today) and how many rows each table contains. As you will see, some tables contain several hundred million records. The `Transactions` table even contains **over 1.365 billion rows**! This is why it is important to carefully write your SQL queries and optimize them. It is a subject on which I will come back later. Meantime, enjoy this new monitoring tool. ## Support If you have any questions or remarks, support is provided on the [HiveSQL Discord Channel](https://discord.gg/kyEFDfT). Thank you for reading. --- **Let's keep HiveSQL free to use - Support its proposals**! |HiveSQL|HiveBuzz| |-|-| |[Vote for the proposal on PeakD](https://peakd.com/me/proposals/138)[Vote for the proposal on Ecency](https://ecency.com/proposals/138)[Vote for the proposal using HiveSigner](https://hivesigner.com/sign/update_proposal_votes?proposal_ids=%5B%22138%22%5D&amp;amp;approve=true)|[Vote for the proposal on PeakD](https://peakd.com/me/proposals/147)[Vote for the proposal on Ecency](https://ecency.com/proposals/147)[Vote for the proposal using HiveSigner](https://hivesigner.com/sign/update_proposal_votes?proposal_ids=%5B%22147%22%5D&amp;amp;approve=true)| --- ### Check out my apps and services ### [Vote for me as a witness ![](https://i.imgur.com/2bi4SnT.png)](https://hivesigner.com/sign/account-witness-vote?witness=arcange&amp;amp;approve=1)&amp;lt;/div&amp;gt; See: HiveSQL Update - New Status Page by @arcange</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://i.imgur.com/HbmjGRG.png" /><media:content medium="image" url="https://i.imgur.com/HbmjGRG.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Direct RC delegations vs RC pools and tentative direct rc delegations spec</title><link href="https://hivedocs.info/news/core/development/2021/05/05/direct-rc-delegations-vs-rc-pools-and-tentative-direct-rc-delegations-spec.html" rel="alternate" type="text/html" title="Direct RC delegations vs RC pools and tentative direct rc delegations spec" /><published>2021-05-05T17:02:18-07:00</published><updated>2021-05-05T17:02:18-07:00</updated><id>https://hivedocs.info/news/core/development/2021/05/05/direct-rc-delegations-vs-rc-pools-and-tentative-direct-rc-delegations-spec</id><content type="html" xml:base="https://hivedocs.info/news/core/development/2021/05/05/direct-rc-delegations-vs-rc-pools-and-tentative-direct-rc-delegations-spec.html">&lt;div id=&quot;content-howo-direct-rc-delegations-vs-rc-pools-and-tentative-direct-rc-delegations-spec&quot;&gt;
![image.png](https://files.peakd.com/file/peakd-hive/howo/23xLL8qDDTTeLahePNVpwjjgTxQjQd5spVivJncMvRrCXw5iM6bhLMoTNsSrvbPyeKo2L.png)

Hello, 

First let's settle on the terms, when I say &quot;RC pools&quot;, it refers to the implementation where everyone can delegate to pools and then pools can delegate to users, with more notions like overdelegation (you can delegate more RC than there is available in the pool) etc, we'll get back to it later.
When I say &quot;direct RC delegations&quot;, it's enabling users to delegate RC directly from one to another instead. Which would remove all the compexity of RC pools while retaining most of its features

tl;dr:
Direct RC delegations = user to user RC delegation
RC pool = more feature complete version

In the recent [dev meeting](https://peakd.com/meeting/@howo/hive-core-developer-meeting-22) we discussed RC delegations/pools a bit. Basically there is some concerns from @blocktrades's team regarding the complexity of RC pools, both in terms of complexity (risk of unforseen edge cases or bugs) and performance (could cost too much in processing power/memory to node operators). This also comes from the fact the RC system while functional still has some kinks to be worked out, it could be dangerous to build a complex system on something that is not rock solid.

This post aims to start a discussion and discuss around the fact that maybe we don't need RC pools as simple rc delegations cover most of the use cases. 

## Proposed direct RC delegations feature Set

some more terms:
max rc is the maximum amount of RC that the account can have 
current RC is the amount of RC that the account currently have, current RC regenerates over time to match max RC if not used.

You can see the spec (and discussion from other core devs) here: https://gitlab.syncad.com/hive/hive/-/issues/152 
I very much encourage you to read the link before continuing.

Direct RC delegations are super straightworward, just delegate 50 RC, your account now loses 50 max RC and the user you delegate to has an extra 50 max RC, I say max RC, because RC regenerates, so if the user you delegate to uses the 50 rc, it will come back eventually.

Advantages are:

- Pretty easy to code (writting it from scratch and could be as fast or even faster as finishing RC pools)
- Very simple so very small performance and memory footprint, less bug risks
- Simple UX-wise and easy for front ends to implement 

## RC pools 

if you want to know how RC pools work look here : https://peakd.com/test/@howo/wanna-help-test-rc-delegations-heres-all-you-need-to-know
tl;dr:
With the RC pool implementation, everyone can contribute to a pool, then a pool can delegate to multiple accoutns, there is a notion of &quot;oversubscription&quot; meaning that you delegate &quot;drc&quot; or delegated RC to an user not actual RC, drc basically allow you to spend the RC that is inside of the pool at a 1:1 ratio, but if the pool is empty and you got 50 drc, you can't get any RC. The main advantage of this approach is:

- Multiple users can contribute to the same pool 
- You don't have to guess what the user will consume to distribute RC, you just allows people to use at most, x RC.
- Already coded, lots of tests but need further reviewed and tested in a proper testnet 

disadvantage is obviously added complexity both in the chain and UX-wise (with the slot system, read up on it int he post above) that may not be worth it.

## comparaison of various use cases 

### Account creation 

Probably the biggest use case for direct RC delegations/pools. We create an account and transfer RC to it so it can transact comfortably. Today this is done by delegating hive power, but HP has many problems namely abuse and limitations.

#### Direct RC delegations

Direct RC delegations cover this use case, it would be an almost drop-in replacement for hive power delegation, take how much hp you used to delegate to new users and replace this with RC.

Of course we run into issues when we want to do this more at scale where you have to give the maximum RC an account usually use so if everyone uses 30 RC, but bob uses 100 because he's so excited about the platform, bob would be stuck, although with RC being &quot;free&quot;, bob could ask for a second delegation via an &quot;RC faucet&quot; or something.

The second problem is that this implies that the account creation account has a lot of RC, so if you want to onboard 10k users, you may run into problems, and it would be complicated to coordinate with other whales who might want to help (because direct RC delegations delegations would require active authority, whales probably won't give that auth to allow for automatic direct RC delegations). Delegating delegated RC (a whale could delegate to an account creation service who would redelegate RC) is a no go I think because it creates a ton of new edge cases.

But it wouldn't be too hard to create a system where you &quot;trail&quot; delegations, so if you're a whale and you see a service delegating 30 RC, you can delegate 10 RC too on top of it. It would be pretty easy. But once again not easily automatable since it touches the active authority. 

Ultimately direct RC delegations would cover the use case as well as HP delegations, not the best but still a massive improvement IMHO.

While I'm at it, direct RC delegations could be done using posting auth to make it way easier to manage and automate everything, there is no technical limitations to this, interested to hear your thoughts. The only risk is that someone dapp could then empty the RC in your account and prevent you from transacting.

#### RC pools

RC pools cover this case as well, It doesn't run into the same issues as direct RC delegations you can delegate 100 RC to everyone and just let people use RC as they go, if everyone uses 30 out of their 100 that's fine, and bob won't be restricted. This would allow account creation services to be way less strict in the way they manage RC, they could delegate a lot of RC to make sure newcomers are never running out of RC when doing the first basic things (voting posts/posting etc) as long as the pools are flowing thanks to delegations to the pools themselves.

### Delegate to a user who doesn't have RC left 

This is IMHO, the second biggest use case for direct RC delegations, the user used up all of his RC and we want him to continue to use hive, he could request an RC deleations from any RC faucet (I expect those to pop up once direct RC delegations make it to the chain) or a friend to give him some RC. Right now this is covered by HP delegations but no such faucets really exist for obvious abuse reasons.

#### direct RC delegations

This is a case where direct RC delegations work great, pretty easy to send an extra 500 RC to a user if he asks for it, and then maybe remove it a month later. You still have the same pain points outlined in the account creation use case though:

- you are bound to run out of RC if you delegate too much, so you're forced to be more conservative in your delegations 
- Others can't &quot;fund&quot; you with RC to help you 

#### RC pools

While RC pools can do it and be great at it thank to the delegated RC system, there is an important caveat: with RC pools you cannot get RC from a pool unless you set a slot to point to it first, this means that you can end up in these awkward situations where you can't set a slot to get RC from a pool because you're out of RC and cannot get RC from a pool because you didn't set your slot to point to the pool.
Although this scenario is relatively unlikely because a set_slot operation is a custom_json which costs very little.

## conclusion:

I think both approaches are valid but I think the extra weight and risk on the chain of RC pools make me lean towards implementing direct RC delegations with posting auth (even though I'll have to redo everything haha) along with a tool for people to &quot;trail&quot; other people's delegations. The UX benefits are also non negligible.

What are your thoughts ?&lt;/div&gt;
&lt;script crossorigin=&quot;anonymous&quot; integrity=&quot;sha256-4+XzXVhsDmqanXGHaHvgh1gMQKX40OUvDEBTu8JcmNs=&quot; src=&quot;https://code.jquery.com/jquery-3.5.1.slim.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://unpkg.com/steem-content-renderer&quot;&gt;&lt;/script&gt;

&lt;!-- &lt;script src=&quot;https://cdn.jsdelivr.net/npm/hive-content-renderer/dist/hive-content-renderer.min.js&quot;&gt;&lt;/script&gt; --&gt;
&lt;script&gt;
  $(document).ready(function() {
    try {
      const renderer = new SteemContentRenderer.DefaultRenderer({
      // const renderer = new HiveContentRenderer({
        baseUrl: &quot;https://hive.blog/&quot;,
        breaks: true,
        skipSanitization: false,
        allowInsecureScriptTags: false,
        addNofollowToLinks: true,
        doNotShowImages: false,
        ipfsPrefix: &quot;&quot;,
        assetsWidth: 640,
        assetsHeight: 480,
        imageProxyFn: (url) =&gt; url,
        usertagUrlFn: (account) =&gt; &quot;/@howo&quot;,
        hashtagUrlFn: (hashtag) =&gt; &quot;/direct-rc-delegations-vs-rc-pools-and-tentative-direct-rc-delegations-spec&quot;,
        isLinkSafeFn: (url) =&gt; true,
      });
      
      const inputElem = $('#content-howo-direct-rc-delegations-vs-rc-pools-and-tentative-direct-rc-delegations-spec').html();
      const outputElem = $('#content-howo-direct-rc-delegations-vs-rc-pools-and-tentative-direct-rc-delegations-spec');
      const output = renderer.render(inputElem);
      
      outputElem.html(output);
    } catch(e) {
      console.log(e);
    }
  });
&lt;/script&gt;

&lt;style&gt;
  #content-howo-direct-rc-delegations-vs-rc-pools-and-tentative-direct-rc-delegations-spec {
    padding: 0 3rem;
    color: #444444;
    font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Helvetica, Arial, sans-serif;
    font-size: 16px;
    line-height: 1.8;
    text-shadow: 0 1px 0 #ffffff;
    padding: 0.5rem;
  }
  #content-howo-direct-rc-delegations-vs-rc-pools-and-tentative-direct-rc-delegations-spec code {
    background: white;
  }
  #content-howo-direct-rc-delegations-vs-rc-pools-and-tentative-direct-rc-delegations-spec a {
    border-bottom: 1px solid #444444; color: #444444; text-decoration: none;
  }
  #content-howo-direct-rc-delegations-vs-rc-pools-and-tentative-direct-rc-delegations-spec a:hover {
    border-bottom: 0;
  }
  #content-howo-direct-rc-delegations-vs-rc-pools-and-tentative-direct-rc-delegations-spec h1 {
    font-size: 2.2em;
  }
  #content-howo-direct-rc-delegations-vs-rc-pools-and-tentative-direct-rc-delegations-spec h2, h3, h4, h5 {
    margin-bottom: 0;
  }
  #content-howo-direct-rc-delegations-vs-rc-pools-and-tentative-direct-rc-delegations-spec header small {
    color: #999;
    font-size: 50%;
  }
  #content-howo-direct-rc-delegations-vs-rc-pools-and-tentative-direct-rc-delegations-spec img {
    max-width: 100%;
  }
&lt;/style&gt;

&lt;hr /&gt;

&lt;p&gt;
  See: &lt;a href=&quot;https://peakd.com/rc/@howo/direct-rc-delegations-vs-rc-pools-and-tentative-direct-rc-delegations-spec&quot;&gt;Direct RC delegations vs RC pools and tentative direct rc delegations spec&lt;/a&gt;
  by
  &lt;a href=&quot;https://hive.blog/@howo&quot;&gt;@howo&lt;/a&gt;
&lt;/p&gt;</content><author><name>howo</name></author><category term="news" /><category term="core" /><category term="development" /><summary type="html">![image.png](https://files.peakd.com/file/peakd-hive/howo/23xLL8qDDTTeLahePNVpwjjgTxQjQd5spVivJncMvRrCXw5iM6bhLMoTNsSrvbPyeKo2L.png) Hello, First let's settle on the terms, when I say &quot;RC pools&quot;, it refers to the implementation where everyone can delegate to pools and then pools can delegate to users, with more notions like overdelegation (you can delegate more RC than there is available in the pool) etc, we'll get back to it later. When I say &quot;direct RC delegations&quot;, it's enabling users to delegate RC directly from one to another instead. Which would remove all the compexity of RC pools while retaining most of its features tl;dr: Direct RC delegations = user to user RC delegation RC pool = more feature complete version In the recent [dev meeting](https://peakd.com/meeting/@howo/hive-core-developer-meeting-22) we discussed RC delegations/pools a bit. Basically there is some concerns from @blocktrades's team regarding the complexity of RC pools, both in terms of complexity (risk of unforseen edge cases or bugs) and performance (could cost too much in processing power/memory to node operators). This also comes from the fact the RC system while functional still has some kinks to be worked out, it could be dangerous to build a complex system on something that is not rock solid. This post aims to start a discussion and discuss around the fact that maybe we don't need RC pools as simple rc delegations cover most of the use cases. ## Proposed direct RC delegations feature Set some more terms: max rc is the maximum amount of RC that the account can have current RC is the amount of RC that the account currently have, current RC regenerates over time to match max RC if not used. You can see the spec (and discussion from other core devs) here: https://gitlab.syncad.com/hive/hive/-/issues/152 I very much encourage you to read the link before continuing. Direct RC delegations are super straightworward, just delegate 50 RC, your account now loses 50 max RC and the user you delegate to has an extra 50 max RC, I say max RC, because RC regenerates, so if the user you delegate to uses the 50 rc, it will come back eventually. Advantages are: - Pretty easy to code (writting it from scratch and could be as fast or even faster as finishing RC pools) - Very simple so very small performance and memory footprint, less bug risks - Simple UX-wise and easy for front ends to implement ## RC pools if you want to know how RC pools work look here : https://peakd.com/test/@howo/wanna-help-test-rc-delegations-heres-all-you-need-to-know tl;dr: With the RC pool implementation, everyone can contribute to a pool, then a pool can delegate to multiple accoutns, there is a notion of &quot;oversubscription&quot; meaning that you delegate &quot;drc&quot; or delegated RC to an user not actual RC, drc basically allow you to spend the RC that is inside of the pool at a 1:1 ratio, but if the pool is empty and you got 50 drc, you can't get any RC. The main advantage of this approach is: - Multiple users can contribute to the same pool - You don't have to guess what the user will consume to distribute RC, you just allows people to use at most, x RC. - Already coded, lots of tests but need further reviewed and tested in a proper testnet disadvantage is obviously added complexity both in the chain and UX-wise (with the slot system, read up on it int he post above) that may not be worth it. ## comparaison of various use cases ### Account creation Probably the biggest use case for direct RC delegations/pools. We create an account and transfer RC to it so it can transact comfortably. Today this is done by delegating hive power, but HP has many problems namely abuse and limitations. #### Direct RC delegations Direct RC delegations cover this use case, it would be an almost drop-in replacement for hive power delegation, take how much hp you used to delegate to new users and replace this with RC. Of course we run into issues when we want to do this more at scale where you have to give the maximum RC an account usually use so if everyone uses 30 RC, but bob uses 100 because he's so excited about the platform, bob would be stuck, although with RC being &quot;free&quot;, bob could ask for a second delegation via an &quot;RC faucet&quot; or something. The second problem is that this implies that the account creation account has a lot of RC, so if you want to onboard 10k users, you may run into problems, and it would be complicated to coordinate with other whales who might want to help (because direct RC delegations delegations would require active authority, whales probably won't give that auth to allow for automatic direct RC delegations). Delegating delegated RC (a whale could delegate to an account creation service who would redelegate RC) is a no go I think because it creates a ton of new edge cases. But it wouldn't be too hard to create a system where you &quot;trail&quot; delegations, so if you're a whale and you see a service delegating 30 RC, you can delegate 10 RC too on top of it. It would be pretty easy. But once again not easily automatable since it touches the active authority. Ultimately direct RC delegations would cover the use case as well as HP delegations, not the best but still a massive improvement IMHO. While I'm at it, direct RC delegations could be done using posting auth to make it way easier to manage and automate everything, there is no technical limitations to this, interested to hear your thoughts. The only risk is that someone dapp could then empty the RC in your account and prevent you from transacting. #### RC pools RC pools cover this case as well, It doesn't run into the same issues as direct RC delegations you can delegate 100 RC to everyone and just let people use RC as they go, if everyone uses 30 out of their 100 that's fine, and bob won't be restricted. This would allow account creation services to be way less strict in the way they manage RC, they could delegate a lot of RC to make sure newcomers are never running out of RC when doing the first basic things (voting posts/posting etc) as long as the pools are flowing thanks to delegations to the pools themselves. ### Delegate to a user who doesn't have RC left This is IMHO, the second biggest use case for direct RC delegations, the user used up all of his RC and we want him to continue to use hive, he could request an RC deleations from any RC faucet (I expect those to pop up once direct RC delegations make it to the chain) or a friend to give him some RC. Right now this is covered by HP delegations but no such faucets really exist for obvious abuse reasons. #### direct RC delegations This is a case where direct RC delegations work great, pretty easy to send an extra 500 RC to a user if he asks for it, and then maybe remove it a month later. You still have the same pain points outlined in the account creation use case though: - you are bound to run out of RC if you delegate too much, so you're forced to be more conservative in your delegations - Others can't &quot;fund&quot; you with RC to help you #### RC pools While RC pools can do it and be great at it thank to the delegated RC system, there is an important caveat: with RC pools you cannot get RC from a pool unless you set a slot to point to it first, this means that you can end up in these awkward situations where you can't set a slot to get RC from a pool because you're out of RC and cannot get RC from a pool because you didn't set your slot to point to the pool. Although this scenario is relatively unlikely because a set_slot operation is a custom_json which costs very little. ## conclusion: I think both approaches are valid but I think the extra weight and risk on the chain of RC pools make me lean towards implementing direct RC delegations with posting auth (even though I'll have to redo everything haha) along with a tool for people to &quot;trail&quot; other people's delegations. The UX benefits are also non negligible. What are your thoughts ? See: Direct RC delegations vs RC pools and tentative direct rc delegations spec by @howo</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://files.peakd.com/file/peakd-hive/howo/23xLL8qDDTTeLahePNVpwjjgTxQjQd5spVivJncMvRrCXw5iM6bhLMoTNsSrvbPyeKo2L.png" /><media:content medium="image" url="https://files.peakd.com/file/peakd-hive/howo/23xLL8qDDTTeLahePNVpwjjgTxQjQd5spVivJncMvRrCXw5iM6bhLMoTNsSrvbPyeKo2L.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">RocketChat Webhooks Are Powerful</title><link href="https://hivedocs.info/news/projects/rocketchat/2021/05/05/rocketchat-webhooks-are-powerufl.html" rel="alternate" type="text/html" title="RocketChat Webhooks Are Powerful" /><published>2021-05-05T12:08:54-07:00</published><updated>2021-05-05T12:08:54-07:00</updated><id>https://hivedocs.info/news/projects/rocketchat/2021/05/05/rocketchat-webhooks-are-powerufl</id><content type="html" xml:base="https://hivedocs.info/news/projects/rocketchat/2021/05/05/rocketchat-webhooks-are-powerufl.html">&lt;div id=&quot;content-rishi556-rocketchat-webhooks-are-powerufl&quot;&gt;A little while ago I took a look at Rocketchat's documentation on webhooks for a little something that should be coming out soon™. While I ended up not using it, I found some pretty awesome stuff with it and thought I'd like to share it with you guys. If you have no interaction with rocketchat, it's basically a chat application that you can self host. Hive has one running at http://openhive.chat/ thanks to @gtg. I didn't really use it(other than EARLY ~~steem~~ days, 2016 when it was still steem.chat) but honestly, seeing some of its capabilities, I might run an instance of my own for some of my chats and mostly playing around. 

This is the documentation that I was reading: https://docs.rocket.chat/guides/administrator-guides/administration/integrations-1. I did give it a go and it didn't end up working for my purposes, but I know it can work great for lots of other use cases. 

What I love most about it is that you can have scripts on both incoming and outgoing webhooks(YES 2 WAY WEBHOOKS) run right on the server hosting the chat. This can be used to save a lot of processing or network calls elsewhere. 

&lt;hr /&gt;

Let's take a look at an example with outgoing. A lot of bots have a help menu. That's something static and doesn't change at all between users who use it, and as such, it's something that can be saved right on the server and sent as a response form there.

Here's how a bot on discord would handle a help command(because discord doesn't have 2 way webhooks, only incoming, you'd have to setup a bot account there):
```
User Sends Message -&amp;gt; Discord Server -&amp;gt; Bot Server -&amp;gt; Discord Server -&amp;gt; User's UI
```

We had 4 hops on that one to go from start to finish. Now lets see how we can do it with outgoing scripts on rocketchat:
```
User Sends Message -&amp;gt; Rocketchat Server -&amp;gt; User's UI
```
Look at that, only 2 hops. This really is a benefit of the self hosted aspect of rocketchat, as this wouldn't be something that discord would want to bring(who wants to let anyone run arbitrary code on their server?).

All those little jumps will save a little bit of network time, and while a user probably won't see the difference(unless your bot's server is far far away from everything else) don't we all just love to optimize? Save that tiny bit of milliseconds wherever we can? While this only works for static content(if you want to access a database or something you'd still want to allow the request onto its final destination for processing), it's still a major benefit. The best part is that these scripts are just written in JS so you don't even have to learn a new language.

Outgoing webhooks are awesome in so many ways. It's so much easier to just listen for an incoming request than setup an entire discord bot to look for incoming commands to do certain actions. Plus you can use scripts to handle stuff like routing right when its being sent so you don't even need to worry about that on your backend. 

What I think the best part about rocketchat is the fact that it is open source and so you can customize it how you want. https://github.com/RocketChat/Rocket.Chat Just look at openhive.chat. It uses your hive account to sign in. That's not something that you can get on Discord(which isn't a bad platform, discord still has MANY MANY benefits over rocketchat) and never will be.&lt;/div&gt;
&lt;script crossorigin=&quot;anonymous&quot; integrity=&quot;sha256-4+XzXVhsDmqanXGHaHvgh1gMQKX40OUvDEBTu8JcmNs=&quot; src=&quot;https://code.jquery.com/jquery-3.5.1.slim.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://unpkg.com/steem-content-renderer&quot;&gt;&lt;/script&gt;

&lt;!-- &lt;script src=&quot;https://cdn.jsdelivr.net/npm/hive-content-renderer/dist/hive-content-renderer.min.js&quot;&gt;&lt;/script&gt; --&gt;
&lt;script&gt;
  $(document).ready(function() {
    try {
      const renderer = new SteemContentRenderer.DefaultRenderer({
      // const renderer = new HiveContentRenderer({
        baseUrl: &quot;https://hive.blog/&quot;,
        breaks: true,
        skipSanitization: false,
        allowInsecureScriptTags: false,
        addNofollowToLinks: true,
        doNotShowImages: false,
        ipfsPrefix: &quot;&quot;,
        assetsWidth: 640,
        assetsHeight: 480,
        imageProxyFn: (url) =&gt; url,
        usertagUrlFn: (account) =&gt; &quot;/@rishi556&quot;,
        hashtagUrlFn: (hashtag) =&gt; &quot;/rocketchat-webhooks-are-powerufl&quot;,
        isLinkSafeFn: (url) =&gt; true,
      });
      
      const inputElem = $('#content-rishi556-rocketchat-webhooks-are-powerufl').html();
      const outputElem = $('#content-rishi556-rocketchat-webhooks-are-powerufl');
      const output = renderer.render(inputElem);
      
      outputElem.html(output);
    } catch(e) {
      console.log(e);
    }
  });
&lt;/script&gt;

&lt;style&gt;
  #content-rishi556-rocketchat-webhooks-are-powerufl {
    padding: 0 3rem;
    color: #444444;
    font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Helvetica, Arial, sans-serif;
    font-size: 16px;
    line-height: 1.8;
    text-shadow: 0 1px 0 #ffffff;
    padding: 0.5rem;
  }
  #content-rishi556-rocketchat-webhooks-are-powerufl code {
    background: white;
  }
  #content-rishi556-rocketchat-webhooks-are-powerufl a {
    border-bottom: 1px solid #444444; color: #444444; text-decoration: none;
  }
  #content-rishi556-rocketchat-webhooks-are-powerufl a:hover {
    border-bottom: 0;
  }
  #content-rishi556-rocketchat-webhooks-are-powerufl h1 {
    font-size: 2.2em;
  }
  #content-rishi556-rocketchat-webhooks-are-powerufl h2, h3, h4, h5 {
    margin-bottom: 0;
  }
  #content-rishi556-rocketchat-webhooks-are-powerufl header small {
    color: #999;
    font-size: 50%;
  }
  #content-rishi556-rocketchat-webhooks-are-powerufl img {
    max-width: 100%;
  }
&lt;/style&gt;

&lt;hr /&gt;

&lt;p&gt;
  See: &lt;a href=&quot;https://peakd.com/hive-169321/@rishi556/rocketchat-webhooks-are-powerufl&quot;&gt;RocketChat Webhooks Are Powerful&lt;/a&gt;
  by
  &lt;a href=&quot;https://hive.blog/@rishi556&quot;&gt;@rishi556&lt;/a&gt;
&lt;/p&gt;</content><author><name>rishi556</name></author><category term="news" /><category term="projects" /><category term="rocketchat" /><summary type="html">A little while ago I took a look at Rocketchat's documentation on webhooks for a little something that should be coming out soon™. While I ended up not using it, I found some pretty awesome stuff with it and thought I'd like to share it with you guys. If you have no interaction with rocketchat, it's basically a chat application that you can self host. Hive has one running at http://openhive.chat/ thanks to @gtg. I didn't really use it(other than EARLY ~~steem~~ days, 2016 when it was still steem.chat) but honestly, seeing some of its capabilities, I might run an instance of my own for some of my chats and mostly playing around. This is the documentation that I was reading: https://docs.rocket.chat/guides/administrator-guides/administration/integrations-1. I did give it a go and it didn't end up working for my purposes, but I know it can work great for lots of other use cases. What I love most about it is that you can have scripts on both incoming and outgoing webhooks(YES 2 WAY WEBHOOKS) run right on the server hosting the chat. This can be used to save a lot of processing or network calls elsewhere. Let's take a look at an example with outgoing. A lot of bots have a help menu. That's something static and doesn't change at all between users who use it, and as such, it's something that can be saved right on the server and sent as a response form there. Here's how a bot on discord would handle a help command(because discord doesn't have 2 way webhooks, only incoming, you'd have to setup a bot account there): ``` User Sends Message -&amp;gt; Discord Server -&amp;gt; Bot Server -&amp;gt; Discord Server -&amp;gt; User's UI ``` We had 4 hops on that one to go from start to finish. Now lets see how we can do it with outgoing scripts on rocketchat: ``` User Sends Message -&amp;gt; Rocketchat Server -&amp;gt; User's UI ``` Look at that, only 2 hops. This really is a benefit of the self hosted aspect of rocketchat, as this wouldn't be something that discord would want to bring(who wants to let anyone run arbitrary code on their server?). All those little jumps will save a little bit of network time, and while a user probably won't see the difference(unless your bot's server is far far away from everything else) don't we all just love to optimize? Save that tiny bit of milliseconds wherever we can? While this only works for static content(if you want to access a database or something you'd still want to allow the request onto its final destination for processing), it's still a major benefit. The best part is that these scripts are just written in JS so you don't even have to learn a new language. Outgoing webhooks are awesome in so many ways. It's so much easier to just listen for an incoming request than setup an entire discord bot to look for incoming commands to do certain actions. Plus you can use scripts to handle stuff like routing right when its being sent so you don't even need to worry about that on your backend. What I think the best part about rocketchat is the fact that it is open source and so you can customize it how you want. https://github.com/RocketChat/Rocket.Chat Just look at openhive.chat. It uses your hive account to sign in. That's not something that you can get on Discord(which isn't a bad platform, discord still has MANY MANY benefits over rocketchat) and never will be. See: RocketChat Webhooks Are Powerful by @rishi556</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://hivedocs.info/assets/images/favicon.png" /><media:content medium="image" url="https://hivedocs.info/assets/images/favicon.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">10th update of 2021 on BlockTrades work on Hive software</title><link href="https://hivedocs.info/news/core/development/2021/05/04/10th-update-of-2021-on-blocktrades-work-on-hive-software.html" rel="alternate" type="text/html" title="10th update of 2021 on BlockTrades work on Hive software" /><published>2021-05-04T16:58:30-07:00</published><updated>2021-05-04T16:58:30-07:00</updated><id>https://hivedocs.info/news/core/development/2021/05/04/10th-update-of-2021-on-blocktrades-work-on-hive-software</id><content type="html" xml:base="https://hivedocs.info/news/core/development/2021/05/04/10th-update-of-2021-on-blocktrades-work-on-hive-software.html">&lt;div id=&quot;content-blocktrades-10th-update-of-2021-on-blocktrades-work-on-hive-software&quot;&gt;Below is a list of Hive-related programming issues worked on by BlockTrades team during the last week:

# Hived work (blockchain node software)
We launched the first testnet of hived for hardfork 25 last Wednesday and have been experimenting with configuring tinman for it.

[Tinman](https://gitlab.syncad.com/hive/tinman) is a testnet management tool for hived that can create accounts and inject various forms of test data into a hived node.

During some of our testing, we found a problem with hived where it would eat up 100% CPU of a core if a hived was launched without a valid seed node because the blockchain code was stuck in a tight loop polling for transactions and blocks that never show up (because the node has no peers to get data from). 

Even more problematically, no reasonable diagnostic information was reported in this situation, so it took a little while for us to identify the real problem. We’re currently working on a fix for this issue that lowers the CPU overhead in this case, and also adds warning messages to identify the problem.

We found a problem with beem (the python-based API library for Hive) used for running API tests on hived. @howo provided a quick patch and we’re working on a long term fix now (should be fixed tomorrow).

@howo also made updates to the recurrent transfers function based on specification change requests by our devs, and we are planning a final review of those changes tomorrow, with the plan to merge it into the develop branch for deployment in the next testnet launch.

# Jussi caching optimization
Over the weekend, I observed that our hivemind was loaded much more heavily than normal (this was initially noticeable on hive.blog where it was taking longer to open a post to read). 

Eventually I found that our node is getting hit with a dramatic increase in the number of bridge.get_discussion API calls (these calls are made when you navigate to a user's post on a site like peakd or hive.blog) and this led to a CPU bottleneck in the python code that process API calls.

It turns out there's a new site that allows for browsing Hive posts, but unfortunately it is currently coded to make this call every second or so (I suspect to detect new comments on the post) and this resulted in a large increase in the number of API calls our hivemind had to process.

The ultimate solution was fairly simple: we reconfigured our Jussi process to cache results of this call for 1 second (previous we had no caching configured for this call). 

All API calls first go to Jussi before being passed to hivemind, and if Jussi has cached the answer to a previous API call, then it can just return the previous answer instead of asking hivemind again.

Up till now, we haven't enabled a lot of caching on api.hive.blog other than a few basic things so that we could identify which calls are expensive for hivemind to process, and then optimize the processing of those calls.

But now that optimization work is mostly complete, so we'll be taking a look soon at ways to optimize our Jussi caching to reduce load on hivemind and hived, as this should allow for a substantial scaling increase for our node.

# Hivemind (2nd layer applications + social media middleware)

We isolated the cause of the memory leak in hivemind: it appears to be a case where python isn’t releasing memory from dictionaries when the data in the dictionary is cleared. We’ve added code to do a “deep clean” of those dictionaries. We'll likely have performance measurements late next week on how much memory this saves at the current block height. 

As a side note, I believe current nodes can recover this memory prior to obtaining our fix by stopping and restarting their hivemind instance.

We’ve also been making some changes to hivemind tests based on the change in the way community muting is being implemented, and those changes will probably be merged into the develop branch tomorrow.

We’ve been running full hivemind syncs on several systems to benchmark performance under different hivemind configurations. We found a slowdown on one machine running with one new hivemind command-line option and we’re trying to analyze if it is due to the use of the new command-line option or some other configuration issue on that system (e.g. hardware or database configuration). At this point, we’re trying various experiments to isolate the root problem on that system.

# Modular hivemind (framework for hive applications)
This week, we completed the first pass work on the fork resolution code for modular hivemind using a fully SQL-based solution relying on shadow tables that save changes that need to be undone in the case of a fork switch. 

We’re currently creating an architecture document to describe how the fork resolution code works and how to use it to create a Hive-based application.

# Updating hived testnet
We’re planning to launch an updated testnet on Thursday with the latest fixes to hived discussed above.

That will be followed by a launch of an API node configured to draw data from the testnet (probably on Friday, if all goes well). 

This API node will allow Hive applications to begin adding code changes to support new features added by the hardfork, such as vote expiration reporting.

# New hivemind release planned soon
In the next week we’ll continue testing the latest changes to hivemind: first more performance testing of hivemind sync, then real-world performance testing on api.hive.blog. 

If all that testing goes well, we may be able to release a new version of hivemind to API node operators by the end of next week. This release would contain the various bug fixes and performance optimizations reported in previous posts.

# SQL Account history plugin for hived (requirement for modular hivemind)
We planned to get to this task last week, but unfortunately it was delayed by other tasks. But we hope to complete the changes to the SQL account history plugin that pushes data to postgres (eliminating the need for hivemind to pull the data via RPC calls) in the new couple of days.

After the plugin changes are completed, we’ll run a simultaneous replay of hived with a full sync of hivemind to measure the speedup, and see if it matches our expected improvement in hivemind full sync time (we expect 2 days versus the current 4 days required).

# Anticipated hardfork date
I believe we still need to do more testnet-based testing before notifying exchanges of the new version of the code, and since we want to give them approximately 30 days to update after we have a well-tested code release, I think we're still at least 1.5 months out from a possible hardfork date.&lt;/div&gt;
&lt;script crossorigin=&quot;anonymous&quot; integrity=&quot;sha256-4+XzXVhsDmqanXGHaHvgh1gMQKX40OUvDEBTu8JcmNs=&quot; src=&quot;https://code.jquery.com/jquery-3.5.1.slim.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://unpkg.com/steem-content-renderer&quot;&gt;&lt;/script&gt;

&lt;!-- &lt;script src=&quot;https://cdn.jsdelivr.net/npm/hive-content-renderer/dist/hive-content-renderer.min.js&quot;&gt;&lt;/script&gt; --&gt;
&lt;script&gt;
  $(document).ready(function() {
    try {
      const renderer = new SteemContentRenderer.DefaultRenderer({
      // const renderer = new HiveContentRenderer({
        baseUrl: &quot;https://hive.blog/&quot;,
        breaks: true,
        skipSanitization: false,
        allowInsecureScriptTags: false,
        addNofollowToLinks: true,
        doNotShowImages: false,
        ipfsPrefix: &quot;&quot;,
        assetsWidth: 640,
        assetsHeight: 480,
        imageProxyFn: (url) =&gt; url,
        usertagUrlFn: (account) =&gt; &quot;/@blocktrades&quot;,
        hashtagUrlFn: (hashtag) =&gt; &quot;/10th-update-of-2021-on-blocktrades-work-on-hive-software&quot;,
        isLinkSafeFn: (url) =&gt; true,
      });
      
      const inputElem = $('#content-blocktrades-10th-update-of-2021-on-blocktrades-work-on-hive-software').html();
      const outputElem = $('#content-blocktrades-10th-update-of-2021-on-blocktrades-work-on-hive-software');
      const output = renderer.render(inputElem);
      
      outputElem.html(output);
    } catch(e) {
      console.log(e);
    }
  });
&lt;/script&gt;

&lt;style&gt;
  #content-blocktrades-10th-update-of-2021-on-blocktrades-work-on-hive-software {
    padding: 0 3rem;
    color: #444444;
    font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Helvetica, Arial, sans-serif;
    font-size: 16px;
    line-height: 1.8;
    text-shadow: 0 1px 0 #ffffff;
    padding: 0.5rem;
  }
  #content-blocktrades-10th-update-of-2021-on-blocktrades-work-on-hive-software code {
    background: white;
  }
  #content-blocktrades-10th-update-of-2021-on-blocktrades-work-on-hive-software a {
    border-bottom: 1px solid #444444; color: #444444; text-decoration: none;
  }
  #content-blocktrades-10th-update-of-2021-on-blocktrades-work-on-hive-software a:hover {
    border-bottom: 0;
  }
  #content-blocktrades-10th-update-of-2021-on-blocktrades-work-on-hive-software h1 {
    font-size: 2.2em;
  }
  #content-blocktrades-10th-update-of-2021-on-blocktrades-work-on-hive-software h2, h3, h4, h5 {
    margin-bottom: 0;
  }
  #content-blocktrades-10th-update-of-2021-on-blocktrades-work-on-hive-software header small {
    color: #999;
    font-size: 50%;
  }
  #content-blocktrades-10th-update-of-2021-on-blocktrades-work-on-hive-software img {
    max-width: 100%;
  }
&lt;/style&gt;

&lt;hr /&gt;

&lt;p&gt;
  See: &lt;a href=&quot;https://hive.blog/hive-139531/@blocktrades/10th-update-of-2021-on-blocktrades-work-on-hive-software&quot;&gt;10th update of 2021 on BlockTrades work on Hive software&lt;/a&gt;
  by
  &lt;a href=&quot;https://hive.blog/@blocktrades&quot;&gt;@blocktrades&lt;/a&gt;
&lt;/p&gt;</content><author><name>blocktrades</name></author><category term="news" /><category term="core" /><category term="development" /><summary type="html">Below is a list of Hive-related programming issues worked on by BlockTrades team during the last week: # Hived work (blockchain node software) We launched the first testnet of hived for hardfork 25 last Wednesday and have been experimenting with configuring tinman for it. [Tinman](https://gitlab.syncad.com/hive/tinman) is a testnet management tool for hived that can create accounts and inject various forms of test data into a hived node. During some of our testing, we found a problem with hived where it would eat up 100% CPU of a core if a hived was launched without a valid seed node because the blockchain code was stuck in a tight loop polling for transactions and blocks that never show up (because the node has no peers to get data from). Even more problematically, no reasonable diagnostic information was reported in this situation, so it took a little while for us to identify the real problem. We’re currently working on a fix for this issue that lowers the CPU overhead in this case, and also adds warning messages to identify the problem. We found a problem with beem (the python-based API library for Hive) used for running API tests on hived. @howo provided a quick patch and we’re working on a long term fix now (should be fixed tomorrow). @howo also made updates to the recurrent transfers function based on specification change requests by our devs, and we are planning a final review of those changes tomorrow, with the plan to merge it into the develop branch for deployment in the next testnet launch. # Jussi caching optimization Over the weekend, I observed that our hivemind was loaded much more heavily than normal (this was initially noticeable on hive.blog where it was taking longer to open a post to read). Eventually I found that our node is getting hit with a dramatic increase in the number of bridge.get_discussion API calls (these calls are made when you navigate to a user's post on a site like peakd or hive.blog) and this led to a CPU bottleneck in the python code that process API calls. It turns out there's a new site that allows for browsing Hive posts, but unfortunately it is currently coded to make this call every second or so (I suspect to detect new comments on the post) and this resulted in a large increase in the number of API calls our hivemind had to process. The ultimate solution was fairly simple: we reconfigured our Jussi process to cache results of this call for 1 second (previous we had no caching configured for this call). All API calls first go to Jussi before being passed to hivemind, and if Jussi has cached the answer to a previous API call, then it can just return the previous answer instead of asking hivemind again. Up till now, we haven't enabled a lot of caching on api.hive.blog other than a few basic things so that we could identify which calls are expensive for hivemind to process, and then optimize the processing of those calls. But now that optimization work is mostly complete, so we'll be taking a look soon at ways to optimize our Jussi caching to reduce load on hivemind and hived, as this should allow for a substantial scaling increase for our node. # Hivemind (2nd layer applications + social media middleware) We isolated the cause of the memory leak in hivemind: it appears to be a case where python isn’t releasing memory from dictionaries when the data in the dictionary is cleared. We’ve added code to do a “deep clean” of those dictionaries. We'll likely have performance measurements late next week on how much memory this saves at the current block height. As a side note, I believe current nodes can recover this memory prior to obtaining our fix by stopping and restarting their hivemind instance. We’ve also been making some changes to hivemind tests based on the change in the way community muting is being implemented, and those changes will probably be merged into the develop branch tomorrow. We’ve been running full hivemind syncs on several systems to benchmark performance under different hivemind configurations. We found a slowdown on one machine running with one new hivemind command-line option and we’re trying to analyze if it is due to the use of the new command-line option or some other configuration issue on that system (e.g. hardware or database configuration). At this point, we’re trying various experiments to isolate the root problem on that system. # Modular hivemind (framework for hive applications) This week, we completed the first pass work on the fork resolution code for modular hivemind using a fully SQL-based solution relying on shadow tables that save changes that need to be undone in the case of a fork switch. We’re currently creating an architecture document to describe how the fork resolution code works and how to use it to create a Hive-based application. # Updating hived testnet We’re planning to launch an updated testnet on Thursday with the latest fixes to hived discussed above. That will be followed by a launch of an API node configured to draw data from the testnet (probably on Friday, if all goes well). This API node will allow Hive applications to begin adding code changes to support new features added by the hardfork, such as vote expiration reporting. # New hivemind release planned soon In the next week we’ll continue testing the latest changes to hivemind: first more performance testing of hivemind sync, then real-world performance testing on api.hive.blog. If all that testing goes well, we may be able to release a new version of hivemind to API node operators by the end of next week. This release would contain the various bug fixes and performance optimizations reported in previous posts. # SQL Account history plugin for hived (requirement for modular hivemind) We planned to get to this task last week, but unfortunately it was delayed by other tasks. But we hope to complete the changes to the SQL account history plugin that pushes data to postgres (eliminating the need for hivemind to pull the data via RPC calls) in the new couple of days. After the plugin changes are completed, we’ll run a simultaneous replay of hived with a full sync of hivemind to measure the speedup, and see if it matches our expected improvement in hivemind full sync time (we expect 2 days versus the current 4 days required). # Anticipated hardfork date I believe we still need to do more testnet-based testing before notifying exchanges of the new version of the code, and since we want to give them approximately 30 days to update after we have a well-tested code release, I think we're still at least 1.5 months out from a possible hardfork date. See: 10th update of 2021 on BlockTrades work on Hive software by @blocktrades</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://hivedocs.info/assets/images/favicon.png" /><media:content medium="image" url="https://hivedocs.info/assets/images/favicon.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Curated Content Collections, Hive Engine Wallet Updates and More</title><link href="https://hivedocs.info/news/projects/peakd/2021/04/27/curated-content-collections-hive-engine-wallet-updates-and-more.html" rel="alternate" type="text/html" title="Curated Content Collections, Hive Engine Wallet Updates and More" /><published>2021-04-27T02:40:15-07:00</published><updated>2021-04-27T02:40:15-07:00</updated><id>https://hivedocs.info/news/projects/peakd/2021/04/27/curated-content-collections-hive-engine-wallet-updates-and-more</id><content type="html" xml:base="https://hivedocs.info/news/projects/peakd/2021/04/27/curated-content-collections-hive-engine-wallet-updates-and-more.html">&lt;div id=&quot;content-peakd-curated-content-collections-hive-engine-wallet-updates-and-more&quot;&gt;A new release of [peakd.com](https://peakd.com) is now available. Keep reading to discover the new features and check the full list of improvements ;)

&lt;center&gt;&lt;h4&gt;The new release is now live at https://peakd.com&lt;/h4&gt;&lt;/center&gt;

![release_cover_2021_04_27.jpg](https://files.peakd.com/file/peakd-hive/peakd/23tvCw8qNqAn6wxZKhC1YXDEpoiXGbJskMY4VkvqEDcrF5qLk7ErxxWdMkts9dC7Dzvpc.jpg)


#### 1. Introduce Curated Content Collections (CCC)

Curated Content Collections (CCC shorthand) is by far the biggest feature introduced in this release. This is something we have discussed for quite some time in the past months and finally we have found a way to implement and support this feature in a way we hope you will enjoy.

With CCC you can now share a curated list of posts in a nice and simple way. And you can also add a small comment to each link you add to the collection.
If you are used to write posts on [peakd.com](https://peakd.com) it will be easy to create a new collection. Because collections are fully decentralized and backed by a normal post that you can share in your blog or in a community (we created a community in case you don't know where to post it) and showcase in your profile. To create a collection there is an option directly in the top bar or in the post 'advanced' settings.

If you want to have a look we have created a few collections beforehand:
https://peakd.com/ccc/jarvie/amazing-locations-of-utah
https://peakd.com/ccc/jarvie/hive-hardfork-25


![image.png](https://files.peakd.com/file/peakd-hive/peakd/23wMmD3qYqE1F6XdsaDvkuP8jM7LatkqJ964Dxm3bMavQ6E7qprjUnqz6vEuQu8WvbhwA.png)


But collections are just simple posts so you can also view with the standard layout, but with some new embedded content 😉

![CCC when opened as a post](https://files.peakd.com/file/peakd-hive/asgarth-dev/23tcNhnr57dfCQzTbJ8UXv6XPTzppzH7XRZWqBAM8LrQ1vZcEuwndQHrSSQJyneg6JyLY.png)


Of course those collections can be seen in the user profile on a dedicated page: https://peakd.com/@jarvie/collections


![image.png](https://files.peakd.com/file/peakd-hive/peakd/EoKAEtkkYqsCCNeJKUJY95qeDKwkm21kYukNvMFP5WPSKTjyNkKGMq2iDstqYRuXrbW.png)


And there is a [new badge](https://peakd.com/b/badge-000333) automatically assigned to users (curators) that publish a new collection.

!['Curator' Badge](https://files.peakd.com/file/peakd-hive/peakd/242NetMSjPwg8hsZqF5MQ6BFLDB6vUqVjHWrKd5UcQnWfr4ZRkY6KGBiyjzLzjEQ4p8w6.png)


#### 2. Hive Engine wallet improvements

The second large update in this release is a complete rework of the Hive Engine wallet section to provide more options and more details.

![HE wallet](https://files.peakd.com/file/peakd-hive/asgarth-dev/23uFweCqWKH4K4t4gt6Tm34CwMrYArq3oiVdDQUX2vqkFp2eaLdibV5BrhxAdLYtekqBz.png)

New supported operations:
- Stake
- Unstake
- Delegate
- Undelegate
- View your delegations and update them.

Also we integrated a few different API to provide a clear and complete overview of the value of those tokens on HE market, Diesel Pools and (if available) standard price provided by @coingecko.

#### 3. Accumulated HBD interest in Wallet and option to trigger a 'claim'

The Hive wallet now include an estimation of the HBD interests from the last payment. It's possible to trigger a payment with a small HBD transaction to yourself.

![image.png](https://files.peakd.com/file/peakd-hive/asgarth-dev/23viTUFX1HKoT9rEr83PMcbBxLooq7shLgFrDEr4oqk54sboSrE4oMRAc6ZECYqsA5aHr.png)


#### 4. A Bunch of other improvements worth a mention

A full list of minor updates and fixes is available in the next paragraph, but some of them are worth a small paragraph and explanation.

**Temporary save draft for comments/replies in the browser storage**

When you start writing a comment or reply the text is now temporary saved in your browser cache. This does not work as the drafts for your posts, but should be a convenient way to avoid losing an import or long message by mistake.

**Support 'Truvvl' embeds**

Truvvl is a new app by the @travelfeed team released a few days ago. Embedded content is now supported on [peakd.com](https://peakd.com).

**Support odysee.com (lbry.tv) embeds**

Support for [odysee.com](https://odysee.com) embeds is now available and old [lbry.tv](https://lbry.tv) frames are automatically rewritten. Keep in mind that this only works when embedding the `iframe` directly, and not with a simple link.

#### 5. Some minor improvements and bug fixes

As always some minor improvements, updates and fixes across the website. You can check the full release notes here: **https://peakd.com/about/changelog**.

```
# Improvements and Fixes
------------------------------

[update] Quickly submit comments/replies with CTRL+ENTER
[update] Automatically filter low amount transfers in Wallet transactions
[fix] Power Up/Down pop-ups layout on mobile
[fix] Hive Engine tokens transfer when logged in with Hivesigner
[fix] Fix loading error in Proposals page that prevent proposals from loading
[fix] Rendering issue on un-supported &amp;lt;iframe&amp;gt; embeds
[fix] Avoid autoplay for Theta.Tv embeds in the feed
[fix] Small visual bug with featured community ribbons on top of chat panel
[fix] Opening peakd.com links with query string parameters
```

---

## Support the @peakd project

Now is probably a nice time to remind you of the ways you can support the development of @peakd.

![Selection_298.png](https://files.peakd.com/file/peakd-hive/peakd/w36DQpO7-Selection_298.png)

We have a proposal on the Decentralized Hive Fund. You can review the proposal [here](/proposals/52).
If you agree to the proposal and you think the points mentioned add value to the Hive Blockchain consider supporting it using the above links or directly with **[this link](https://hivesigner.com/sign/update-proposal-votes?proposal_ids=[52]&amp;amp;approve=true)**.

---

We also run a witness server to help produce the blocks for the Hive Blockchain. You can vote for our witness so we are in a position to process more of them.

Vote on the witness page: https://peakd.com/witnesses

- Using Keychain: You just have to click and approve the transaction
- Using HiveSigner: You'll need access to confirm the transaction with your Active Key at least

---

###### *The PeakD Team*
_About us: https://peakd.com/about_
_Join us on Discord: https://discord.gg/Fy3bca5_&lt;/div&gt;
&lt;script crossorigin=&quot;anonymous&quot; integrity=&quot;sha256-4+XzXVhsDmqanXGHaHvgh1gMQKX40OUvDEBTu8JcmNs=&quot; src=&quot;https://code.jquery.com/jquery-3.5.1.slim.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://unpkg.com/steem-content-renderer&quot;&gt;&lt;/script&gt;

&lt;!-- &lt;script src=&quot;https://cdn.jsdelivr.net/npm/hive-content-renderer/dist/hive-content-renderer.min.js&quot;&gt;&lt;/script&gt; --&gt;
&lt;script&gt;
  $(document).ready(function() {
    try {
      const renderer = new SteemContentRenderer.DefaultRenderer({
      // const renderer = new HiveContentRenderer({
        baseUrl: &quot;https://hive.blog/&quot;,
        breaks: true,
        skipSanitization: false,
        allowInsecureScriptTags: false,
        addNofollowToLinks: true,
        doNotShowImages: false,
        ipfsPrefix: &quot;&quot;,
        assetsWidth: 640,
        assetsHeight: 480,
        imageProxyFn: (url) =&gt; url,
        usertagUrlFn: (account) =&gt; &quot;/@peakd&quot;,
        hashtagUrlFn: (hashtag) =&gt; &quot;/curated-content-collections-hive-engine-wallet-updates-and-more&quot;,
        isLinkSafeFn: (url) =&gt; true,
      });
      
      const inputElem = $('#content-peakd-curated-content-collections-hive-engine-wallet-updates-and-more').html();
      const outputElem = $('#content-peakd-curated-content-collections-hive-engine-wallet-updates-and-more');
      const output = renderer.render(inputElem);
      
      outputElem.html(output);
    } catch(e) {
      console.log(e);
    }
  });
&lt;/script&gt;

&lt;style&gt;
  #content-peakd-curated-content-collections-hive-engine-wallet-updates-and-more {
    padding: 0 3rem;
    color: #444444;
    font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Helvetica, Arial, sans-serif;
    font-size: 16px;
    line-height: 1.8;
    text-shadow: 0 1px 0 #ffffff;
    padding: 0.5rem;
  }
  #content-peakd-curated-content-collections-hive-engine-wallet-updates-and-more code {
    background: white;
  }
  #content-peakd-curated-content-collections-hive-engine-wallet-updates-and-more a {
    border-bottom: 1px solid #444444; color: #444444; text-decoration: none;
  }
  #content-peakd-curated-content-collections-hive-engine-wallet-updates-and-more a:hover {
    border-bottom: 0;
  }
  #content-peakd-curated-content-collections-hive-engine-wallet-updates-and-more h1 {
    font-size: 2.2em;
  }
  #content-peakd-curated-content-collections-hive-engine-wallet-updates-and-more h2, h3, h4, h5 {
    margin-bottom: 0;
  }
  #content-peakd-curated-content-collections-hive-engine-wallet-updates-and-more header small {
    color: #999;
    font-size: 50%;
  }
  #content-peakd-curated-content-collections-hive-engine-wallet-updates-and-more img {
    max-width: 100%;
  }
&lt;/style&gt;

&lt;hr /&gt;

&lt;p&gt;
  See: &lt;a href=&quot;https://peakd.com/hive-163399/@peakd/curated-content-collections-hive-engine-wallet-updates-and-more&quot;&gt;Curated Content Collections, Hive Engine Wallet Updates and More&lt;/a&gt;
  by
  &lt;a href=&quot;https://hive.blog/@peakd&quot;&gt;@peakd&lt;/a&gt;
&lt;/p&gt;</content><author><name>peakd</name></author><category term="news" /><category term="projects" /><category term="peakd" /><summary type="html">A new release of [peakd.com](https://peakd.com) is now available. Keep reading to discover the new features and check the full list of improvements ;) The new release is now live at https://peakd.com ![release_cover_2021_04_27.jpg](https://files.peakd.com/file/peakd-hive/peakd/23tvCw8qNqAn6wxZKhC1YXDEpoiXGbJskMY4VkvqEDcrF5qLk7ErxxWdMkts9dC7Dzvpc.jpg) #### 1. Introduce Curated Content Collections (CCC) Curated Content Collections (CCC shorthand) is by far the biggest feature introduced in this release. This is something we have discussed for quite some time in the past months and finally we have found a way to implement and support this feature in a way we hope you will enjoy. With CCC you can now share a curated list of posts in a nice and simple way. And you can also add a small comment to each link you add to the collection. If you are used to write posts on [peakd.com](https://peakd.com) it will be easy to create a new collection. Because collections are fully decentralized and backed by a normal post that you can share in your blog or in a community (we created a community in case you don't know where to post it) and showcase in your profile. To create a collection there is an option directly in the top bar or in the post 'advanced' settings. If you want to have a look we have created a few collections beforehand: https://peakd.com/ccc/jarvie/amazing-locations-of-utah https://peakd.com/ccc/jarvie/hive-hardfork-25 ![image.png](https://files.peakd.com/file/peakd-hive/peakd/23wMmD3qYqE1F6XdsaDvkuP8jM7LatkqJ964Dxm3bMavQ6E7qprjUnqz6vEuQu8WvbhwA.png) But collections are just simple posts so you can also view with the standard layout, but with some new embedded content 😉 ![CCC when opened as a post](https://files.peakd.com/file/peakd-hive/asgarth-dev/23tcNhnr57dfCQzTbJ8UXv6XPTzppzH7XRZWqBAM8LrQ1vZcEuwndQHrSSQJyneg6JyLY.png) Of course those collections can be seen in the user profile on a dedicated page: https://peakd.com/@jarvie/collections ![image.png](https://files.peakd.com/file/peakd-hive/peakd/EoKAEtkkYqsCCNeJKUJY95qeDKwkm21kYukNvMFP5WPSKTjyNkKGMq2iDstqYRuXrbW.png) And there is a [new badge](https://peakd.com/b/badge-000333) automatically assigned to users (curators) that publish a new collection. !['Curator' Badge](https://files.peakd.com/file/peakd-hive/peakd/242NetMSjPwg8hsZqF5MQ6BFLDB6vUqVjHWrKd5UcQnWfr4ZRkY6KGBiyjzLzjEQ4p8w6.png) #### 2. Hive Engine wallet improvements The second large update in this release is a complete rework of the Hive Engine wallet section to provide more options and more details. ![HE wallet](https://files.peakd.com/file/peakd-hive/asgarth-dev/23uFweCqWKH4K4t4gt6Tm34CwMrYArq3oiVdDQUX2vqkFp2eaLdibV5BrhxAdLYtekqBz.png) New supported operations: - Stake - Unstake - Delegate - Undelegate - View your delegations and update them. Also we integrated a few different API to provide a clear and complete overview of the value of those tokens on HE market, Diesel Pools and (if available) standard price provided by @coingecko. #### 3. Accumulated HBD interest in Wallet and option to trigger a 'claim' The Hive wallet now include an estimation of the HBD interests from the last payment. It's possible to trigger a payment with a small HBD transaction to yourself. ![image.png](https://files.peakd.com/file/peakd-hive/asgarth-dev/23viTUFX1HKoT9rEr83PMcbBxLooq7shLgFrDEr4oqk54sboSrE4oMRAc6ZECYqsA5aHr.png) #### 4. A Bunch of other improvements worth a mention A full list of minor updates and fixes is available in the next paragraph, but some of them are worth a small paragraph and explanation. **Temporary save draft for comments/replies in the browser storage** When you start writing a comment or reply the text is now temporary saved in your browser cache. This does not work as the drafts for your posts, but should be a convenient way to avoid losing an import or long message by mistake. **Support 'Truvvl' embeds** Truvvl is a new app by the @travelfeed team released a few days ago. Embedded content is now supported on [peakd.com](https://peakd.com). **Support odysee.com (lbry.tv) embeds** Support for [odysee.com](https://odysee.com) embeds is now available and old [lbry.tv](https://lbry.tv) frames are automatically rewritten. Keep in mind that this only works when embedding the `iframe` directly, and not with a simple link. #### 5. Some minor improvements and bug fixes As always some minor improvements, updates and fixes across the website. You can check the full release notes here: **https://peakd.com/about/changelog**. ``` # Improvements and Fixes ------------------------------ [update] Quickly submit comments/replies with CTRL+ENTER [update] Automatically filter low amount transfers in Wallet transactions [fix] Power Up/Down pop-ups layout on mobile [fix] Hive Engine tokens transfer when logged in with Hivesigner [fix] Fix loading error in Proposals page that prevent proposals from loading [fix] Rendering issue on un-supported &amp;lt;iframe&amp;gt; embeds [fix] Avoid autoplay for Theta.Tv embeds in the feed [fix] Small visual bug with featured community ribbons on top of chat panel [fix] Opening peakd.com links with query string parameters ``` --- ## Support the @peakd project Now is probably a nice time to remind you of the ways you can support the development of @peakd. ![Selection_298.png](https://files.peakd.com/file/peakd-hive/peakd/w36DQpO7-Selection_298.png) We have a proposal on the Decentralized Hive Fund. You can review the proposal [here](/proposals/52). If you agree to the proposal and you think the points mentioned add value to the Hive Blockchain consider supporting it using the above links or directly with **[this link](https://hivesigner.com/sign/update-proposal-votes?proposal_ids=[52]&amp;amp;approve=true)**. --- We also run a witness server to help produce the blocks for the Hive Blockchain. You can vote for our witness so we are in a position to process more of them. Vote on the witness page: https://peakd.com/witnesses - Using Keychain: You just have to click and approve the transaction - Using HiveSigner: You'll need access to confirm the transaction with your Active Key at least --- ###### *The PeakD Team* _About us: https://peakd.com/about_ _Join us on Discord: https://discord.gg/Fy3bca5_ See: Curated Content Collections, Hive Engine Wallet Updates and More by @peakd</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://files.peakd.com/file/peakd-hive/peakd/23tvCw8qNqAn6wxZKhC1YXDEpoiXGbJskMY4VkvqEDcrF5qLk7ErxxWdMkts9dC7Dzvpc.jpg" /><media:content medium="image" url="https://files.peakd.com/file/peakd-hive/peakd/23tvCw8qNqAn6wxZKhC1YXDEpoiXGbJskMY4VkvqEDcrF5qLk7ErxxWdMkts9dC7Dzvpc.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Hive Keychain Mobile 1.1 : in-App browser</title><link href="https://hivedocs.info/news/projects/hive-keychain/2021/04/26/hive-keychain-mobile-11-in-app-browser.html" rel="alternate" type="text/html" title="Hive Keychain Mobile 1.1 : in-App browser" /><published>2021-04-26T23:52:33-07:00</published><updated>2021-04-26T23:52:33-07:00</updated><id>https://hivedocs.info/news/projects/hive-keychain/2021/04/26/hive-keychain-mobile-11--in-app-browser</id><content type="html" xml:base="https://hivedocs.info/news/projects/hive-keychain/2021/04/26/hive-keychain-mobile-11-in-app-browser.html">&lt;div id=&quot;content-keychain-hive-keychain-mobile-11--in-app-browser&quot;&gt;![social_keychainforhive.jpg](https://files.peakd.com/file/peakd-hive/keychain/xnmVXGi6-social_keychain-for-hive.jpg)

Hive Keychain for mobile is now available in version 1.1.2 on both Android and iOS (the issue with Apple is finally resolved). It introduces an in-App browser that lets you use your dApps in a similar manner that on desktop, with the dApps issuing requests to Keychain, that will then sign the transactions upon approval.

Here's an example of logging in on PeakD:

https://files.peakd.com/file/peakd-hive/keychain/23zRyEJARgwZGS6LoYg85kwBy9n2YV9jc6MVRutVZ2tCGtVVd1Y7cjcCKACoJYTvtEs5W.gif

All the major request types are already implemented, so that you can make the most of your Keychain experience on mobile : 

- Login methods
- Generic broadcasts
- Post / Comment
- Vote
- Transfer (with or without encrypted memo)
- Hive Engine Transfer
- Power up / down
- Delegations
- Proposal votes
- Witness vote / proxy
- Encode / Decode message
- Sign transaction / buffer

The release was delayed by one day to add browser history management and url autocomplete features.
Hope you will enjoy it!

Some additional requests are still missing but more rarely used, and will be added soon.
Additionally, the browser will be improved with favorites and multiple tabs handling. We will also add the possibility to whitelist some requests in the future, in order to mirror the behavior that you can find on the browser extension.

## Download the Apps

[&lt;img src=&quot;https://images.hive.blog/200x50/https://files.peakd.com/file/peakd-hive/keychain/23vsHsRHWYjefYMReCeLtoPxb5L8sov9BR52RXpnmax9qiGzCQnRRghLBVGq7rKp642hA&quot; /&gt;](https://apps.apple.com/us/app/hive-keychain/id1552190010)
[&lt;img src=&quot;https://images.hive.blog/200x50/https://files.peakd.com/file/peakd-hive/keychain/23wMPrC1wiKKXTYQVQHViGYKC61ZEo4nSKGHY7aW2m4EzsLf2sSB5MhewMQZysNS4fBTS&quot; /&gt;](https://play.google.com/store/apps/details?id=com.mobilekeychain)

1. The Application is still in Beta. It has been tested extensively but it should not by any means be the only place you store your keys on.
2. To import accounts quickly from your Hive Keychain extension to your mobile App, use the QR Code scanner by pressing the QR code logo:

On your extension, navigate to the menu (top right button), then to `Manage Accounts` and finally click on `Show QR Code`.

## Discord

To communicate with us or become an Alpha tester, join our Discord by following this link :
https://discord.gg/3EM6YfRrGv

Or scanning this QR Code : 

![image.png](https://files.peakd.com/file/peakd-hive/keychain/BRNgvm9y-image.png)

#### Core Team

@stoodkev : Lead Dev - [Witness](https://hivesigner.com/sign/account-witness-vote?witness=stoodkev&amp;amp;approve=1)
@nateaguila : UI/UX
@yabapmatt : Founder - [Witness](https://hivesigner.com/sign/account-witness-vote?witness=yabapmatt&amp;amp;approve=1)
@aggroed : Founder - [Witness](https://hivesigner.com/sign/account-witness-vote?witness=aggroed&amp;amp;approve=1)


---

### Support Hive Keychain development by voting for [our proposal](https://peakd.com/hive/@keychain/hive-keychain-development-proposal-2) on [PeakD](https://peakd.com/proposals/140) or with [HiveSigner](https://hivesigner.com/sign/update-proposal-votes?proposal_ids=%5B140%5D&amp;amp;approve=true).

*100% of payout is redirected to the DAO*&lt;/div&gt;
&lt;script crossorigin=&quot;anonymous&quot; integrity=&quot;sha256-4+XzXVhsDmqanXGHaHvgh1gMQKX40OUvDEBTu8JcmNs=&quot; src=&quot;https://code.jquery.com/jquery-3.5.1.slim.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://unpkg.com/steem-content-renderer&quot;&gt;&lt;/script&gt;

&lt;!-- &lt;script src=&quot;https://cdn.jsdelivr.net/npm/hive-content-renderer/dist/hive-content-renderer.min.js&quot;&gt;&lt;/script&gt; --&gt;
&lt;script&gt;
  $(document).ready(function() {
    try {
      const renderer = new SteemContentRenderer.DefaultRenderer({
      // const renderer = new HiveContentRenderer({
        baseUrl: &quot;https://hive.blog/&quot;,
        breaks: true,
        skipSanitization: false,
        allowInsecureScriptTags: false,
        addNofollowToLinks: true,
        doNotShowImages: false,
        ipfsPrefix: &quot;&quot;,
        assetsWidth: 640,
        assetsHeight: 480,
        imageProxyFn: (url) =&gt; url,
        usertagUrlFn: (account) =&gt; &quot;/@keychain&quot;,
        hashtagUrlFn: (hashtag) =&gt; &quot;/hive-keychain-mobile-11--in-app-browser&quot;,
        isLinkSafeFn: (url) =&gt; true,
      });
      
      const inputElem = $('#content-keychain-hive-keychain-mobile-11--in-app-browser').html();
      const outputElem = $('#content-keychain-hive-keychain-mobile-11--in-app-browser');
      const output = renderer.render(inputElem);
      
      outputElem.html(output);
    } catch(e) {
      console.log(e);
    }
  });
&lt;/script&gt;

&lt;style&gt;
  #content-keychain-hive-keychain-mobile-11--in-app-browser {
    padding: 0 3rem;
    color: #444444;
    font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Helvetica, Arial, sans-serif;
    font-size: 16px;
    line-height: 1.8;
    text-shadow: 0 1px 0 #ffffff;
    padding: 0.5rem;
  }
  #content-keychain-hive-keychain-mobile-11--in-app-browser code {
    background: white;
  }
  #content-keychain-hive-keychain-mobile-11--in-app-browser a {
    border-bottom: 1px solid #444444; color: #444444; text-decoration: none;
  }
  #content-keychain-hive-keychain-mobile-11--in-app-browser a:hover {
    border-bottom: 0;
  }
  #content-keychain-hive-keychain-mobile-11--in-app-browser h1 {
    font-size: 2.2em;
  }
  #content-keychain-hive-keychain-mobile-11--in-app-browser h2, h3, h4, h5 {
    margin-bottom: 0;
  }
  #content-keychain-hive-keychain-mobile-11--in-app-browser header small {
    color: #999;
    font-size: 50%;
  }
  #content-keychain-hive-keychain-mobile-11--in-app-browser img {
    max-width: 100%;
  }
&lt;/style&gt;

&lt;hr /&gt;

&lt;p&gt;
  See: &lt;a href=&quot;https://peakd.com/keychain/@keychain/hive-keychain-mobile-11--in-app-browser&quot;&gt;Hive Keychain Mobile 1.1 : in-App browser&lt;/a&gt;
  by
  &lt;a href=&quot;https://hive.blog/@keychain&quot;&gt;@keychain&lt;/a&gt;
&lt;/p&gt;</content><author><name>keychain</name></author><category term="news" /><category term="projects" /><category term="hive-keychain" /><summary type="html">![social_keychainforhive.jpg](https://files.peakd.com/file/peakd-hive/keychain/xnmVXGi6-social_keychain-for-hive.jpg) Hive Keychain for mobile is now available in version 1.1.2 on both Android and iOS (the issue with Apple is finally resolved). It introduces an in-App browser that lets you use your dApps in a similar manner that on desktop, with the dApps issuing requests to Keychain, that will then sign the transactions upon approval. Here's an example of logging in on PeakD: https://files.peakd.com/file/peakd-hive/keychain/23zRyEJARgwZGS6LoYg85kwBy9n2YV9jc6MVRutVZ2tCGtVVd1Y7cjcCKACoJYTvtEs5W.gif All the major request types are already implemented, so that you can make the most of your Keychain experience on mobile : - Login methods - Generic broadcasts - Post / Comment - Vote - Transfer (with or without encrypted memo) - Hive Engine Transfer - Power up / down - Delegations - Proposal votes - Witness vote / proxy - Encode / Decode message - Sign transaction / buffer The release was delayed by one day to add browser history management and url autocomplete features. Hope you will enjoy it! Some additional requests are still missing but more rarely used, and will be added soon. Additionally, the browser will be improved with favorites and multiple tabs handling. We will also add the possibility to whitelist some requests in the future, in order to mirror the behavior that you can find on the browser extension. ## Download the Apps [](https://apps.apple.com/us/app/hive-keychain/id1552190010) [](https://play.google.com/store/apps/details?id=com.mobilekeychain) 1. The Application is still in Beta. It has been tested extensively but it should not by any means be the only place you store your keys on. 2. To import accounts quickly from your Hive Keychain extension to your mobile App, use the QR Code scanner by pressing the QR code logo: On your extension, navigate to the menu (top right button), then to `Manage Accounts` and finally click on `Show QR Code`. ## Discord To communicate with us or become an Alpha tester, join our Discord by following this link : https://discord.gg/3EM6YfRrGv Or scanning this QR Code : ![image.png](https://files.peakd.com/file/peakd-hive/keychain/BRNgvm9y-image.png) #### Core Team @stoodkev : Lead Dev - [Witness](https://hivesigner.com/sign/account-witness-vote?witness=stoodkev&amp;amp;approve=1) @nateaguila : UI/UX @yabapmatt : Founder - [Witness](https://hivesigner.com/sign/account-witness-vote?witness=yabapmatt&amp;amp;approve=1) @aggroed : Founder - [Witness](https://hivesigner.com/sign/account-witness-vote?witness=aggroed&amp;amp;approve=1) --- ### Support Hive Keychain development by voting for [our proposal](https://peakd.com/hive/@keychain/hive-keychain-development-proposal-2) on [PeakD](https://peakd.com/proposals/140) or with [HiveSigner](https://hivesigner.com/sign/update-proposal-votes?proposal_ids=%5B140%5D&amp;amp;approve=true). *100% of payout is redirected to the DAO* See: Hive Keychain Mobile 1.1 : in-App browser by @keychain</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://files.peakd.com/file/peakd-hive/keychain/xnmVXGi6-social_keychain-for-hive.jpg" /><media:content medium="image" url="https://files.peakd.com/file/peakd-hive/keychain/xnmVXGi6-social_keychain-for-hive.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">9th update of 2021 on BlockTrades work on Hive software</title><link href="https://hivedocs.info/news/core/development/2021/04/26/9th-update-of-2021-on-blocktrades-work-on-hive-software.html" rel="alternate" type="text/html" title="9th update of 2021 on BlockTrades work on Hive software" /><published>2021-04-26T12:27:15-07:00</published><updated>2021-04-26T12:27:15-07:00</updated><id>https://hivedocs.info/news/core/development/2021/04/26/9th-update-of-2021-on-blocktrades-work-on-hive-software</id><content type="html" xml:base="https://hivedocs.info/news/core/development/2021/04/26/9th-update-of-2021-on-blocktrades-work-on-hive-software.html">&lt;div id=&quot;content-blocktrades-9th-update-of-2021-on-blocktrades-work-on-hive-software&quot;&gt;Below is a list of Hive-related programming issues worked on by BlockTrades team during the last few weeks:

# Hived work (blockchain node software)
We finished implementing and testing the following hardfork 25 changes:

 [New operation and associated API calls to convert Hive→Hive dollars (HBD) as a means of improving upside pegging of Hive dollars](https://gitlab.syncad.com/hive/hive/-/merge_requests/191). For more information, see https://hive.blog/hive-102930/@blocktrades/proposed-hardfork-change-to-stabilize-hive-dollar-s-tracking-of-usd-value

 [Hive dollars must be stored in a savings account to earn interest](https://gitlab.syncad.com/hive/hive/-/merge_requests/201). For more information, see: https://hive.blog/hive-102930/@blocktrades/proposal-to-make-hbd-interest-payable-only-to-savings-accounts

[Completed testing and created examples demonstrating functioning of new curation reward rules](https://gitlab.syncad.com/hive/hive/-/merge_requests/204)

 New unit tests: https://gitlab.syncad.com/hive/hive/-/merge_requests/195

[Fixed small issue that caused vote expiration to happen one block later than it should](https://gitlab.syncad.com/hive/hive/-/merge_requests/212)

[Allow votes on posts after they have paid out (votes  once again allowed on posts older than 7 days)](https://gitlab.syncad.com/hive/hive/-/merge_requests/189)

We also reviewed @howo support for recurrent transfers in HF25 and expect to merge those changes in tomorrow.

## Other work on hived
[Simplified cmake build options for hived (eliminated various hived build configurations like LOW_MEMORY_NODE and CLEAR_VOTES that weren’t practically useful and mostly just caused confusion)](https://gitlab.syncad.com/hive/hive/-/merge_requests/196). 

[Removed support for COMMENT_CONTENT_SUPPORT](https://gitlab.syncad.com/hive/hive/-/merge_requests/1930)

 [Improved reporting and debugging capabilities of unit tests](https://gitlab.syncad.com/hive/hive/-/merge_requests/206)

 [Allow running a subset of the entire suite based on a filter](https://gitlab.syncad.com/hive/hive/-/merge_requests/209)

 [Updated get_config API call with new configuration variables](https://gitlab.syncad.com/hive/hive/-/merge_requests/192)


[--force-reply command-line option no longer also requires use of –replay option and it also automatically deletes the shared_memory file, eliminating that manual step](https://gitlab.syncad.com/hive/hive/-/merge_requests/190)

[Proposal ids are now reported by proposal-pay virtual operation](https://gitlab.syncad.com/hive/hive/-/merge_requests/202)

[Clear the memo key of hive.fund as requested by @smooth](https://gitlab.syncad.com/hive/hive/-/merge_requests/210)

[Fix the version of hived reported when SMTs not enabled](https://gitlab.syncad.com/hive/hive/-/merge_requests/207)

[Fix a problem with static builds and libreadline](https://gitlab.syncad.com/hive/hive/-/issues/143)

[Unify the version of C++ used when building hived and refactor cmake files so that it only requires a change in one place](https://gitlab.syncad.com/hive/hive/-/merge_requests/208). 

Currently we’re using C++14 for the hardfork. We tested with C++17 and found one bug, which we fixed, but decided to delay making C++17 the standard version for builds since we’re getting close to hardfork time. After the hardfork, we’ll likely move to C++17 or C++20 for future development.

# Hivemind (2nd layer applications + social media middleware)
[Fixes and improvement to community mute functionality](https://gitlab.syncad.com/hive/hivemind/-/merge_requests/490)

[Fixed pagination of bridge.list_community_roles](https://gitlab.syncad.com/hive/hivemind/-/merge_requests/491)

# Modular hivemind
We’re making solid progress on modular hivemind, especially with regard to fork resolution handling. It looks like we’ll be able to avoid the need for a C extension to postgres and can instead rely on a “SQL-only” solution using “shadow tables” to save and restore changes to the tables that store data that can be changed when hived switches to a different micro-fork.

# Condenser
We made several fixes to condenser and also reviewed some new features by @quochuy and @jpphotography.

# Upcoming work
## Hived code freeze and launch of testnet
We plan to merge in the remaining hived code changes (a few minor fixes + recurrent transfers support) tomorrow, then assist in launch of testnet on Wednesday. 

We’ll test for two weeks, then hopefully be ready to merge the release candidate into the master branch, at which point we’ll give exchanges at least 30 days notice to update. 

So if no problems, we can expect the hardfork in about six weeks from Wednesday.

## Test latest hivemind changes
We’ll be running a full sync of hivemind with the latest changes, then test real world performance in a production environment on api.hive.blog, followed by a production release to the API nodes next week if no problems are found.

## SQL Account history plugin for hived
We plan to complete the changes to the SQL account history plugin that pushes data to postgres (eliminating the need for hivemind to pull the data via RPC calls) in the new couple of days.

After the plugin changes are completed, we’ll run a simultaneous replay of hived with a full sync of hivemind to measure the speedup, and see if it matches our expected improvement in hivemind full sync time (we expect 2 days versus the current 4 days required).&lt;/div&gt;
&lt;script crossorigin=&quot;anonymous&quot; integrity=&quot;sha256-4+XzXVhsDmqanXGHaHvgh1gMQKX40OUvDEBTu8JcmNs=&quot; src=&quot;https://code.jquery.com/jquery-3.5.1.slim.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://unpkg.com/steem-content-renderer&quot;&gt;&lt;/script&gt;

&lt;!-- &lt;script src=&quot;https://cdn.jsdelivr.net/npm/hive-content-renderer/dist/hive-content-renderer.min.js&quot;&gt;&lt;/script&gt; --&gt;
&lt;script&gt;
  $(document).ready(function() {
    try {
      const renderer = new SteemContentRenderer.DefaultRenderer({
      // const renderer = new HiveContentRenderer({
        baseUrl: &quot;https://hive.blog/&quot;,
        breaks: true,
        skipSanitization: false,
        allowInsecureScriptTags: false,
        addNofollowToLinks: true,
        doNotShowImages: false,
        ipfsPrefix: &quot;&quot;,
        assetsWidth: 640,
        assetsHeight: 480,
        imageProxyFn: (url) =&gt; url,
        usertagUrlFn: (account) =&gt; &quot;/@blocktrades&quot;,
        hashtagUrlFn: (hashtag) =&gt; &quot;/9th-update-of-2021-on-blocktrades-work-on-hive-software&quot;,
        isLinkSafeFn: (url) =&gt; true,
      });
      
      const inputElem = $('#content-blocktrades-9th-update-of-2021-on-blocktrades-work-on-hive-software').html();
      const outputElem = $('#content-blocktrades-9th-update-of-2021-on-blocktrades-work-on-hive-software');
      const output = renderer.render(inputElem);
      
      outputElem.html(output);
    } catch(e) {
      console.log(e);
    }
  });
&lt;/script&gt;

&lt;style&gt;
  #content-blocktrades-9th-update-of-2021-on-blocktrades-work-on-hive-software {
    padding: 0 3rem;
    color: #444444;
    font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Helvetica, Arial, sans-serif;
    font-size: 16px;
    line-height: 1.8;
    text-shadow: 0 1px 0 #ffffff;
    padding: 0.5rem;
  }
  #content-blocktrades-9th-update-of-2021-on-blocktrades-work-on-hive-software code {
    background: white;
  }
  #content-blocktrades-9th-update-of-2021-on-blocktrades-work-on-hive-software a {
    border-bottom: 1px solid #444444; color: #444444; text-decoration: none;
  }
  #content-blocktrades-9th-update-of-2021-on-blocktrades-work-on-hive-software a:hover {
    border-bottom: 0;
  }
  #content-blocktrades-9th-update-of-2021-on-blocktrades-work-on-hive-software h1 {
    font-size: 2.2em;
  }
  #content-blocktrades-9th-update-of-2021-on-blocktrades-work-on-hive-software h2, h3, h4, h5 {
    margin-bottom: 0;
  }
  #content-blocktrades-9th-update-of-2021-on-blocktrades-work-on-hive-software header small {
    color: #999;
    font-size: 50%;
  }
  #content-blocktrades-9th-update-of-2021-on-blocktrades-work-on-hive-software img {
    max-width: 100%;
  }
&lt;/style&gt;

&lt;hr /&gt;

&lt;p&gt;
  See: &lt;a href=&quot;https://hive.blog/hive-139531/@blocktrades/9th-update-of-2021-on-blocktrades-work-on-hive-software&quot;&gt;9th update of 2021 on BlockTrades work on Hive software&lt;/a&gt;
  by
  &lt;a href=&quot;https://hive.blog/@blocktrades&quot;&gt;@blocktrades&lt;/a&gt;
&lt;/p&gt;</content><author><name>blocktrades</name></author><category term="news" /><category term="core" /><category term="development" /><summary type="html">Below is a list of Hive-related programming issues worked on by BlockTrades team during the last few weeks: # Hived work (blockchain node software) We finished implementing and testing the following hardfork 25 changes: [New operation and associated API calls to convert Hive→Hive dollars (HBD) as a means of improving upside pegging of Hive dollars](https://gitlab.syncad.com/hive/hive/-/merge_requests/191). For more information, see https://hive.blog/hive-102930/@blocktrades/proposed-hardfork-change-to-stabilize-hive-dollar-s-tracking-of-usd-value [Hive dollars must be stored in a savings account to earn interest](https://gitlab.syncad.com/hive/hive/-/merge_requests/201). For more information, see: https://hive.blog/hive-102930/@blocktrades/proposal-to-make-hbd-interest-payable-only-to-savings-accounts [Completed testing and created examples demonstrating functioning of new curation reward rules](https://gitlab.syncad.com/hive/hive/-/merge_requests/204) New unit tests: https://gitlab.syncad.com/hive/hive/-/merge_requests/195 [Fixed small issue that caused vote expiration to happen one block later than it should](https://gitlab.syncad.com/hive/hive/-/merge_requests/212) [Allow votes on posts after they have paid out (votes once again allowed on posts older than 7 days)](https://gitlab.syncad.com/hive/hive/-/merge_requests/189) We also reviewed @howo support for recurrent transfers in HF25 and expect to merge those changes in tomorrow. ## Other work on hived [Simplified cmake build options for hived (eliminated various hived build configurations like LOW_MEMORY_NODE and CLEAR_VOTES that weren’t practically useful and mostly just caused confusion)](https://gitlab.syncad.com/hive/hive/-/merge_requests/196). [Removed support for COMMENT_CONTENT_SUPPORT](https://gitlab.syncad.com/hive/hive/-/merge_requests/1930) [Improved reporting and debugging capabilities of unit tests](https://gitlab.syncad.com/hive/hive/-/merge_requests/206) [Allow running a subset of the entire suite based on a filter](https://gitlab.syncad.com/hive/hive/-/merge_requests/209) [Updated get_config API call with new configuration variables](https://gitlab.syncad.com/hive/hive/-/merge_requests/192) [--force-reply command-line option no longer also requires use of –replay option and it also automatically deletes the shared_memory file, eliminating that manual step](https://gitlab.syncad.com/hive/hive/-/merge_requests/190) [Proposal ids are now reported by proposal-pay virtual operation](https://gitlab.syncad.com/hive/hive/-/merge_requests/202) [Clear the memo key of hive.fund as requested by @smooth](https://gitlab.syncad.com/hive/hive/-/merge_requests/210) [Fix the version of hived reported when SMTs not enabled](https://gitlab.syncad.com/hive/hive/-/merge_requests/207) [Fix a problem with static builds and libreadline](https://gitlab.syncad.com/hive/hive/-/issues/143) [Unify the version of C++ used when building hived and refactor cmake files so that it only requires a change in one place](https://gitlab.syncad.com/hive/hive/-/merge_requests/208). Currently we’re using C++14 for the hardfork. We tested with C++17 and found one bug, which we fixed, but decided to delay making C++17 the standard version for builds since we’re getting close to hardfork time. After the hardfork, we’ll likely move to C++17 or C++20 for future development. # Hivemind (2nd layer applications + social media middleware) [Fixes and improvement to community mute functionality](https://gitlab.syncad.com/hive/hivemind/-/merge_requests/490) [Fixed pagination of bridge.list_community_roles](https://gitlab.syncad.com/hive/hivemind/-/merge_requests/491) # Modular hivemind We’re making solid progress on modular hivemind, especially with regard to fork resolution handling. It looks like we’ll be able to avoid the need for a C extension to postgres and can instead rely on a “SQL-only” solution using “shadow tables” to save and restore changes to the tables that store data that can be changed when hived switches to a different micro-fork. # Condenser We made several fixes to condenser and also reviewed some new features by @quochuy and @jpphotography. # Upcoming work ## Hived code freeze and launch of testnet We plan to merge in the remaining hived code changes (a few minor fixes + recurrent transfers support) tomorrow, then assist in launch of testnet on Wednesday. We’ll test for two weeks, then hopefully be ready to merge the release candidate into the master branch, at which point we’ll give exchanges at least 30 days notice to update. So if no problems, we can expect the hardfork in about six weeks from Wednesday. ## Test latest hivemind changes We’ll be running a full sync of hivemind with the latest changes, then test real world performance in a production environment on api.hive.blog, followed by a production release to the API nodes next week if no problems are found. ## SQL Account history plugin for hived We plan to complete the changes to the SQL account history plugin that pushes data to postgres (eliminating the need for hivemind to pull the data via RPC calls) in the new couple of days. After the plugin changes are completed, we’ll run a simultaneous replay of hived with a full sync of hivemind to measure the speedup, and see if it matches our expected improvement in hivemind full sync time (we expect 2 days versus the current 4 days required). See: 9th update of 2021 on BlockTrades work on Hive software by @blocktrades</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://hivedocs.info/assets/images/favicon.png" /><media:content medium="image" url="https://hivedocs.info/assets/images/favicon.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Hive core developer meeting #22</title><link href="https://hivedocs.info/news/core/development/2021/04/26/hive-core-developer-meeting-22.html" rel="alternate" type="text/html" title="Hive core developer meeting #22" /><published>2021-04-26T11:35:12-07:00</published><updated>2021-04-26T11:35:12-07:00</updated><id>https://hivedocs.info/news/core/development/2021/04/26/hive-core-developer-meeting-22</id><content type="html" xml:base="https://hivedocs.info/news/core/development/2021/04/26/hive-core-developer-meeting-22.html">&lt;div id=&quot;content-howo-hive-core-developer-meeting-22&quot;&gt;https://www.youtube.com/watch?v=WIHxpfBa2KE

If you're listening to the whole thing, please post timestamps as a comment, the first one to do so (and correctly) will get a 100% upvote from me :)

# meeting tl;dr

# Dev sync

as always listen to this one, @blocktrades touched on many subjects on top of the usual dev sync, we discussed the testnet, updating the libraries and the code freeze among other things.

# Add a testnet test on hf24's restore_accounts function

If you don't know, when starting a testnet, you get a lot of logs like this:

```
714438ms database.cpp:2046             restore_accounts     ] The account aellly hadn't removed balances, balances can't be restored
714438ms database.cpp:2046             restore_accounts     ] The account akiroq hadn't removed balances, balances can't be restored
714438ms database.cpp:2046             restore_accounts     ] The account angelina6688 hadn't removed balances, balances can't be restored
714438ms database.cpp:2046             restore_accounts     ] The account balticbadger hadn't removed balances, balances can't be restored
714438ms database.cpp:2046             restore_accounts     ] The account cheva hadn't removed balances, balances can't be restored
714438ms database.cpp:2046             restore_accounts     ] The account cn-malaysia hadn't removed balances, balances can't be restored
714438ms database.cpp:2046             restore_accounts     ] The account cnfund hadn't removed balances, balances can't be restored
714438ms database.cpp:2046             restore_accounts     ] The account dailychina hadn't removed balances, balances can't be restored
```

Due to hf24 when we restored funds to accounts that won their appeal or were wrongfully not airdropped, but those account don't exist on a testnet to it creates a lot of useless logs. We'll add a condition so that those logs only exist on testnet

# status on community account mutes

You can read up on the issue: https://gitlab.syncad.com/hive/hivemind-/issues/145
It was important to get this done before working on other communities types and I'll be working on it in ~2 month so I wanted to know what was the status on it.

# Force witnesses to run the RC plugin to avoid abuse

Basically make the RC plugin consensus, lots of talk but conclusion was that it wouldn't be for now but would be considered at a later date.

# from @asgarth: Discuss RC delegations

There was quite a bit of back and forth there. In the end we discussed the idea of shipping &quot;rc delegations lite&quot; meaning a version of RC delegations where it's a simple &quot;I delegate rc to you&quot; similar to HP delegations. I need to do some work to figure out if this would cover most of the use cases the rc delegation pools would cover or not and see if it's viable and a better solution scaling and complexity-wise.


# Support what I'm doing 

If you like what I'm doing, please consider voting on my new proposal:
https://peakd.com/proposals/167
[hivesigner](https://hivesigner.com/import?redirect=%2Fsign%2Fupdate-proposal-votes%3Fproposal_ids%3D%255B167%255D%26approve%3Dtrue&amp;amp;authority=active)&lt;/div&gt;
&lt;script crossorigin=&quot;anonymous&quot; integrity=&quot;sha256-4+XzXVhsDmqanXGHaHvgh1gMQKX40OUvDEBTu8JcmNs=&quot; src=&quot;https://code.jquery.com/jquery-3.5.1.slim.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://unpkg.com/steem-content-renderer&quot;&gt;&lt;/script&gt;

&lt;!-- &lt;script src=&quot;https://cdn.jsdelivr.net/npm/hive-content-renderer/dist/hive-content-renderer.min.js&quot;&gt;&lt;/script&gt; --&gt;
&lt;script&gt;
  $(document).ready(function() {
    try {
      const renderer = new SteemContentRenderer.DefaultRenderer({
      // const renderer = new HiveContentRenderer({
        baseUrl: &quot;https://hive.blog/&quot;,
        breaks: true,
        skipSanitization: false,
        allowInsecureScriptTags: false,
        addNofollowToLinks: true,
        doNotShowImages: false,
        ipfsPrefix: &quot;&quot;,
        assetsWidth: 640,
        assetsHeight: 480,
        imageProxyFn: (url) =&gt; url,
        usertagUrlFn: (account) =&gt; &quot;/@howo&quot;,
        hashtagUrlFn: (hashtag) =&gt; &quot;/hive-core-developer-meeting-22&quot;,
        isLinkSafeFn: (url) =&gt; true,
      });
      
      const inputElem = $('#content-howo-hive-core-developer-meeting-22').html();
      const outputElem = $('#content-howo-hive-core-developer-meeting-22');
      const output = renderer.render(inputElem);
      
      outputElem.html(output);
    } catch(e) {
      console.log(e);
    }
  });
&lt;/script&gt;

&lt;style&gt;
  #content-howo-hive-core-developer-meeting-22 {
    padding: 0 3rem;
    color: #444444;
    font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Helvetica, Arial, sans-serif;
    font-size: 16px;
    line-height: 1.8;
    text-shadow: 0 1px 0 #ffffff;
    padding: 0.5rem;
  }
  #content-howo-hive-core-developer-meeting-22 code {
    background: white;
  }
  #content-howo-hive-core-developer-meeting-22 a {
    border-bottom: 1px solid #444444; color: #444444; text-decoration: none;
  }
  #content-howo-hive-core-developer-meeting-22 a:hover {
    border-bottom: 0;
  }
  #content-howo-hive-core-developer-meeting-22 h1 {
    font-size: 2.2em;
  }
  #content-howo-hive-core-developer-meeting-22 h2, h3, h4, h5 {
    margin-bottom: 0;
  }
  #content-howo-hive-core-developer-meeting-22 header small {
    color: #999;
    font-size: 50%;
  }
  #content-howo-hive-core-developer-meeting-22 img {
    max-width: 100%;
  }
&lt;/style&gt;

&lt;hr /&gt;

&lt;p&gt;
  See: &lt;a href=&quot;https://peakd.com/meeting/@howo/hive-core-developer-meeting-22&quot;&gt;Hive core developer meeting #22&lt;/a&gt;
  by
  &lt;a href=&quot;https://hive.blog/@howo&quot;&gt;@howo&lt;/a&gt;
&lt;/p&gt;</content><author><name>howo</name></author><category term="news" /><category term="core" /><category term="development" /><summary type="html">https://www.youtube.com/watch?v=WIHxpfBa2KE If you're listening to the whole thing, please post timestamps as a comment, the first one to do so (and correctly) will get a 100% upvote from me :) # meeting tl;dr # Dev sync as always listen to this one, @blocktrades touched on many subjects on top of the usual dev sync, we discussed the testnet, updating the libraries and the code freeze among other things. # Add a testnet test on hf24's restore_accounts function If you don't know, when starting a testnet, you get a lot of logs like this: ``` 714438ms database.cpp:2046 restore_accounts ] The account aellly hadn't removed balances, balances can't be restored 714438ms database.cpp:2046 restore_accounts ] The account akiroq hadn't removed balances, balances can't be restored 714438ms database.cpp:2046 restore_accounts ] The account angelina6688 hadn't removed balances, balances can't be restored 714438ms database.cpp:2046 restore_accounts ] The account balticbadger hadn't removed balances, balances can't be restored 714438ms database.cpp:2046 restore_accounts ] The account cheva hadn't removed balances, balances can't be restored 714438ms database.cpp:2046 restore_accounts ] The account cn-malaysia hadn't removed balances, balances can't be restored 714438ms database.cpp:2046 restore_accounts ] The account cnfund hadn't removed balances, balances can't be restored 714438ms database.cpp:2046 restore_accounts ] The account dailychina hadn't removed balances, balances can't be restored ``` Due to hf24 when we restored funds to accounts that won their appeal or were wrongfully not airdropped, but those account don't exist on a testnet to it creates a lot of useless logs. We'll add a condition so that those logs only exist on testnet # status on community account mutes You can read up on the issue: https://gitlab.syncad.com/hive/hivemind-/issues/145 It was important to get this done before working on other communities types and I'll be working on it in ~2 month so I wanted to know what was the status on it. # Force witnesses to run the RC plugin to avoid abuse Basically make the RC plugin consensus, lots of talk but conclusion was that it wouldn't be for now but would be considered at a later date. # from @asgarth: Discuss RC delegations There was quite a bit of back and forth there. In the end we discussed the idea of shipping &quot;rc delegations lite&quot; meaning a version of RC delegations where it's a simple &quot;I delegate rc to you&quot; similar to HP delegations. I need to do some work to figure out if this would cover most of the use cases the rc delegation pools would cover or not and see if it's viable and a better solution scaling and complexity-wise. # Support what I'm doing If you like what I'm doing, please consider voting on my new proposal: https://peakd.com/proposals/167 [hivesigner](https://hivesigner.com/import?redirect=%2Fsign%2Fupdate-proposal-votes%3Fproposal_ids%3D%255B167%255D%26approve%3Dtrue&amp;amp;authority=active) See: Hive core developer meeting #22 by @howo</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://hivedocs.info/assets/images/favicon.png" /><media:content medium="image" url="https://hivedocs.info/assets/images/favicon.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Mutelists, Blacklists: What’s the difference? + FAQ</title><link href="https://hivedocs.info/howto/community/blacklists/2021/04/24/mutelists-blacklists-what-s-the-difference-faq.html" rel="alternate" type="text/html" title="Mutelists, Blacklists: What’s the difference? + FAQ" /><published>2021-04-24T14:42:30-07:00</published><updated>2021-04-24T14:42:30-07:00</updated><id>https://hivedocs.info/howto/community/blacklists/2021/04/24/mutelists-blacklists-what-s-the-difference-faq</id><content type="html" xml:base="https://hivedocs.info/howto/community/blacklists/2021/04/24/mutelists-blacklists-what-s-the-difference-faq.html">&lt;div id=&quot;content-hivewatchers-mutelists-blacklists-what-s-the-difference-faq&quot;&gt;![image.png](https://images.hive.blog/DQmQ48rPArkkRHK9bTYHhYkcrQfWicUS4ZbbEw4RW8GycTx/image.png)
&lt;sup&gt;[Source of Image](https://unsplash.com/photos/-1_RZL8BGBM)&lt;/sup&gt;

There has been much confusion about the various lists available on Hive.  This post is meant to answer some of your questions to that regard. Please feel free to ask more questions as you see fit. 

# Decentralized blacklists and mutelists
These are on-chain lists based on the 'follow' function, which allows you to interact by either choosing to view in prominence or to hide from view the posts of another account. 

Any user can create a list or subscribe to an existing list that someone else created. When subscribed or created, the list will govern which accounts the user will not see. This is currently widely used for phishing accounts. 

- List is for limiting interaction with accounts on it
- Users and projects are able to create a coherent list of undesirable accounts (in their opinion)
- Subscribers can limit what they themselves can see and keep their experienced focused
- Lists mainly affect the frontend user experience 
- Lists do not have any effect on reward distribution

# Spaminator blacklist
The Spaminator blacklist is for accounts that are involved in **exploitation** on Hive. This is usually directly related to the exploitation of the reward pool. The Spaminator bot works off a ledger of account names, the on-chain interactions of which it logs into its database as it streams the blockchain. 

- A hands-off bot written in Python 
- 76955 accounts on it right now
- 1012 different account groups (grouped for classification purposes) of which many are different botnets
- Very, very few users on it are unique individuals; most are exploitation accounts
- No appeal timer, prompt removal is possible
- No maximum amount of strikes for unique individuals

Only active accounts are logged and are given a warning downvote. Where they are a unique individual, they will come and reply in some way. The unique individuals are usually victims of hacking/phishing or of other scams against them. They are warned through the bot and are helped to recover. 


# Hivewatchers Banlist
What is commonly referred to as the 'Hivewatchers blacklist' is actually a 'banlist'. We are not sure on how this name originally came about as we inherited the project and it's list but that's its official name. 

Hivewatchers is focused on **fraud**. Fraud can be defined as ID theft/deception, plagiarism (of all types), and generally fraudulent activities of various types. 

- Not part of Spaminator
- Used to educate users and give them a chance to be removed
- Only for unique individual accounts 
- Not used for botnets unless the botnet is based on deception
- Has a timer that gets activated for removal after an appeal starts
- A maximum two strikes and no more appeals are possible for unique individuals

# Mutelist vs Spaminator vs Hivewatchers

Because of the words 'list' and 'blacklist' there are many points of confusion around their differences and similarities. 

Stored centrally | Mutelist | Spaminator | Hivewatchers |
-|-|-|-|
Stored centrally in database | No | Yes | Yes |
Created by specific entity | Yes | Yes | Yes |
Limits interaction | Yes | No | No |
Frontend-focused | Yes | No | Yes |
Mandatory for users | No | No | No |
Automatically restores rewards | No | Yes | No |
Downvotes to warn | No | Yes | Yes |
Upvotes to warn | No | No | No |
Scope is set by default | No | Yes | Yes |
Hides post | Yes | No | No |
Is a hands-off bot | No | Yes | Both |
Is a feature | Yes | No | No |
On-chain controls | Yes | No | Yes |

# Outdated Terminology: 'Spam' 
The word 'Spam' is being phased out because of several issues:
- Too overused, vague and unclear
- Commonly used to mislabel and thus downgrade major threats such as phishing that require urgency
- Is often found attributed to everything irrespective of scope by users
- Is used to label low-effort content, shorter content, content that is disliked by the user, content in languages that don't always properly display, etc. 

The most predominant issue is phishing. When phishing becomes mislabeled as spam, the person being warned to either seek help recovering their account or to not click on a malicious link does not understand the severity of the matter. All phishing should always be referred to as 'phishing'. 

The word 'spam' is actively being removed from Hivewatchers comments and we are currently in transition to that regard. 

# Hive.Blog Mutelist
This list is used for phishing/hacked accounts predominantly, with a few accounts spreading malware thrown in. It is a great list to follow by default and is also replicated in the [Plenty of Phish repository](https://github.com/gryter/plentyofphish/blob/master/phishing.txt), on Spaminator and several other places. Once an account is recovered and is safe, it is removed from the list. 

This is one example of a Mutelist being used effectively and for a concrete purpose that warrants subscription and benefits all users irrespective of their beliefs, outlook, or anything else. It is strongly recommended that everyone takes all possible measures to prevent supporting hackers or falling prey to them. 

![image.png](https://images.hive.blog/DQmYthGMZLHCnNtUnD1yphVpjJxPYq47Jrw2Pdw6e4yK7K8/image.png)

# FAQ

**So why can't Spaminator just use a decentralized list? I still don't understand.**
Spaminator is a bot and needs its data in a local ledger (on its servers) to function. It was made to purely read the chain (it streams the blocks) and constantly querying on-chain lists would put a huge load on the endpoints quite unnecessarily. Additionally, it has about 76k account on it, many of which are massive botnets and not individual users. They are listed in their respective categories and managed through our servers. Adding them to one massive on-chain list is just not practical. 

**Will there be a Hivewatchers decentralized on-chain Mutelist or Blacklist?**
Yes. The Hivewatchers list is quite short in comparison to Spaminator and is meant to focus on fraud, as we already discussed. We'll have an announcement to that regard. We will likely end up with two lists on Hivewatchers; one for accounts that are permanently on and one for those that have a chance to appeal or are appealing. 

**Do you recommend I follow the Hivewatchers list and set my account to automatically downvote everything on it?**
We ask that you keep yourself safe. Some of the accounts we deal with belong to individuals who are extremely dangerous, are known for targeted harassment, death threats, stalking, doxxing, and other similar activities. Use your personal discretion.

**Are all accounts granted appeals?**
No. ID thieves, exploitation ring operators, hackers/phishers, or systemic repeat fraudsters are not granted further consideration. There is a limit to our 'revolving door'. Repeatedly having the same accounts mislead the community in their appeals is damaging to Hive. 

**My account is both on Hivewatchers and Spaminator. Why?**
In cases where there is fraud coupled with exploitation of the blockchain and its reward mechanism, the account may fit both scopes. If the account is part of a botnet or an organized ring, then it will likely be on both.

**Is short-form content allowed on Hive?**
All content is treated the same way: It should be at least 50% original to have some value and anything taken from the internet should be clearly cited. Short-form content doesn't mean that suddenly there is free reign to copy/paste other people's work and make money off it. It is never acceptable to steal from others for personal profit.

**I tried to use the on-chain Mutelist/Blacklist feature and I discovered bugs or issues. What do I do?**
The decentralized list feature is still being developed. Please submit your bugs/issues to https://gitlab.syncad.com/hive/condenser

**Should I report hacking/phishing, even if it's not on chain but still related to the Hive ecosystem in general?**
Yes. Please contact @guiltyparties and outline what happened. Even if your dapp got hacked please advise. 

**I hate Hivewatchers and Spaminator and want to disrupt all activities, so I'm upvoting everything Spaminator downvotes.**
If you've decided that scammers should be rewarded, we ask you to still please ensure that you are not supporting those who hack and phish other people's accounts. Just reach out to @guiltyparties on Openhive.chat or Discord and I'll set you up with the appropriate lists to exclude from your 'curation'.  It's not an all or nothing deal. If you are supporting phishing you will be treated the same as the hackers themselves.&lt;/div&gt;
&lt;script crossorigin=&quot;anonymous&quot; integrity=&quot;sha256-4+XzXVhsDmqanXGHaHvgh1gMQKX40OUvDEBTu8JcmNs=&quot; src=&quot;https://code.jquery.com/jquery-3.5.1.slim.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://unpkg.com/steem-content-renderer&quot;&gt;&lt;/script&gt;

&lt;!-- &lt;script src=&quot;https://cdn.jsdelivr.net/npm/hive-content-renderer/dist/hive-content-renderer.min.js&quot;&gt;&lt;/script&gt; --&gt;
&lt;script&gt;
  $(document).ready(function() {
    try {
      const renderer = new SteemContentRenderer.DefaultRenderer({
      // const renderer = new HiveContentRenderer({
        baseUrl: &quot;https://hive.blog/&quot;,
        breaks: true,
        skipSanitization: false,
        allowInsecureScriptTags: false,
        addNofollowToLinks: true,
        doNotShowImages: false,
        ipfsPrefix: &quot;&quot;,
        assetsWidth: 640,
        assetsHeight: 480,
        imageProxyFn: (url) =&gt; url,
        usertagUrlFn: (account) =&gt; &quot;/@hivewatchers&quot;,
        hashtagUrlFn: (hashtag) =&gt; &quot;/mutelists-blacklists-what-s-the-difference-faq&quot;,
        isLinkSafeFn: (url) =&gt; true,
      });
      
      const inputElem = $('#content-hivewatchers-mutelists-blacklists-what-s-the-difference-faq').html();
      const outputElem = $('#content-hivewatchers-mutelists-blacklists-what-s-the-difference-faq');
      const output = renderer.render(inputElem);
      
      outputElem.html(output);
    } catch(e) {
      console.log(e);
    }
  });
&lt;/script&gt;

&lt;style&gt;
  #content-hivewatchers-mutelists-blacklists-what-s-the-difference-faq {
    padding: 0 3rem;
    color: #444444;
    font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Helvetica, Arial, sans-serif;
    font-size: 16px;
    line-height: 1.8;
    text-shadow: 0 1px 0 #ffffff;
    padding: 0.5rem;
  }
  #content-hivewatchers-mutelists-blacklists-what-s-the-difference-faq code {
    background: white;
  }
  #content-hivewatchers-mutelists-blacklists-what-s-the-difference-faq a {
    border-bottom: 1px solid #444444; color: #444444; text-decoration: none;
  }
  #content-hivewatchers-mutelists-blacklists-what-s-the-difference-faq a:hover {
    border-bottom: 0;
  }
  #content-hivewatchers-mutelists-blacklists-what-s-the-difference-faq h1 {
    font-size: 2.2em;
  }
  #content-hivewatchers-mutelists-blacklists-what-s-the-difference-faq h2, h3, h4, h5 {
    margin-bottom: 0;
  }
  #content-hivewatchers-mutelists-blacklists-what-s-the-difference-faq header small {
    color: #999;
    font-size: 50%;
  }
  #content-hivewatchers-mutelists-blacklists-what-s-the-difference-faq img {
    max-width: 100%;
  }
&lt;/style&gt;

&lt;hr /&gt;

&lt;p&gt;
  See: &lt;a href=&quot;https://hive.blog/hivewatchers/@hivewatchers/mutelists-blacklists-what-s-the-difference-faq&quot;&gt;Mutelists, Blacklists: What's the difference? + FAQ&lt;/a&gt;
  by
  &lt;a href=&quot;https://hive.blog/@hivewatchers&quot;&gt;@hivewatchers&lt;/a&gt;
&lt;/p&gt;</content><author><name>hivewatchers</name></author><category term="howto" /><category term="community" /><category term="blacklists" /><summary type="html">![image.png](https://images.hive.blog/DQmQ48rPArkkRHK9bTYHhYkcrQfWicUS4ZbbEw4RW8GycTx/image.png) [Source of Image](https://unsplash.com/photos/-1_RZL8BGBM) There has been much confusion about the various lists available on Hive. This post is meant to answer some of your questions to that regard. Please feel free to ask more questions as you see fit. # Decentralized blacklists and mutelists These are on-chain lists based on the 'follow' function, which allows you to interact by either choosing to view in prominence or to hide from view the posts of another account. Any user can create a list or subscribe to an existing list that someone else created. When subscribed or created, the list will govern which accounts the user will not see. This is currently widely used for phishing accounts. - List is for limiting interaction with accounts on it - Users and projects are able to create a coherent list of undesirable accounts (in their opinion) - Subscribers can limit what they themselves can see and keep their experienced focused - Lists mainly affect the frontend user experience - Lists do not have any effect on reward distribution # Spaminator blacklist The Spaminator blacklist is for accounts that are involved in **exploitation** on Hive. This is usually directly related to the exploitation of the reward pool. The Spaminator bot works off a ledger of account names, the on-chain interactions of which it logs into its database as it streams the blockchain. - A hands-off bot written in Python - 76955 accounts on it right now - 1012 different account groups (grouped for classification purposes) of which many are different botnets - Very, very few users on it are unique individuals; most are exploitation accounts - No appeal timer, prompt removal is possible - No maximum amount of strikes for unique individuals Only active accounts are logged and are given a warning downvote. Where they are a unique individual, they will come and reply in some way. The unique individuals are usually victims of hacking/phishing or of other scams against them. They are warned through the bot and are helped to recover. # Hivewatchers Banlist What is commonly referred to as the 'Hivewatchers blacklist' is actually a 'banlist'. We are not sure on how this name originally came about as we inherited the project and it's list but that's its official name. Hivewatchers is focused on **fraud**. Fraud can be defined as ID theft/deception, plagiarism (of all types), and generally fraudulent activities of various types. - Not part of Spaminator - Used to educate users and give them a chance to be removed - Only for unique individual accounts - Not used for botnets unless the botnet is based on deception - Has a timer that gets activated for removal after an appeal starts - A maximum two strikes and no more appeals are possible for unique individuals # Mutelist vs Spaminator vs Hivewatchers Because of the words 'list' and 'blacklist' there are many points of confusion around their differences and similarities. Stored centrally | Mutelist | Spaminator | Hivewatchers | -|-|-|-| Stored centrally in database | No | Yes | Yes | Created by specific entity | Yes | Yes | Yes | Limits interaction | Yes | No | No | Frontend-focused | Yes | No | Yes | Mandatory for users | No | No | No | Automatically restores rewards | No | Yes | No | Downvotes to warn | No | Yes | Yes | Upvotes to warn | No | No | No | Scope is set by default | No | Yes | Yes | Hides post | Yes | No | No | Is a hands-off bot | No | Yes | Both | Is a feature | Yes | No | No | On-chain controls | Yes | No | Yes | # Outdated Terminology: 'Spam' The word 'Spam' is being phased out because of several issues: - Too overused, vague and unclear - Commonly used to mislabel and thus downgrade major threats such as phishing that require urgency - Is often found attributed to everything irrespective of scope by users - Is used to label low-effort content, shorter content, content that is disliked by the user, content in languages that don't always properly display, etc. The most predominant issue is phishing. When phishing becomes mislabeled as spam, the person being warned to either seek help recovering their account or to not click on a malicious link does not understand the severity of the matter. All phishing should always be referred to as 'phishing'. The word 'spam' is actively being removed from Hivewatchers comments and we are currently in transition to that regard. # Hive.Blog Mutelist This list is used for phishing/hacked accounts predominantly, with a few accounts spreading malware thrown in. It is a great list to follow by default and is also replicated in the [Plenty of Phish repository](https://github.com/gryter/plentyofphish/blob/master/phishing.txt), on Spaminator and several other places. Once an account is recovered and is safe, it is removed from the list. This is one example of a Mutelist being used effectively and for a concrete purpose that warrants subscription and benefits all users irrespective of their beliefs, outlook, or anything else. It is strongly recommended that everyone takes all possible measures to prevent supporting hackers or falling prey to them. ![image.png](https://images.hive.blog/DQmYthGMZLHCnNtUnD1yphVpjJxPYq47Jrw2Pdw6e4yK7K8/image.png) # FAQ **So why can't Spaminator just use a decentralized list? I still don't understand.** Spaminator is a bot and needs its data in a local ledger (on its servers) to function. It was made to purely read the chain (it streams the blocks) and constantly querying on-chain lists would put a huge load on the endpoints quite unnecessarily. Additionally, it has about 76k account on it, many of which are massive botnets and not individual users. They are listed in their respective categories and managed through our servers. Adding them to one massive on-chain list is just not practical. **Will there be a Hivewatchers decentralized on-chain Mutelist or Blacklist?** Yes. The Hivewatchers list is quite short in comparison to Spaminator and is meant to focus on fraud, as we already discussed. We'll have an announcement to that regard. We will likely end up with two lists on Hivewatchers; one for accounts that are permanently on and one for those that have a chance to appeal or are appealing. **Do you recommend I follow the Hivewatchers list and set my account to automatically downvote everything on it?** We ask that you keep yourself safe. Some of the accounts we deal with belong to individuals who are extremely dangerous, are known for targeted harassment, death threats, stalking, doxxing, and other similar activities. Use your personal discretion. **Are all accounts granted appeals?** No. ID thieves, exploitation ring operators, hackers/phishers, or systemic repeat fraudsters are not granted further consideration. There is a limit to our 'revolving door'. Repeatedly having the same accounts mislead the community in their appeals is damaging to Hive. **My account is both on Hivewatchers and Spaminator. Why?** In cases where there is fraud coupled with exploitation of the blockchain and its reward mechanism, the account may fit both scopes. If the account is part of a botnet or an organized ring, then it will likely be on both. **Is short-form content allowed on Hive?** All content is treated the same way: It should be at least 50% original to have some value and anything taken from the internet should be clearly cited. Short-form content doesn't mean that suddenly there is free reign to copy/paste other people's work and make money off it. It is never acceptable to steal from others for personal profit. **I tried to use the on-chain Mutelist/Blacklist feature and I discovered bugs or issues. What do I do?** The decentralized list feature is still being developed. Please submit your bugs/issues to https://gitlab.syncad.com/hive/condenser **Should I report hacking/phishing, even if it's not on chain but still related to the Hive ecosystem in general?** Yes. Please contact @guiltyparties and outline what happened. Even if your dapp got hacked please advise. **I hate Hivewatchers and Spaminator and want to disrupt all activities, so I'm upvoting everything Spaminator downvotes.** If you've decided that scammers should be rewarded, we ask you to still please ensure that you are not supporting those who hack and phish other people's accounts. Just reach out to @guiltyparties on Openhive.chat or Discord and I'll set you up with the appropriate lists to exclude from your 'curation'. It's not an all or nothing deal. If you are supporting phishing you will be treated the same as the hackers themselves. See: Mutelists, Blacklists: What's the difference? + FAQ by @hivewatchers</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://images.hive.blog/DQmQ48rPArkkRHK9bTYHhYkcrQfWicUS4ZbbEw4RW8GycTx/image.png" /><media:content medium="image" url="https://images.hive.blog/DQmQ48rPArkkRHK9bTYHhYkcrQfWicUS4ZbbEw4RW8GycTx/image.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Some cloudflare stats for hive.blog</title><link href="https://hivedocs.info/news/projects/hive/2021/04/24/some-cloudflare-stats-for-hive-blog.html" rel="alternate" type="text/html" title="Some cloudflare stats for hive.blog" /><published>2021-04-24T14:20:48-07:00</published><updated>2021-04-24T14:20:48-07:00</updated><id>https://hivedocs.info/news/projects/hive/2021/04/24/some-cloudflare-stats-for-hive-blog</id><content type="html" xml:base="https://hivedocs.info/news/projects/hive/2021/04/24/some-cloudflare-stats-for-hive-blog.html">&lt;div id=&quot;content-blocktrades-some-cloudflare-stats-for-hive-blog&quot;&gt;I don't usually bother to analyze web traffic on hive.blog, since I'm more focused on the technical development of Hive rather than Hive's success at marketing itself. Still, cloudflare send me a  monthly email that shows the amount internet traffic on the site, including some geographical breakdown of that data. So I've long known that the US has consistently been the largest source of our web traffic, ever since the site first launched.

The inspiration of this post was a discussion I was having with @logic. He had found a post that was attempting to do an analysis of hive.blog's traffic based on organic search data (I think, I didn't read too closely) and it made a few incorrect conclusions about traffic on the site, so I decided to publish some of the data we have from cloudflare, after that discussion.

Hive.blog only has the data that cloudflare provides for free, so I can only access the last 30 days worth of traffic data, plus I have those monthly emails which allows me to get a little bit of historical data beyond the past 30 days. So I can only present a few graphs that may be of interest.

# US web traffic for Hive.blog

This graph of US traffic was created by taking US traffic data from the emails (I deleted or moved the email from February apparently, so that's why there's a missing bar in the graph):

![image.png](https://images.hive.blog/DQmQtrVBAZmGZUGzBASQafVHsdXs6xh67ELsoWPqoCq2emC/image.png)
I'm not really sure why there was such a huge spike of traffic from the US during the month of May (120M), but there may not have been many other sites able to browse Hive posts during that month, so it may have born the brunt of Hive user traffic during that month. My best guess is that peakd, ecency, etc took away a lot of the traffic in  the next month, once everyone could return to using their preferred post browser.

The graph shows there's been a steady growth of traffic from October of last year until now (2x growth of US traffic over that period), which is nice, especially since we know a lot of other web sites are getting more traction nowadays as post browsers and therefore competing for total Hive traffic. So overall, this looks pretty promising for overall growth of viewership for Hive social media posts.

# Heatmap for hive.blog's worldwide traffic
Here's a heatmap of global traffic to hive.blog, and a numeric breakdown of traffic from the top 5 countries  in the last 30 days by country:


![image.png](https://images.hive.blog/DQmb9vvoBzQrQJPutwb5hnquU7KJHdRNCidggBkAVKDapVp/image.png)

# A few more from the heatmap

I also manually looked up a few other countries on the heatmap (by mousing over them) and roughly sorted the results. Now, this was a fairly tedious process and there's a lot of countries, so please don't be upset if I missed your country.
* Brazil 8.5M
* Canada 7.4M
* Turkey 7.4M
* Indonesia 6.8M
* Spain 5.8M
* India 5.5M
* France 5.2M
* Nigeria 5M
* Ukraine 4.9M
* Italy 4.6M
* Argentina 4.2M
* Bangladesh 4M
* Poland 3.8M
* Russia 3.4M
* Thailand 3.1M
* Australia 3M
* Portugal 2.9M
* Mexico 2.9M
* Netherlands 2.8M
* Pakistan 2.4M
* Columbia 2.2M
* Vietnam 2M
* S. Korea 1.8M
* Romania 1.7M
* Bulgaria 1.5M
* Serbia 1.5M
* Malaysia 1.4M
* South Africa 1.4M
* Greece 1.5M
* Japan 1.1M
* Austria 1.2M
* Switzerland 1.2M
* New Zealand 1.2M
* Belgium 1M
* Peru 1M
* Chile 1M
* Czech 0.9M
* Sweden 1M
* Norway 0.9M
* Finland 0.8M
* Ireland 0.8M
* Belarus 0.7M
* Croatia 0.7M
* Ecuador 0.7M
* Taiwan 0.5M
* Estonia 0.5M
* Macedonia 0.5M
* Slovenia 0.5M
* Denmark 0.4M
* Slovakia 0.4M
* Hungary 0.4M
* Suriname 0.4M
* Israel 0.3M
* Lithuania 0.3M
* Uruguay 0.3M
* Paraguay 0.3M
* Panama 0.3M
* Costa Rica 0.3M
* Saudi Arabia 0.2M
* Iran 0.2M
* Egypt 0.2M
* Morocco 0.2M
* Kazakhstan
* Algeria 0.2M
* Dominican Republic 0.2M
* Latvia 0.2M
* Sri Lanka 0.2M
* Guatemala 0.2M
* Bolivia 0.2M
* Nepal 0.2M
* Iceland 0.1M
* El Salvador 0.1M
* Kenya 0.1M
* Cuba 0.1M
* China 0.1M
* Bosnia/Herz: 0.1M
* Moldova 0.1M
* Azerbaijan 0.1M
* Oman 0.1M&lt;/div&gt;
&lt;script crossorigin=&quot;anonymous&quot; integrity=&quot;sha256-4+XzXVhsDmqanXGHaHvgh1gMQKX40OUvDEBTu8JcmNs=&quot; src=&quot;https://code.jquery.com/jquery-3.5.1.slim.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://unpkg.com/steem-content-renderer&quot;&gt;&lt;/script&gt;

&lt;!-- &lt;script src=&quot;https://cdn.jsdelivr.net/npm/hive-content-renderer/dist/hive-content-renderer.min.js&quot;&gt;&lt;/script&gt; --&gt;
&lt;script&gt;
  $(document).ready(function() {
    try {
      const renderer = new SteemContentRenderer.DefaultRenderer({
      // const renderer = new HiveContentRenderer({
        baseUrl: &quot;https://hive.blog/&quot;,
        breaks: true,
        skipSanitization: false,
        allowInsecureScriptTags: false,
        addNofollowToLinks: true,
        doNotShowImages: false,
        ipfsPrefix: &quot;&quot;,
        assetsWidth: 640,
        assetsHeight: 480,
        imageProxyFn: (url) =&gt; url,
        usertagUrlFn: (account) =&gt; &quot;/@blocktrades&quot;,
        hashtagUrlFn: (hashtag) =&gt; &quot;/some-cloudflare-stats-for-hive-blog&quot;,
        isLinkSafeFn: (url) =&gt; true,
      });
      
      const inputElem = $('#content-blocktrades-some-cloudflare-stats-for-hive-blog').html();
      const outputElem = $('#content-blocktrades-some-cloudflare-stats-for-hive-blog');
      const output = renderer.render(inputElem);
      
      outputElem.html(output);
    } catch(e) {
      console.log(e);
    }
  });
&lt;/script&gt;

&lt;style&gt;
  #content-blocktrades-some-cloudflare-stats-for-hive-blog {
    padding: 0 3rem;
    color: #444444;
    font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Helvetica, Arial, sans-serif;
    font-size: 16px;
    line-height: 1.8;
    text-shadow: 0 1px 0 #ffffff;
    padding: 0.5rem;
  }
  #content-blocktrades-some-cloudflare-stats-for-hive-blog code {
    background: white;
  }
  #content-blocktrades-some-cloudflare-stats-for-hive-blog a {
    border-bottom: 1px solid #444444; color: #444444; text-decoration: none;
  }
  #content-blocktrades-some-cloudflare-stats-for-hive-blog a:hover {
    border-bottom: 0;
  }
  #content-blocktrades-some-cloudflare-stats-for-hive-blog h1 {
    font-size: 2.2em;
  }
  #content-blocktrades-some-cloudflare-stats-for-hive-blog h2, h3, h4, h5 {
    margin-bottom: 0;
  }
  #content-blocktrades-some-cloudflare-stats-for-hive-blog header small {
    color: #999;
    font-size: 50%;
  }
  #content-blocktrades-some-cloudflare-stats-for-hive-blog img {
    max-width: 100%;
  }
&lt;/style&gt;

&lt;hr /&gt;

&lt;p&gt;
  See: &lt;a href=&quot;https://hive.blog/hive-133987/@blocktrades/some-cloudflare-stats-for-hive-blog&quot;&gt;Some cloudflare stats for hive.blog&lt;/a&gt;
  by
  &lt;a href=&quot;https://hive.blog/@blocktrades&quot;&gt;@blocktrades&lt;/a&gt;
&lt;/p&gt;</content><author><name>blocktrades</name></author><category term="news" /><category term="projects" /><category term="hive" /><summary type="html">I don't usually bother to analyze web traffic on hive.blog, since I'm more focused on the technical development of Hive rather than Hive's success at marketing itself. Still, cloudflare send me a monthly email that shows the amount internet traffic on the site, including some geographical breakdown of that data. So I've long known that the US has consistently been the largest source of our web traffic, ever since the site first launched. The inspiration of this post was a discussion I was having with @logic. He had found a post that was attempting to do an analysis of hive.blog's traffic based on organic search data (I think, I didn't read too closely) and it made a few incorrect conclusions about traffic on the site, so I decided to publish some of the data we have from cloudflare, after that discussion. Hive.blog only has the data that cloudflare provides for free, so I can only access the last 30 days worth of traffic data, plus I have those monthly emails which allows me to get a little bit of historical data beyond the past 30 days. So I can only present a few graphs that may be of interest. # US web traffic for Hive.blog This graph of US traffic was created by taking US traffic data from the emails (I deleted or moved the email from February apparently, so that's why there's a missing bar in the graph): ![image.png](https://images.hive.blog/DQmQtrVBAZmGZUGzBASQafVHsdXs6xh67ELsoWPqoCq2emC/image.png) I'm not really sure why there was such a huge spike of traffic from the US during the month of May (120M), but there may not have been many other sites able to browse Hive posts during that month, so it may have born the brunt of Hive user traffic during that month. My best guess is that peakd, ecency, etc took away a lot of the traffic in the next month, once everyone could return to using their preferred post browser. The graph shows there's been a steady growth of traffic from October of last year until now (2x growth of US traffic over that period), which is nice, especially since we know a lot of other web sites are getting more traction nowadays as post browsers and therefore competing for total Hive traffic. So overall, this looks pretty promising for overall growth of viewership for Hive social media posts. # Heatmap for hive.blog's worldwide traffic Here's a heatmap of global traffic to hive.blog, and a numeric breakdown of traffic from the top 5 countries in the last 30 days by country: ![image.png](https://images.hive.blog/DQmb9vvoBzQrQJPutwb5hnquU7KJHdRNCidggBkAVKDapVp/image.png) # A few more from the heatmap I also manually looked up a few other countries on the heatmap (by mousing over them) and roughly sorted the results. Now, this was a fairly tedious process and there's a lot of countries, so please don't be upset if I missed your country. * Brazil 8.5M * Canada 7.4M * Turkey 7.4M * Indonesia 6.8M * Spain 5.8M * India 5.5M * France 5.2M * Nigeria 5M * Ukraine 4.9M * Italy 4.6M * Argentina 4.2M * Bangladesh 4M * Poland 3.8M * Russia 3.4M * Thailand 3.1M * Australia 3M * Portugal 2.9M * Mexico 2.9M * Netherlands 2.8M * Pakistan 2.4M * Columbia 2.2M * Vietnam 2M * S. Korea 1.8M * Romania 1.7M * Bulgaria 1.5M * Serbia 1.5M * Malaysia 1.4M * South Africa 1.4M * Greece 1.5M * Japan 1.1M * Austria 1.2M * Switzerland 1.2M * New Zealand 1.2M * Belgium 1M * Peru 1M * Chile 1M * Czech 0.9M * Sweden 1M * Norway 0.9M * Finland 0.8M * Ireland 0.8M * Belarus 0.7M * Croatia 0.7M * Ecuador 0.7M * Taiwan 0.5M * Estonia 0.5M * Macedonia 0.5M * Slovenia 0.5M * Denmark 0.4M * Slovakia 0.4M * Hungary 0.4M * Suriname 0.4M * Israel 0.3M * Lithuania 0.3M * Uruguay 0.3M * Paraguay 0.3M * Panama 0.3M * Costa Rica 0.3M * Saudi Arabia 0.2M * Iran 0.2M * Egypt 0.2M * Morocco 0.2M * Kazakhstan * Algeria 0.2M * Dominican Republic 0.2M * Latvia 0.2M * Sri Lanka 0.2M * Guatemala 0.2M * Bolivia 0.2M * Nepal 0.2M * Iceland 0.1M * El Salvador 0.1M * Kenya 0.1M * Cuba 0.1M * China 0.1M * Bosnia/Herz: 0.1M * Moldova 0.1M * Azerbaijan 0.1M * Oman 0.1M See: Some cloudflare stats for hive.blog by @blocktrades</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://images.hive.blog/DQmQtrVBAZmGZUGzBASQafVHsdXs6xh67ELsoWPqoCq2emC/image.png" /><media:content medium="image" url="https://images.hive.blog/DQmQtrVBAZmGZUGzBASQafVHsdXs6xh67ELsoWPqoCq2emC/image.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>