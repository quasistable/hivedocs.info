<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="https://hivedocs.info/feed.xml" rel="self" type="application/atom+xml" /><link href="https://hivedocs.info/" rel="alternate" type="text/html" /><updated>2020-11-11T15:28:38-08:00</updated><id>https://hivedocs.info/feed.xml</id><title type="html">Hive Chain Documentation</title><subtitle>Your resource for various levels of Hive Documentation.</subtitle><author><name>site curated by: @inertia</name></author><entry><title type="html">Radiator v0.4.8 - Hive Ruby API Client: Eclipse Update</title><link href="https://hivedocs.info/news/ruby/eclipse/2020/11/09/radiator-v0-4-8-hive-ruby-api-client-eclipse-update.html" rel="alternate" type="text/html" title="Radiator v0.4.8 - Hive Ruby API Client: Eclipse Update" /><published>2020-11-09T11:32:33-08:00</published><updated>2020-11-09T11:32:33-08:00</updated><id>https://hivedocs.info/news/ruby/eclipse/2020/11/09/radiator-v0-4-8-hive-ruby-api-client-eclipse-update</id><content type="html" xml:base="https://hivedocs.info/news/ruby/eclipse/2020/11/09/radiator-v0-4-8-hive-ruby-api-client-eclipse-update.html">&lt;div id=&quot;content-inertia-radiator-v0-4-8-hive-ruby-api-client-eclipse-update&quot;&gt;&lt;div class=&quot;pull-right&quot;&gt;
&lt;img src=&quot;https://i.imgur.com/1r9bHwF.png&quot; /&gt;
&lt;/div&gt;

Repository: https://github.com/inertia186/radiator

In addition to bug fixes and general identifier name changes for Hive assets, this version of Radiator now incorporates `hive-ruby` as the primary basis for interacting with the blockchain.

So why use Radiator at all when you can just use the `hive-ruby` gem directly?  Well, that's because Radiator can do failover as well as access the Hive Engine API.

Not only that, but Radiator can also still work with Steem (and Steem Engine), if you're into that sort of thing.

To update your applications:

```bash
bundle update
```

#### Changes in v0.4.8

* Eclipse Update
* Now wrapping [`hive-ruby`](https://gitlab.syncad.com/hive/hive-ruby) and [`steem-ruby`](https://github.com/steemit/steem-ruby)

#### Changes in v0.4.7

* Added `attr_reader` for `Radiator::Type::Amount` [#28](https://github.com/inertia186/radiator/issues/28)
* Added restful fallback for `get_transaction` during `recover_transactions_on_error`
* Fix beneficiary serialization (thanks @eonwarped)

#### Changes in v0.4.6

* Added health check and persist option

#### Previous Changes
- [Radiator v0.4.5 - Engine Support](https://hive.blog/utopian-io/@inertia/radiator-v0-4-5-steem-ruby-api-client-steem-engine-support)
- [Radiator v0.4.0 - AppBase Update](https://hive.blog/radiator/@inertia/radiator-v0-4-0-steem-ruby-api-client-appbase-update)
- [Radiator v0.3.0 - Now With Failover Support](https://hive.blog/radiator/@inertia/radiator-v0-3-0-steem-ruby-api-client-update-now-with-failover-support)

#### Github
https://github.com/inertia186&lt;/div&gt;
&lt;script crossorigin=&quot;anonymous&quot; integrity=&quot;sha256-4+XzXVhsDmqanXGHaHvgh1gMQKX40OUvDEBTu8JcmNs=&quot; src=&quot;https://code.jquery.com/jquery-3.5.1.slim.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://unpkg.com/steem-content-renderer&quot;&gt;&lt;/script&gt;

&lt;script&gt;
  $(document).ready(function() {
    try {
      const renderer = new SteemContentRenderer.DefaultRenderer({
        baseUrl: &quot;https://hive.blog/&quot;,
        breaks: true,
        skipSanitization: false,
        allowInsecureScriptTags: false,
        addNofollowToLinks: true,
        doNotShowImages: false,
        ipfsPrefix: &quot;&quot;,
        assetsWidth: 640,
        assetsHeight: 480,
        imageProxyFn: (url) =&gt; url,
        usertagUrlFn: (account) =&gt; &quot;/@inertia&quot;,
        hashtagUrlFn: (hashtag) =&gt; &quot;/radiator-v0-4-8-hive-ruby-api-client-eclipse-update&quot;,
        isLinkSafeFn: (url) =&gt; true,
      });
      
      const inputElem = $('#content-inertia-radiator-v0-4-8-hive-ruby-api-client-eclipse-update').html();
      const outputElem = $('#content-inertia-radiator-v0-4-8-hive-ruby-api-client-eclipse-update');
      const output = renderer.render(inputElem);
      
      outputElem.html(output);
    } catch(e) {
      console.log(e);
    }
  });
&lt;/script&gt;

&lt;style&gt;
  #content-inertia-radiator-v0-4-8-hive-ruby-api-client-eclipse-update {
    padding: 0 3rem;
    color: #444444;
    font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Helvetica, Arial, sans-serif;
    font-size: 16px;
    line-height: 1.8;
    text-shadow: 0 1px 0 #ffffff;
    padding: 0.5rem;
  }
  #content-inertia-radiator-v0-4-8-hive-ruby-api-client-eclipse-update code {
    background: white;
  }
  #content-inertia-radiator-v0-4-8-hive-ruby-api-client-eclipse-update a {
    border-bottom: 1px solid #444444; color: #444444; text-decoration: none;
  }
  #content-inertia-radiator-v0-4-8-hive-ruby-api-client-eclipse-update a:hover {
    border-bottom: 0;
  }
  #content-inertia-radiator-v0-4-8-hive-ruby-api-client-eclipse-update h1 {
    font-size: 2.2em;
  }
  #content-inertia-radiator-v0-4-8-hive-ruby-api-client-eclipse-update h2, h3, h4, h5 {
    margin-bottom: 0;
  }
  #content-inertia-radiator-v0-4-8-hive-ruby-api-client-eclipse-update header small {
    color: #999;
    font-size: 50%;
  }
  #content-inertia-radiator-v0-4-8-hive-ruby-api-client-eclipse-update img {
    max-width: 100%;
  }
&lt;/style&gt;

&lt;hr /&gt;

&lt;p&gt;
  See: &lt;a href=&quot;https://hive.blog/hive-139531/@inertia/radiator-v0-4-8-hive-ruby-api-client-eclipse-update&quot;&gt;Radiator v0.4.8 - Hive Ruby API Client: Eclipse Update&lt;/a&gt;
  by
  &lt;a href=&quot;https://hive.blog/@inertia&quot;&gt;@inertia&lt;/a&gt;
&lt;/p&gt;</content><author><name>inertia</name></author><summary type="html">Repository: https://github.com/inertia186/radiator In addition to bug fixes and general identifier name changes for Hive assets, this version of Radiator now incorporates `hive-ruby` as the primary basis for interacting with the blockchain. So why use Radiator at all when you can just use the `hive-ruby` gem directly? Well, that's because Radiator can do failover as well as access the Hive Engine API. Not only that, but Radiator can also still work with Steem (and Steem Engine), if you're into that sort of thing. To update your applications: ```bash bundle update ``` #### Changes in v0.4.8 * Eclipse Update * Now wrapping [`hive-ruby`](https://gitlab.syncad.com/hive/hive-ruby) and [`steem-ruby`](https://github.com/steemit/steem-ruby) #### Changes in v0.4.7 * Added `attr_reader` for `Radiator::Type::Amount` [#28](https://github.com/inertia186/radiator/issues/28) * Added restful fallback for `get_transaction` during `recover_transactions_on_error` * Fix beneficiary serialization (thanks @eonwarped) #### Changes in v0.4.6 * Added health check and persist option #### Previous Changes - [Radiator v0.4.5 - Engine Support](https://hive.blog/utopian-io/@inertia/radiator-v0-4-5-steem-ruby-api-client-steem-engine-support) - [Radiator v0.4.0 - AppBase Update](https://hive.blog/radiator/@inertia/radiator-v0-4-0-steem-ruby-api-client-appbase-update) - [Radiator v0.3.0 - Now With Failover Support](https://hive.blog/radiator/@inertia/radiator-v0-3-0-steem-ruby-api-client-update-now-with-failover-support) #### Github https://github.com/inertia186 See: Radiator v0.4.8 - Hive Ruby API Client: Eclipse Update by @inertia</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://i.imgur.com/1r9bHwF.png" /><media:content medium="image" url="https://i.imgur.com/1r9bHwF.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Hive Keychain Development Proposal #2</title><link href="https://hivedocs.info/news/nodejs/hive-keychain/2020/11/08/hive-keychain-development-proposal-2.html" rel="alternate" type="text/html" title="Hive Keychain Development Proposal #2" /><published>2020-11-08T23:10:54-08:00</published><updated>2020-11-08T23:10:54-08:00</updated><id>https://hivedocs.info/news/nodejs/hive-keychain/2020/11/08/hive-keychain-development-proposal-2</id><content type="html" xml:base="https://hivedocs.info/news/nodejs/hive-keychain/2020/11/08/hive-keychain-development-proposal-2.html">&lt;div id=&quot;content-keychain-hive-keychain-development-proposal-2&quot;&gt;![](https://files.peakd.com/file/peakd-hive/keychain/xnmVXGi6-social_keychain-for-hive.jpg)

A lot has happened on Hive these past 6 months and I you followed the @keychain account weekly posts, you know that we've never stop building features, on our extension (now available for Chrome, Firefox, Opera and Brave) and on our mobile App (built for Android and iOS).

The current proposal is coming to an end soon but there's still so much we want to do to help the Hive ecosystem thrive, hence this new proposal.

## Hive Keychain DHF 2

This new proposal will start on November 15th, date at which the current one will expire, there will be no overlap between the two proposals.

Just as the past proposal, this one will mainly focus on two different axis : 
- Maintain and improve the existing browser extension
- Continue developing the Keychain mobile App

The upcoming work regarding these two projects will be discussed on the paragraphs below.

### Hive Keychain Extension

A lot has been done on the extension side. You can check our weekly updates to see the complete list of updates but here are some noticeable changes:
- Improved onboarding through a new `requestAddAccount` that let Keychain import keys from an external request
- Buy HIVE/HBD options
- Update to Keychainify to let dApp owners integrate more Keychain features via a Hivesigner link
- Improved documentation and automating it using `documentation.js`
- Improved nodes management, failover, and keeping the RPC nodes list up to date
- HBD conversion (with automatic id)
- New requests usable by dApps such as `requestSendToken` and changes with existing ones (`requestEncodeMemo` now works with posting and active keys)
- Protection against phishing/blacklisted accounts during transfers, and against sending transfers to exchanges without memos
- Updated our APIs to v2 with some new features (i.e. more detailed token price info)
- Automatic rewards claiming
- Automatic free account claiming 
- Updated the code to work through and after the Eclipse HF
- Export accounts to mobile via QR Code
- Several UI adjustments
- Code refactoring
- Brave browser support 
- Users and dApp developers support

Towards the end of the current proposal, and on the upcoming one, we are switching to spend more time on the mobile side since the extension is now pretty mature. That being said, there are still some features we want to work on such as : 

- Go further with onboarding by letting users create accounts directly from Keychain using one of the onboarding services
- No-key extension. We want to make it possible to use the extension without any key if you are on an unsafe computer. This will be implemented when the mobile App is mature enough and will allow to link the extension to the mobile phone via QR code and send the requests to that phone, on which they can be confirmed
- Include settings to the export files, to really make it seamless to import keychain to a new device using a .kc file
- Ledger integration as soon as the Hive application is approved by Ledger
- HE tokens operations integration (only transfers are supported so far)
- Information about proposals
- Reorganization of the settings
- Preparation of new features integration ahead of time when introduced via a HF
- Maintaining extension across all supported browsers through future HFs
- Users / Devs support



### Hive Keychain Mobile

There is a ton of features we want to provide to make Keychain a great mobile App that would help the whole Hive mobile ecosystem thrive. As such, our focus shifted more and more to work on this project.

The first part of this mobile App is the wallet and its currently undergoing tests before an Alpha release this month. Here is what we've done so far: 

- Secure key storage via biometrics using `react-native-keychain` package 
- Accounts import via private key or master key (not saved)
- Accounts import via QR code (from extension)
- Account balances
- Account value
- Voting Power and RC indicators
- Transaction history
- Wallet operations : Transfers, Power Up, Power Down, Delegations
- Incoming and outgoing delegations information
- Hive Engine balances, value and transactions history
- Hive balance operations : Transfers only (so far) 
- Key and accounts management

Here are some screenshots that I hope will make you excited about what's to come : 

https://images.hive.blog/1000x500/https://files.peakd.com/file/peakd-hive/keychain/ITL1Y13A-Screenshot_20201109-143355_mobileKeychain.jpg https://images.hive.blog/1000x500/https://files.peakd.com/file/peakd-hive/keychain/RIibY7sf-Screenshot_20201109-143407_mobileKeychain.jpg https://images.hive.blog/1000x500/https://files.peakd.com/file/peakd-hive/keychain/QMSQLd5K-124146064_785358812010920_2770059880192079036_n.jpg  https://images.hive.blog/1000x500/https://files.peakd.com/file/peakd-hive/keychain/2gFrZmeX-Screenshot_20201109-132058_mobileKeychain.jpg https://images.hive.blog/1000x500/https://files.peakd.com/file/peakd-hive/keychain/SGWrqqX3-Screenshot_20201109-132112_mobileKeychain.jpg https://images.hive.blog/1000x500/https://files.peakd.com/file/peakd-hive/keychain/stWBNmOX-Screenshot_20201109-143223_mobileKeychain.jpg https://images.hive.blog/1000x500/https://files.peakd.com/file/peakd-hive/keychain/eqdrmwdU-Screenshot_20201109-143305_mobileKeychain.jpg https://images.hive.blog/1000x500/https://files.peakd.com/file/peakd-hive/keychain/Bvx0AEdN-Screenshot_20201109-143008_mobileKeychain.jpg https://images.hive.blog/1000x500/https://files.peakd.com/file/peakd-hive/keychain/6yDEcikm-Screenshot_20201109-143315_mobileKeychain.jpg 


What we plan to do during the future 6 months : 
- Iterate on the wallet part according to the issues received by the Alpha users. We are expecting the main challenge will be coming from the biometrics authentication, as it is a device-dependent and OS-dependent matter. User reports will help us make sure it's working correctly independently on the devices.
- Add features to the wallet  (i.e. HBD conversion, Buying HIVE/HBD, witness votes, proposals)
- In-App browser bridging your favorite dApps with your keys securely stored in mobile Keychain. All the Keychain requests currently working on dApps using the extension will be implemented.
- Launch the Open Beta
- Start working on App to App communication, allowing other mobile Apps to request transactions directly to Keychain without ever seeing the keys.


### Budget

As for the previous proposal, we will keep working on a daily budget of 200 HBD for a period of 6 months.

### Commitments

- We commit to keep all the code produced through this funding opensource. You can find [Hive Keychain](https://github.com/stoodkev/hive-keychain) and [Keychain mobile](https://github.com/stoodkev/hive-keychain-mobile) on their respective Github repositories.
- We commit to post weekly on the progress made during the previous week. We have held this promise all along the first DHF and we hope you enjoyed following our development updates.


## Team

@stoodkev : Lead Developer - Witness
@nateaguila : UI/UX
@yabapmatt : Founder - Witness
@aggroed : Founder - Witness

---

### Support Hive Keychain development by voting for this proposal on [PeakD](https://peakd.com/me/proposals/140),  or with [HiveSigner](https://hivesigner.com/sign/update-proposal-votes?proposal_ids=%5B140%5D&amp;amp;approve=true).
*100% of payout is redirected to the DHF*&lt;/div&gt;
&lt;script crossorigin=&quot;anonymous&quot; integrity=&quot;sha256-4+XzXVhsDmqanXGHaHvgh1gMQKX40OUvDEBTu8JcmNs=&quot; src=&quot;https://code.jquery.com/jquery-3.5.1.slim.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://unpkg.com/steem-content-renderer&quot;&gt;&lt;/script&gt;

&lt;script&gt;
  $(document).ready(function() {
    try {
      const renderer = new SteemContentRenderer.DefaultRenderer({
        baseUrl: &quot;https://hive.blog/&quot;,
        breaks: true,
        skipSanitization: false,
        allowInsecureScriptTags: false,
        addNofollowToLinks: true,
        doNotShowImages: false,
        ipfsPrefix: &quot;&quot;,
        assetsWidth: 640,
        assetsHeight: 480,
        imageProxyFn: (url) =&gt; url,
        usertagUrlFn: (account) =&gt; &quot;/@keychain&quot;,
        hashtagUrlFn: (hashtag) =&gt; &quot;/hive-keychain-development-proposal-2&quot;,
        isLinkSafeFn: (url) =&gt; true,
      });
      
      const inputElem = $('#content-keychain-hive-keychain-development-proposal-2').html();
      const outputElem = $('#content-keychain-hive-keychain-development-proposal-2');
      const output = renderer.render(inputElem);
      
      outputElem.html(output);
    } catch(e) {
      console.log(e);
    }
  });
&lt;/script&gt;

&lt;style&gt;
  #content-keychain-hive-keychain-development-proposal-2 {
    padding: 0 3rem;
    color: #444444;
    font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Helvetica, Arial, sans-serif;
    font-size: 16px;
    line-height: 1.8;
    text-shadow: 0 1px 0 #ffffff;
    padding: 0.5rem;
  }
  #content-keychain-hive-keychain-development-proposal-2 code {
    background: white;
  }
  #content-keychain-hive-keychain-development-proposal-2 a {
    border-bottom: 1px solid #444444; color: #444444; text-decoration: none;
  }
  #content-keychain-hive-keychain-development-proposal-2 a:hover {
    border-bottom: 0;
  }
  #content-keychain-hive-keychain-development-proposal-2 h1 {
    font-size: 2.2em;
  }
  #content-keychain-hive-keychain-development-proposal-2 h2, h3, h4, h5 {
    margin-bottom: 0;
  }
  #content-keychain-hive-keychain-development-proposal-2 header small {
    color: #999;
    font-size: 50%;
  }
  #content-keychain-hive-keychain-development-proposal-2 img {
    max-width: 100%;
  }
&lt;/style&gt;

&lt;hr /&gt;

&lt;p&gt;
  See: &lt;a href=&quot;https://peakd.com/hive/@keychain/hive-keychain-development-proposal-2&quot;&gt;Hive Keychain Development Proposal #2&lt;/a&gt;
  by
  &lt;a href=&quot;https://hive.blog/@keychain&quot;&gt;@keychain&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/nodejs&quot;&gt;More About Node.js&lt;/a&gt;&lt;/p&gt;</content><author><name>keychain</name></author><summary type="html">![](https://files.peakd.com/file/peakd-hive/keychain/xnmVXGi6-social_keychain-for-hive.jpg) A lot has happened on Hive these past 6 months and I you followed the @keychain account weekly posts, you know that we've never stop building features, on our extension (now available for Chrome, Firefox, Opera and Brave) and on our mobile App (built for Android and iOS). The current proposal is coming to an end soon but there's still so much we want to do to help the Hive ecosystem thrive, hence this new proposal. ## Hive Keychain DHF 2 This new proposal will start on November 15th, date at which the current one will expire, there will be no overlap between the two proposals. Just as the past proposal, this one will mainly focus on two different axis : - Maintain and improve the existing browser extension - Continue developing the Keychain mobile App The upcoming work regarding these two projects will be discussed on the paragraphs below. ### Hive Keychain Extension A lot has been done on the extension side. You can check our weekly updates to see the complete list of updates but here are some noticeable changes: - Improved onboarding through a new `requestAddAccount` that let Keychain import keys from an external request - Buy HIVE/HBD options - Update to Keychainify to let dApp owners integrate more Keychain features via a Hivesigner link - Improved documentation and automating it using `documentation.js` - Improved nodes management, failover, and keeping the RPC nodes list up to date - HBD conversion (with automatic id) - New requests usable by dApps such as `requestSendToken` and changes with existing ones (`requestEncodeMemo` now works with posting and active keys) - Protection against phishing/blacklisted accounts during transfers, and against sending transfers to exchanges without memos - Updated our APIs to v2 with some new features (i.e. more detailed token price info) - Automatic rewards claiming - Automatic free account claiming - Updated the code to work through and after the Eclipse HF - Export accounts to mobile via QR Code - Several UI adjustments - Code refactoring - Brave browser support - Users and dApp developers support Towards the end of the current proposal, and on the upcoming one, we are switching to spend more time on the mobile side since the extension is now pretty mature. That being said, there are still some features we want to work on such as : - Go further with onboarding by letting users create accounts directly from Keychain using one of the onboarding services - No-key extension. We want to make it possible to use the extension without any key if you are on an unsafe computer. This will be implemented when the mobile App is mature enough and will allow to link the extension to the mobile phone via QR code and send the requests to that phone, on which they can be confirmed - Include settings to the export files, to really make it seamless to import keychain to a new device using a .kc file - Ledger integration as soon as the Hive application is approved by Ledger - HE tokens operations integration (only transfers are supported so far) - Information about proposals - Reorganization of the settings - Preparation of new features integration ahead of time when introduced via a HF - Maintaining extension across all supported browsers through future HFs - Users / Devs support ### Hive Keychain Mobile There is a ton of features we want to provide to make Keychain a great mobile App that would help the whole Hive mobile ecosystem thrive. As such, our focus shifted more and more to work on this project. The first part of this mobile App is the wallet and its currently undergoing tests before an Alpha release this month. Here is what we've done so far: - Secure key storage via biometrics using `react-native-keychain` package - Accounts import via private key or master key (not saved) - Accounts import via QR code (from extension) - Account balances - Account value - Voting Power and RC indicators - Transaction history - Wallet operations : Transfers, Power Up, Power Down, Delegations - Incoming and outgoing delegations information - Hive Engine balances, value and transactions history - Hive balance operations : Transfers only (so far) - Key and accounts management Here are some screenshots that I hope will make you excited about what's to come : https://images.hive.blog/1000x500/https://files.peakd.com/file/peakd-hive/keychain/ITL1Y13A-Screenshot_20201109-143355_mobileKeychain.jpg https://images.hive.blog/1000x500/https://files.peakd.com/file/peakd-hive/keychain/RIibY7sf-Screenshot_20201109-143407_mobileKeychain.jpg https://images.hive.blog/1000x500/https://files.peakd.com/file/peakd-hive/keychain/QMSQLd5K-124146064_785358812010920_2770059880192079036_n.jpg https://images.hive.blog/1000x500/https://files.peakd.com/file/peakd-hive/keychain/2gFrZmeX-Screenshot_20201109-132058_mobileKeychain.jpg https://images.hive.blog/1000x500/https://files.peakd.com/file/peakd-hive/keychain/SGWrqqX3-Screenshot_20201109-132112_mobileKeychain.jpg https://images.hive.blog/1000x500/https://files.peakd.com/file/peakd-hive/keychain/stWBNmOX-Screenshot_20201109-143223_mobileKeychain.jpg https://images.hive.blog/1000x500/https://files.peakd.com/file/peakd-hive/keychain/eqdrmwdU-Screenshot_20201109-143305_mobileKeychain.jpg https://images.hive.blog/1000x500/https://files.peakd.com/file/peakd-hive/keychain/Bvx0AEdN-Screenshot_20201109-143008_mobileKeychain.jpg https://images.hive.blog/1000x500/https://files.peakd.com/file/peakd-hive/keychain/6yDEcikm-Screenshot_20201109-143315_mobileKeychain.jpg What we plan to do during the future 6 months : - Iterate on the wallet part according to the issues received by the Alpha users. We are expecting the main challenge will be coming from the biometrics authentication, as it is a device-dependent and OS-dependent matter. User reports will help us make sure it's working correctly independently on the devices. - Add features to the wallet (i.e. HBD conversion, Buying HIVE/HBD, witness votes, proposals) - In-App browser bridging your favorite dApps with your keys securely stored in mobile Keychain. All the Keychain requests currently working on dApps using the extension will be implemented. - Launch the Open Beta - Start working on App to App communication, allowing other mobile Apps to request transactions directly to Keychain without ever seeing the keys. ### Budget As for the previous proposal, we will keep working on a daily budget of 200 HBD for a period of 6 months. ### Commitments - We commit to keep all the code produced through this funding opensource. You can find [Hive Keychain](https://github.com/stoodkev/hive-keychain) and [Keychain mobile](https://github.com/stoodkev/hive-keychain-mobile) on their respective Github repositories. - We commit to post weekly on the progress made during the previous week. We have held this promise all along the first DHF and we hope you enjoyed following our development updates. ## Team @stoodkev : Lead Developer - Witness @nateaguila : UI/UX @yabapmatt : Founder - Witness @aggroed : Founder - Witness --- ### Support Hive Keychain development by voting for this proposal on [PeakD](https://peakd.com/me/proposals/140), or with [HiveSigner](https://hivesigner.com/sign/update-proposal-votes?proposal_ids=%5B140%5D&amp;amp;approve=true). *100% of payout is redirected to the DHF* See: Hive Keychain Development Proposal #2 by @keychain</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://files.peakd.com/file/peakd-hive/keychain/xnmVXGi6-social_keychain-for-hive.jpg" /><media:content medium="image" url="https://files.peakd.com/file/peakd-hive/keychain/xnmVXGi6-social_keychain-for-hive.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Update for beem: improved account history handling</title><link href="https://hivedocs.info/news/python/account-history/2020/11/06/update-for-beem-improved-account-history-handling.html" rel="alternate" type="text/html" title="Update for beem: improved account history handling" /><published>2020-11-06T15:29:39-08:00</published><updated>2020-11-06T15:29:39-08:00</updated><id>https://hivedocs.info/news/python/account-history/2020/11/06/update-for-beem-improved-account-history-handling</id><content type="html" xml:base="https://hivedocs.info/news/python/account-history/2020/11/06/update-for-beem-improved-account-history-handling.html">&lt;div id=&quot;content-holger80-update-for-beem-improved-account-history-handling&quot;&gt;


## Repository

https://github.com/holgern/beem&lt;center&gt;
![beem-logo](https://cdn.steemitimages.com/DQmcRrwLPSywSYMierfP6um6mejeMNGjN9Rxw7audJqTDgb/beem-logo)
&lt;/center&gt;

[beem](https://github.com/holgern/beem) is a python library and command line tool for HIVE.  The current version is 0.24.18.

There is also a discord channel for beem: https://discord.gg/4HM592V

The newest beem version can be installed by:

```
pip install -U beem
```

Check that you are using hive nodes. The following command 

```
beempy updatenodes --hive
```

updates the nodelist and uses only hive nodes. After setting hive as default_chain, `beempy updatenodes` can be used.

The list of nodes can be checked with

```
beempy config
```

and

```
beempy currentnode
```

shows the currently connected node.

## Changelog for 0.24.18
* Adapt account history on api changes and fixes issue #267
* Speed up history call, when limit is below 1000
* Improve unit tests for account history
* Fix estimate_virtual_op_num, when get_account_history returns an empty entry for an index
* Implement _get_operation_filter and use filter operations in history and history_reverse on the https://api.hive.blog api node

## Changelog for 0.24.17
* Fixed a bug when using skip_account_check=True
* Refactor code in Account
* Add more unit tests

## Changelog for 0.24.16
* Fix bug in bytes representation of an Amount which prevents sending certain amounts (e.g. 8.19 HIVE)
* Added unit tests to check if 8.190 is correctly working

## Fixing rounding errors in transfers
In version 0.24.16, a rounding bug was fixed which prevents sending 8.19 HIVE. This bug leads to a wrong signature, which then prevents broadcasting the transfer op. This is now fixed.

## Improved error handling in account history
The account history and history_reverse functions have now a better error handling.
The returned index is now checked, which prevents that account history elements were added twice to the output.

## New filtered account history
Currently the new filter parameter are only implemented at &quot;https://api.hive.blog&quot; API node.

On this node, the get_account_history call has two more parameters: operation_filter_low and operation_filter_high.
These parameters are a bitmask of all possible operation names.
They can be obtained with the `_get_operation_filter` function:
```
operation_filter_low, operation_filter_high = account._get_operation_filter(only_ops=[&quot;transfer&quot;, &quot;vote&quot;])
```
which results in operation_filter_low=5 and operation_filter_high=0.

The `history` and `history_reverse` function from beem will now use the operation_filter when 
&quot;https://api.hive.blog&quot; is set as node. This speeds up receiving account history data up to 100 %.


### History reverse with operation_filter
```
from beem.account import Account
from beem import Hive
import time
hive = Hive(&quot;https://api.hive.blog&quot;)
acc = Account(&quot;holger80&quot;, blockchain_instance=hive)
start_time = time.time()
n_op = acc.virtual_op_count()
transfer_ops = list(acc.history_reverse(only_ops=[&quot;transfer&quot;]))
print(&quot;Time needed to search all transfers in %d history elements: %.2f s&quot; % (n_op, (time.time() - start_time)))
print(&quot;%d transfer op have been found&quot; % (len(transfer_ops)))
```

returns
```
Time needed to search all transfers in 283514 history elements: 145.66 s
4666 transfer op have been found
```

### History with operation_filter
```
from beem.account import Account
from beem import Hive
import time
hive = Hive(&quot;https://api.hive.blog&quot;)
acc = Account(&quot;holger80&quot;, blockchain_instance=hive)
start_time = time.time()
n_op = acc.virtual_op_count()
transfer_ops = list(acc.history(only_ops=[&quot;transfer&quot;]))
print(&quot;Time needed to search all transfers in %d history elements: %.2f s&quot; % (n_op, (time.time() - start_time)))
print(&quot;%d transfer op have been found&quot; % (len(transfer_ops)))
```
returns
```
Time needed to search all transfers in 283517 history elements: 144.55 s
4666 transfer op have been found
```

### History without operation filter
Now we do the same without filtering:
```
from beem.account import Account
from beem import Hive
import time
hive = Hive(&quot;https://api.hive.blog&quot;)
acc = Account(&quot;holger80&quot;, blockchain_instance=hive)
start_time = time.time()
n_op = acc.virtual_op_count()
transfer_ops = []
for op in acc.history():
    if op[&quot;type&quot;] == &quot;transfer&quot;:
        transfer_ops.append(op)
print(&quot;Time needed to search all transfers in %d history elements: %.2f s&quot; % (n_op, (time.time() - start_time)))
print(&quot;%d transfer op have been found&quot; % (len(transfer_ops)))
```
returns
```
Time needed to search all transfers in 283518 history elements: 261.63 s
4666 transfer op have been found
```


___

*If you like what I do, consider casting a vote for me as witness on [Hivesigner](https://hivesigner.com/sign/account-witness-vote?witness=holger80&amp;amp;approve=1) or on [PeakD](https://peakd.com/witnesses)*&lt;/div&gt;
&lt;script crossorigin=&quot;anonymous&quot; integrity=&quot;sha256-4+XzXVhsDmqanXGHaHvgh1gMQKX40OUvDEBTu8JcmNs=&quot; src=&quot;https://code.jquery.com/jquery-3.5.1.slim.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://unpkg.com/steem-content-renderer&quot;&gt;&lt;/script&gt;

&lt;script&gt;
  $(document).ready(function() {
    try {
      const renderer = new SteemContentRenderer.DefaultRenderer({
        baseUrl: &quot;https://hive.blog/&quot;,
        breaks: true,
        skipSanitization: false,
        allowInsecureScriptTags: false,
        addNofollowToLinks: true,
        doNotShowImages: false,
        ipfsPrefix: &quot;&quot;,
        assetsWidth: 640,
        assetsHeight: 480,
        imageProxyFn: (url) =&gt; url,
        usertagUrlFn: (account) =&gt; &quot;/@holger80&quot;,
        hashtagUrlFn: (hashtag) =&gt; &quot;/update-for-beem-improved-account-history-handling&quot;,
        isLinkSafeFn: (url) =&gt; true,
      });
      
      const inputElem = $('#content-holger80-update-for-beem-improved-account-history-handling').html();
      const outputElem = $('#content-holger80-update-for-beem-improved-account-history-handling');
      const output = renderer.render(inputElem);
      
      outputElem.html(output);
    } catch(e) {
      console.log(e);
    }
  });
&lt;/script&gt;

&lt;style&gt;
  #content-holger80-update-for-beem-improved-account-history-handling {
    padding: 0 3rem;
    color: #444444;
    font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Helvetica, Arial, sans-serif;
    font-size: 16px;
    line-height: 1.8;
    text-shadow: 0 1px 0 #ffffff;
    padding: 0.5rem;
  }
  #content-holger80-update-for-beem-improved-account-history-handling code {
    background: white;
  }
  #content-holger80-update-for-beem-improved-account-history-handling a {
    border-bottom: 1px solid #444444; color: #444444; text-decoration: none;
  }
  #content-holger80-update-for-beem-improved-account-history-handling a:hover {
    border-bottom: 0;
  }
  #content-holger80-update-for-beem-improved-account-history-handling h1 {
    font-size: 2.2em;
  }
  #content-holger80-update-for-beem-improved-account-history-handling h2, h3, h4, h5 {
    margin-bottom: 0;
  }
  #content-holger80-update-for-beem-improved-account-history-handling header small {
    color: #999;
    font-size: 50%;
  }
  #content-holger80-update-for-beem-improved-account-history-handling img {
    max-width: 100%;
  }
&lt;/style&gt;

&lt;hr /&gt;

&lt;p&gt;
  See: &lt;a href=&quot;https://hive.blog/hive-139531/@holger80/update-for-beem-improved-account-history-handling&quot;&gt;Update for beem: improved account history handling&lt;/a&gt;
  by
  &lt;a href=&quot;https://hive.blog/@holger80&quot;&gt;@holger80&lt;/a&gt;
&lt;/p&gt;</content><author><name>holger80</name></author><summary type="html">## Repository https://github.com/holgern/beem ![beem-logo](https://cdn.steemitimages.com/DQmcRrwLPSywSYMierfP6um6mejeMNGjN9Rxw7audJqTDgb/beem-logo) [beem](https://github.com/holgern/beem) is a python library and command line tool for HIVE. The current version is 0.24.18. There is also a discord channel for beem: https://discord.gg/4HM592V The newest beem version can be installed by: ``` pip install -U beem ``` Check that you are using hive nodes. The following command ``` beempy updatenodes --hive ``` updates the nodelist and uses only hive nodes. After setting hive as default_chain, `beempy updatenodes` can be used. The list of nodes can be checked with ``` beempy config ``` and ``` beempy currentnode ``` shows the currently connected node. ## Changelog for 0.24.18 * Adapt account history on api changes and fixes issue #267 * Speed up history call, when limit is below 1000 * Improve unit tests for account history * Fix estimate_virtual_op_num, when get_account_history returns an empty entry for an index * Implement _get_operation_filter and use filter operations in history and history_reverse on the https://api.hive.blog api node ## Changelog for 0.24.17 * Fixed a bug when using skip_account_check=True * Refactor code in Account * Add more unit tests ## Changelog for 0.24.16 * Fix bug in bytes representation of an Amount which prevents sending certain amounts (e.g. 8.19 HIVE) * Added unit tests to check if 8.190 is correctly working ## Fixing rounding errors in transfers In version 0.24.16, a rounding bug was fixed which prevents sending 8.19 HIVE. This bug leads to a wrong signature, which then prevents broadcasting the transfer op. This is now fixed. ## Improved error handling in account history The account history and history_reverse functions have now a better error handling. The returned index is now checked, which prevents that account history elements were added twice to the output. ## New filtered account history Currently the new filter parameter are only implemented at &quot;https://api.hive.blog&quot; API node. On this node, the get_account_history call has two more parameters: operation_filter_low and operation_filter_high. These parameters are a bitmask of all possible operation names. They can be obtained with the `_get_operation_filter` function: ``` operation_filter_low, operation_filter_high = account._get_operation_filter(only_ops=[&quot;transfer&quot;, &quot;vote&quot;]) ``` which results in operation_filter_low=5 and operation_filter_high=0. The `history` and `history_reverse` function from beem will now use the operation_filter when &quot;https://api.hive.blog&quot; is set as node. This speeds up receiving account history data up to 100 %. ### History reverse with operation_filter ``` from beem.account import Account from beem import Hive import time hive = Hive(&quot;https://api.hive.blog&quot;) acc = Account(&quot;holger80&quot;, blockchain_instance=hive) start_time = time.time() n_op = acc.virtual_op_count() transfer_ops = list(acc.history_reverse(only_ops=[&quot;transfer&quot;])) print(&quot;Time needed to search all transfers in %d history elements: %.2f s&quot; % (n_op, (time.time() - start_time))) print(&quot;%d transfer op have been found&quot; % (len(transfer_ops))) ``` returns ``` Time needed to search all transfers in 283514 history elements: 145.66 s 4666 transfer op have been found ``` ### History with operation_filter ``` from beem.account import Account from beem import Hive import time hive = Hive(&quot;https://api.hive.blog&quot;) acc = Account(&quot;holger80&quot;, blockchain_instance=hive) start_time = time.time() n_op = acc.virtual_op_count() transfer_ops = list(acc.history(only_ops=[&quot;transfer&quot;])) print(&quot;Time needed to search all transfers in %d history elements: %.2f s&quot; % (n_op, (time.time() - start_time))) print(&quot;%d transfer op have been found&quot; % (len(transfer_ops))) ``` returns ``` Time needed to search all transfers in 283517 history elements: 144.55 s 4666 transfer op have been found ``` ### History without operation filter Now we do the same without filtering: ``` from beem.account import Account from beem import Hive import time hive = Hive(&quot;https://api.hive.blog&quot;) acc = Account(&quot;holger80&quot;, blockchain_instance=hive) start_time = time.time() n_op = acc.virtual_op_count() transfer_ops = [] for op in acc.history(): if op[&quot;type&quot;] == &quot;transfer&quot;: transfer_ops.append(op) print(&quot;Time needed to search all transfers in %d history elements: %.2f s&quot; % (n_op, (time.time() - start_time))) print(&quot;%d transfer op have been found&quot; % (len(transfer_ops))) ``` returns ``` Time needed to search all transfers in 283518 history elements: 261.63 s 4666 transfer op have been found ``` ___ *If you like what I do, consider casting a vote for me as witness on [Hivesigner](https://hivesigner.com/sign/account-witness-vote?witness=holger80&amp;amp;approve=1) or on [PeakD](https://peakd.com/witnesses)* See: Update for beem: improved account history handling by @holger80</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://cdn.steemitimages.com/DQmcRrwLPSywSYMierfP6um6mejeMNGjN9Rxw7audJqTDgb/beem-logo" /><media:content medium="image" url="https://cdn.steemitimages.com/DQmcRrwLPSywSYMierfP6um6mejeMNGjN9Rxw7audJqTDgb/beem-logo" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Tin Toy Update - Eclipse HF</title><link href="https://hivedocs.info/tools/docker/testnet/2020/11/04/tin-toy-update-eclipse-hf.html" rel="alternate" type="text/html" title="Tin Toy Update - Eclipse HF" /><published>2020-11-04T21:11:24-08:00</published><updated>2020-11-04T21:11:24-08:00</updated><id>https://hivedocs.info/tools/docker/testnet/2020/11/04/tin-toy-update-eclipse-hf</id><content type="html" xml:base="https://hivedocs.info/tools/docker/testnet/2020/11/04/tin-toy-update-eclipse-hf.html">&lt;div id=&quot;content-inertia-tin-toy-update-eclipse-hf&quot;&gt;&lt;div class=&quot;pull-right&quot;&gt;
&lt;img src=&quot;https://i.imgur.com/FkZIVUu.jpg&quot; /&gt;
&lt;/div&gt;

Using one command, you can deploy Tin Toy and play around with a tiny toy version of the Hive blockchain:

```bash
docker run -d -p 8091:8091 inertia/tintoy:latest
```

This is handy for developers who want to test their applications without having to use the mainnet.  It's also nice because you don't need to rely on anyone to run a public testnet.  It only takes a few minutes to get up and running.

Once you have your testnet up and running, you can check exactly which version you're on using:

```bash
curl -s --data '{
  &quot;jsonrpc&quot;:&quot;2.0&quot;,
  &quot;method&quot;:&quot;database_api.get_version&quot;,
  &quot;params&quot;:{},
  &quot;id&quot;:1
}' http://localhost:8091 | jq
```

This will return something like:

```json
{
  &quot;jsonrpc&quot;: &quot;2.0&quot;,
  &quot;result&quot;: {
    &quot;blockchain_version&quot;: &quot;1.25.0&quot;,
    &quot;hive_revision&quot;: &quot;21ca61a2253a01aeca5debdcdb202ff89feae27c&quot;,
    &quot;fc_revision&quot;: &quot;21ca61a2253a01aeca5debdcdb202ff89feae27c&quot;,
    &quot;chain_id&quot;: &quot;18dcf0a285365fc58b71f18b3d3fec954aa0c141c44e4e5cb4cf777b9eab274e&quot;
  },
  &quot;id&quot;: 1
}
```

Also see: [related gist](https://gist.github.com/inertia186/b88e7bfff8862858e54c59392e2bce20)

---

To do this *without* docker, see:

https://developers.hive.io/tutorials-recipes/setting-up-a-testnet.html

I originally announced Tin Toy a couple of years ago:

https://hive.blog/@inertia/tin-toy

There are also some extra things you can do with it if you're doing blockchain development or you want to build from a local branch of `hived` (though this is a slightly dated article):

https://hive.blog/@inertia/how-to-do-iterative-steemd-development-on-a-local-testnet
&lt;/div&gt;
&lt;script crossorigin=&quot;anonymous&quot; integrity=&quot;sha256-4+XzXVhsDmqanXGHaHvgh1gMQKX40OUvDEBTu8JcmNs=&quot; src=&quot;https://code.jquery.com/jquery-3.5.1.slim.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://unpkg.com/steem-content-renderer&quot;&gt;&lt;/script&gt;

&lt;script&gt;
  $(document).ready(function() {
    try {
      const renderer = new SteemContentRenderer.DefaultRenderer({
        baseUrl: &quot;https://hive.blog/&quot;,
        breaks: true,
        skipSanitization: false,
        allowInsecureScriptTags: false,
        addNofollowToLinks: true,
        doNotShowImages: false,
        ipfsPrefix: &quot;&quot;,
        assetsWidth: 640,
        assetsHeight: 480,
        imageProxyFn: (url) =&gt; url,
        usertagUrlFn: (account) =&gt; &quot;/@inertia&quot;,
        hashtagUrlFn: (hashtag) =&gt; &quot;/tin-toy-update-eclipse-hf&quot;,
        isLinkSafeFn: (url) =&gt; true,
      });
      
      const inputElem = $('#content-inertia-tin-toy-update-eclipse-hf').html();
      const outputElem = $('#content-inertia-tin-toy-update-eclipse-hf');
      const output = renderer.render(inputElem);
      
      outputElem.html(output);
    } catch(e) {
      console.log(e);
    }
  });
&lt;/script&gt;

&lt;style&gt;
  #content-inertia-tin-toy-update-eclipse-hf {
    padding: 0 3rem;
    color: #444444;
    font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Helvetica, Arial, sans-serif;
    font-size: 16px;
    line-height: 1.8;
    text-shadow: 0 1px 0 #ffffff;
    padding: 0.5rem;
  }
  #content-inertia-tin-toy-update-eclipse-hf code {
    background: white;
  }
  #content-inertia-tin-toy-update-eclipse-hf a {
    border-bottom: 1px solid #444444; color: #444444; text-decoration: none;
  }
  #content-inertia-tin-toy-update-eclipse-hf a:hover {
    border-bottom: 0;
  }
  #content-inertia-tin-toy-update-eclipse-hf h1 {
    font-size: 2.2em;
  }
  #content-inertia-tin-toy-update-eclipse-hf h2, h3, h4, h5 {
    margin-bottom: 0;
  }
  #content-inertia-tin-toy-update-eclipse-hf header small {
    color: #999;
    font-size: 50%;
  }
  #content-inertia-tin-toy-update-eclipse-hf img {
    max-width: 100%;
  }
&lt;/style&gt;

&lt;hr /&gt;

&lt;p&gt;
  See: &lt;a href=&quot;https://peakd.com/hive-139531/@inertia/tin-toy-update-eclipse-hf&quot;&gt;Tin Toy Update - Eclipse HF&lt;/a&gt;
  by
  &lt;a href=&quot;https://hive.blog/@inertia&quot;&gt;@inertia&lt;/a&gt;
&lt;/p&gt;</content><author><name>inertia</name></author><summary type="html">Using one command, you can deploy Tin Toy and play around with a tiny toy version of the Hive blockchain: ```bash docker run -d -p 8091:8091 inertia/tintoy:latest ``` This is handy for developers who want to test their applications without having to use the mainnet. It's also nice because you don't need to rely on anyone to run a public testnet. It only takes a few minutes to get up and running. Once you have your testnet up and running, you can check exactly which version you're on using: ```bash curl -s --data '{ &quot;jsonrpc&quot;:&quot;2.0&quot;, &quot;method&quot;:&quot;database_api.get_version&quot;, &quot;params&quot;:{}, &quot;id&quot;:1 }' http://localhost:8091 | jq ``` This will return something like: ```json { &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;result&quot;: { &quot;blockchain_version&quot;: &quot;1.25.0&quot;, &quot;hive_revision&quot;: &quot;21ca61a2253a01aeca5debdcdb202ff89feae27c&quot;, &quot;fc_revision&quot;: &quot;21ca61a2253a01aeca5debdcdb202ff89feae27c&quot;, &quot;chain_id&quot;: &quot;18dcf0a285365fc58b71f18b3d3fec954aa0c141c44e4e5cb4cf777b9eab274e&quot; }, &quot;id&quot;: 1 } ``` Also see: [related gist](https://gist.github.com/inertia186/b88e7bfff8862858e54c59392e2bce20) --- To do this *without* docker, see: https://developers.hive.io/tutorials-recipes/setting-up-a-testnet.html I originally announced Tin Toy a couple of years ago: https://hive.blog/@inertia/tin-toy There are also some extra things you can do with it if you're doing blockchain development or you want to build from a local branch of `hived` (though this is a slightly dated article): https://hive.blog/@inertia/how-to-do-iterative-steemd-development-on-a-local-testnet See: Tin Toy Update - Eclipse HF by @inertia</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://hivedocs.info/assets/images/favicon.png" /><media:content medium="image" url="https://hivedocs.info/assets/images/favicon.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">BlockTrades update on Hive development work</title><link href="https://hivedocs.info/news/core/development/2020/11/02/blocktrades-update-on-hive-development-work.html" rel="alternate" type="text/html" title="BlockTrades update on Hive development work" /><published>2020-11-02T16:20:21-08:00</published><updated>2020-11-02T16:20:21-08:00</updated><id>https://hivedocs.info/news/core/development/2020/11/02/blocktrades-update-on-hive-development-work</id><content type="html" xml:base="https://hivedocs.info/news/core/development/2020/11/02/blocktrades-update-on-hive-development-work.html">&lt;div id=&quot;content-blocktrades-blocktrades-update-on-hive-development-work&quot;&gt;Last week we continued work on post-HF24 optimizations. Below is a summary of the work done last week and our plans for the upcoming week.

# Hived work (blockchain node software)

We added reporting of some virtual ops related to hive fund for better accounting by a block explorer (done in conjunction with @howo):
https://gitlab.syncad.com/hive/hive/-/merge_requests/144
https://gitlab.syncad.com/hive/hive/-/merge_requests/135

We made fixes to filtering of get_account_history functionality and a fix to the legacy get_account_history plugin (it used a 1-based indexing of operation history instead of a 0-based indexing like the get_account_history_rocksdb plugin, now they both use 0-based indexing):
https://gitlab.syncad.com/hive/hive/-/merge_requests/145
https://gitlab.syncad.com/hive/hive/-/merge_requests/146
https://gitlab.syncad.com/hive/hive/-/merge_requests/148

Fixes to hived API tests:
https://gitlab.syncad.com/hive/hive/-/merge_requests/141

Miscellaneous:
https://gitlab.syncad.com/hive/hive/-/merge_requests/147 (set reported version to 1.24.6)

We’re currently working on a major optimization to the get_block_api plugin that should likely provide a big boost in performance for the get_block API call (this will likely enable us to speed up the hivemind “full sync” process as well). The old implementation used an overly pessimistic mutex locking scheme that severely degraded potential performance under loading.

## Hived status

We completed all tests on changes made in the previous week and this week and there are no known outstanding issues with hived operation (other than the known longstanding issue with servicing of API requests during startup of a hived node).

We plan to tag v1.24.7 as soon as we complete the optimizations to the get_block_api plugin. V1.24.7 will be a recommended upgrade for API node operators, but it doesn’t contain changes needed by witness nodes or exchanges.

# Hivemind

We made numerous optimizations and bug fixes in hivemind this past week:
https://gitlab.syncad.com/hive/hivemind/-/merge_requests/332
https://gitlab.syncad.com/hive/hivemind/-/merge_requests/333
https://gitlab.syncad.com/hive/hivemind/-/merge_requests/330
https://gitlab.syncad.com/hive/hivemind/-/merge_requests/334
https://gitlab.syncad.com/hive/hivemind/-/merge_requests/228
https://gitlab.syncad.com/hive/hivemind/-/merge_requests/335
https://gitlab.syncad.com/hive/hivemind/-/merge_requests/211
https://gitlab.syncad.com/hive/hivemind/-/merge_requests/338
https://gitlab.syncad.com/hive/hivemind/-/merge_requests/341
https://gitlab.syncad.com/hive/hivemind/-/merge_requests/342
https://gitlab.syncad.com/hive/hivemind/-/merge_requests/343
https://gitlab.syncad.com/hive/hivemind/-/merge_requests/344
https://gitlab.syncad.com/hive/hivemind/-/merge_requests/345
One of the more visible fixes is the comment counts are correctly reported now for posts.

Due to the rapid pace with which changes are being made to hivemind, we also started upgrading our automated build-and-test (CI) system to support building on multiple gitlab runners so that our devs could get faster feedback on changes they make. 

The primary challenge was to setup more than one system configured for performing a hivemind sync and to allow troubleshooting in the case of test fails). For speed reasons, hivemind’s CI system is configured to only sync to the 5 millionth block, but we’re adding an option to do testing with a full sync as well (via a manual trigger, as this test is much more time-consuming).
https://gitlab.syncad.com/hive/hivemind/-/merge_requests/327
https://gitlab.syncad.com/hive/hivemind/-/merge_requests/340

We also introduced mock data providers to allow testing of operations that didn’t occur by the 5 millionth block:
https://gitlab.syncad.com/hive/hivemind/-/merge_requests/336


## Hivemind status (2nd layer social media microservice)

We deployed all the above changes to hived and hivemind to our production node, api.hive.blog, and they’re working well. We still have a few optimizations to make (mostly importantly, further speedups to unread_notifications which averages around 1.5 seconds to complete right now).

We created a data dump of our hivemind database and several other API node operators have used that data dump to update their node and begin serving data with the latest code.

# Condenser + Condenser wallet (open-source code for **hive.blog**)

The most visible change that BlockTrades made to condenser last week will likely be deployed tomorrow. This change will update the vote information for a post 9 seconds after the user does an upvote or a downovte on the post:
https://gitlab.syncad.com/hive/condenser/-/merge_requests/136


# What’s the plan for next week?

We’ll be finishing up a few more optimizations to hived and hivemind. In addition to speeding up API calls for both, we’re also going to look at speeding up the hivemind full sync time (currently it takes 4 days). And we’ll continue filling out the test cases in the automated testing suites for both projects.

I’d hope to begin analysis of future features for Hive (both for hardfork 25 and for 2nd layer apps support), but most of our time last week was consumed with optimization of the current system. We did make a little headway on this issue in the Hive developers meeting we had earlier today, though. 

I’ll make a post later this week in the Hive improvements community on some of the features we’re considering both for HF25 and for 2nd layer features (all the hardfork features are ones that have been previously discussed many times by the Hive community and have met general approval). 

One of the nice things about the architecture we’re moving Hive towards is that we can now add more capabilities to Hive without requiring a hardfork to do so. We will still need to do a hardfork when we make governance improvements, of course, but for many of our future features, these features can be released as they become ready, without having to coordinate their release with other features and with exchanges.&lt;/div&gt;
&lt;script crossorigin=&quot;anonymous&quot; integrity=&quot;sha256-4+XzXVhsDmqanXGHaHvgh1gMQKX40OUvDEBTu8JcmNs=&quot; src=&quot;https://code.jquery.com/jquery-3.5.1.slim.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://unpkg.com/steem-content-renderer&quot;&gt;&lt;/script&gt;

&lt;script&gt;
  $(document).ready(function() {
    try {
      const renderer = new SteemContentRenderer.DefaultRenderer({
        baseUrl: &quot;https://hive.blog/&quot;,
        breaks: true,
        skipSanitization: false,
        allowInsecureScriptTags: false,
        addNofollowToLinks: true,
        doNotShowImages: false,
        ipfsPrefix: &quot;&quot;,
        assetsWidth: 640,
        assetsHeight: 480,
        imageProxyFn: (url) =&gt; url,
        usertagUrlFn: (account) =&gt; &quot;/@blocktrades&quot;,
        hashtagUrlFn: (hashtag) =&gt; &quot;/blocktrades-update-on-hive-development-work&quot;,
        isLinkSafeFn: (url) =&gt; true,
      });
      
      const inputElem = $('#content-blocktrades-blocktrades-update-on-hive-development-work').html();
      const outputElem = $('#content-blocktrades-blocktrades-update-on-hive-development-work');
      const output = renderer.render(inputElem);
      
      outputElem.html(output);
    } catch(e) {
      console.log(e);
    }
  });
&lt;/script&gt;

&lt;style&gt;
  #content-blocktrades-blocktrades-update-on-hive-development-work {
    padding: 0 3rem;
    color: #444444;
    font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Helvetica, Arial, sans-serif;
    font-size: 16px;
    line-height: 1.8;
    text-shadow: 0 1px 0 #ffffff;
    padding: 0.5rem;
  }
  #content-blocktrades-blocktrades-update-on-hive-development-work code {
    background: white;
  }
  #content-blocktrades-blocktrades-update-on-hive-development-work a {
    border-bottom: 1px solid #444444; color: #444444; text-decoration: none;
  }
  #content-blocktrades-blocktrades-update-on-hive-development-work a:hover {
    border-bottom: 0;
  }
  #content-blocktrades-blocktrades-update-on-hive-development-work h1 {
    font-size: 2.2em;
  }
  #content-blocktrades-blocktrades-update-on-hive-development-work h2, h3, h4, h5 {
    margin-bottom: 0;
  }
  #content-blocktrades-blocktrades-update-on-hive-development-work header small {
    color: #999;
    font-size: 50%;
  }
  #content-blocktrades-blocktrades-update-on-hive-development-work img {
    max-width: 100%;
  }
&lt;/style&gt;

&lt;hr /&gt;

&lt;p&gt;
  See: &lt;a href=&quot;https://hive.blog/hive-139531/@blocktrades/blocktrades-update-on-hive-development-work&quot;&gt;BlockTrades update on Hive development work&lt;/a&gt;
  by
  &lt;a href=&quot;https://hive.blog/@blocktrades&quot;&gt;@blocktrades&lt;/a&gt;
&lt;/p&gt;</content><author><name>blocktrades</name></author><summary type="html">Last week we continued work on post-HF24 optimizations. Below is a summary of the work done last week and our plans for the upcoming week. # Hived work (blockchain node software) We added reporting of some virtual ops related to hive fund for better accounting by a block explorer (done in conjunction with @howo): https://gitlab.syncad.com/hive/hive/-/merge_requests/144 https://gitlab.syncad.com/hive/hive/-/merge_requests/135 We made fixes to filtering of get_account_history functionality and a fix to the legacy get_account_history plugin (it used a 1-based indexing of operation history instead of a 0-based indexing like the get_account_history_rocksdb plugin, now they both use 0-based indexing): https://gitlab.syncad.com/hive/hive/-/merge_requests/145 https://gitlab.syncad.com/hive/hive/-/merge_requests/146 https://gitlab.syncad.com/hive/hive/-/merge_requests/148 Fixes to hived API tests: https://gitlab.syncad.com/hive/hive/-/merge_requests/141 Miscellaneous: https://gitlab.syncad.com/hive/hive/-/merge_requests/147 (set reported version to 1.24.6) We’re currently working on a major optimization to the get_block_api plugin that should likely provide a big boost in performance for the get_block API call (this will likely enable us to speed up the hivemind “full sync” process as well). The old implementation used an overly pessimistic mutex locking scheme that severely degraded potential performance under loading. ## Hived status We completed all tests on changes made in the previous week and this week and there are no known outstanding issues with hived operation (other than the known longstanding issue with servicing of API requests during startup of a hived node). We plan to tag v1.24.7 as soon as we complete the optimizations to the get_block_api plugin. V1.24.7 will be a recommended upgrade for API node operators, but it doesn’t contain changes needed by witness nodes or exchanges. # Hivemind We made numerous optimizations and bug fixes in hivemind this past week: https://gitlab.syncad.com/hive/hivemind/-/merge_requests/332 https://gitlab.syncad.com/hive/hivemind/-/merge_requests/333 https://gitlab.syncad.com/hive/hivemind/-/merge_requests/330 https://gitlab.syncad.com/hive/hivemind/-/merge_requests/334 https://gitlab.syncad.com/hive/hivemind/-/merge_requests/228 https://gitlab.syncad.com/hive/hivemind/-/merge_requests/335 https://gitlab.syncad.com/hive/hivemind/-/merge_requests/211 https://gitlab.syncad.com/hive/hivemind/-/merge_requests/338 https://gitlab.syncad.com/hive/hivemind/-/merge_requests/341 https://gitlab.syncad.com/hive/hivemind/-/merge_requests/342 https://gitlab.syncad.com/hive/hivemind/-/merge_requests/343 https://gitlab.syncad.com/hive/hivemind/-/merge_requests/344 https://gitlab.syncad.com/hive/hivemind/-/merge_requests/345 One of the more visible fixes is the comment counts are correctly reported now for posts. Due to the rapid pace with which changes are being made to hivemind, we also started upgrading our automated build-and-test (CI) system to support building on multiple gitlab runners so that our devs could get faster feedback on changes they make. The primary challenge was to setup more than one system configured for performing a hivemind sync and to allow troubleshooting in the case of test fails). For speed reasons, hivemind’s CI system is configured to only sync to the 5 millionth block, but we’re adding an option to do testing with a full sync as well (via a manual trigger, as this test is much more time-consuming). https://gitlab.syncad.com/hive/hivemind/-/merge_requests/327 https://gitlab.syncad.com/hive/hivemind/-/merge_requests/340 We also introduced mock data providers to allow testing of operations that didn’t occur by the 5 millionth block: https://gitlab.syncad.com/hive/hivemind/-/merge_requests/336 ## Hivemind status (2nd layer social media microservice) We deployed all the above changes to hived and hivemind to our production node, api.hive.blog, and they’re working well. We still have a few optimizations to make (mostly importantly, further speedups to unread_notifications which averages around 1.5 seconds to complete right now). We created a data dump of our hivemind database and several other API node operators have used that data dump to update their node and begin serving data with the latest code. # Condenser + Condenser wallet (open-source code for **hive.blog**) The most visible change that BlockTrades made to condenser last week will likely be deployed tomorrow. This change will update the vote information for a post 9 seconds after the user does an upvote or a downovte on the post: https://gitlab.syncad.com/hive/condenser/-/merge_requests/136 # What’s the plan for next week? We’ll be finishing up a few more optimizations to hived and hivemind. In addition to speeding up API calls for both, we’re also going to look at speeding up the hivemind full sync time (currently it takes 4 days). And we’ll continue filling out the test cases in the automated testing suites for both projects. I’d hope to begin analysis of future features for Hive (both for hardfork 25 and for 2nd layer apps support), but most of our time last week was consumed with optimization of the current system. We did make a little headway on this issue in the Hive developers meeting we had earlier today, though. I’ll make a post later this week in the Hive improvements community on some of the features we’re considering both for HF25 and for 2nd layer features (all the hardfork features are ones that have been previously discussed many times by the Hive community and have met general approval). One of the nice things about the architecture we’re moving Hive towards is that we can now add more capabilities to Hive without requiring a hardfork to do so. We will still need to do a hardfork when we make governance improvements, of course, but for many of our future features, these features can be released as they become ready, without having to coordinate their release with other features and with exchanges. See: BlockTrades update on Hive development work by @blocktrades</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://hivedocs.info/assets/images/favicon.png" /><media:content medium="image" url="https://hivedocs.info/assets/images/favicon.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Hive developer meeting #12</title><link href="https://hivedocs.info/news/core/development/2020/11/02/hive-developer-meeting-12.html" rel="alternate" type="text/html" title="Hive developer meeting #12" /><published>2020-11-02T14:31:57-08:00</published><updated>2020-11-02T14:31:57-08:00</updated><id>https://hivedocs.info/news/core/development/2020/11/02/hive-developer-meeting-12</id><content type="html" xml:base="https://hivedocs.info/news/core/development/2020/11/02/hive-developer-meeting-12.html">&lt;div id=&quot;content-howo-hive-developer-meeting-12&quot;&gt;https://www.youtube.com/watch?v=w5JnzVP67vo	

Subjects touched upon: 

* Dev sync
* hivemind status
* Documentation
* Hard fork 25 direction
* Initial smart contract thoughts


meeting tl;dr: 

The beginning is a lot of tech talk from @blocktrades and I. We mostly talk about what we've been up to. Regarding documentation, I'll make a post to outline my vision for it regarding a potential structure for it.

Regarding hivemind, I know @imwatsi was interested in contributing, we touch upon that a bit, basically hivemind needs more tests. So this is a great way to get involved. 

Regarding hard fork 25 and its direction we agreed that it should still be &quot;small&quot; (code wise) changes like governance / economy and rc delegations.

And then we dwell on how he envisions smart contracts as a layer 2 engine running on hive and how that would affect SMTs

&lt;/div&gt;
&lt;script crossorigin=&quot;anonymous&quot; integrity=&quot;sha256-4+XzXVhsDmqanXGHaHvgh1gMQKX40OUvDEBTu8JcmNs=&quot; src=&quot;https://code.jquery.com/jquery-3.5.1.slim.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://unpkg.com/steem-content-renderer&quot;&gt;&lt;/script&gt;

&lt;script&gt;
  $(document).ready(function() {
    try {
      const renderer = new SteemContentRenderer.DefaultRenderer({
        baseUrl: &quot;https://hive.blog/&quot;,
        breaks: true,
        skipSanitization: false,
        allowInsecureScriptTags: false,
        addNofollowToLinks: true,
        doNotShowImages: false,
        ipfsPrefix: &quot;&quot;,
        assetsWidth: 640,
        assetsHeight: 480,
        imageProxyFn: (url) =&gt; url,
        usertagUrlFn: (account) =&gt; &quot;/@howo&quot;,
        hashtagUrlFn: (hashtag) =&gt; &quot;/hive-developer-meeting-12&quot;,
        isLinkSafeFn: (url) =&gt; true,
      });
      
      const inputElem = $('#content-howo-hive-developer-meeting-12').html();
      const outputElem = $('#content-howo-hive-developer-meeting-12');
      const output = renderer.render(inputElem);
      
      outputElem.html(output);
    } catch(e) {
      console.log(e);
    }
  });
&lt;/script&gt;

&lt;style&gt;
  #content-howo-hive-developer-meeting-12 {
    padding: 0 3rem;
    color: #444444;
    font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Helvetica, Arial, sans-serif;
    font-size: 16px;
    line-height: 1.8;
    text-shadow: 0 1px 0 #ffffff;
    padding: 0.5rem;
  }
  #content-howo-hive-developer-meeting-12 code {
    background: white;
  }
  #content-howo-hive-developer-meeting-12 a {
    border-bottom: 1px solid #444444; color: #444444; text-decoration: none;
  }
  #content-howo-hive-developer-meeting-12 a:hover {
    border-bottom: 0;
  }
  #content-howo-hive-developer-meeting-12 h1 {
    font-size: 2.2em;
  }
  #content-howo-hive-developer-meeting-12 h2, h3, h4, h5 {
    margin-bottom: 0;
  }
  #content-howo-hive-developer-meeting-12 header small {
    color: #999;
    font-size: 50%;
  }
  #content-howo-hive-developer-meeting-12 img {
    max-width: 100%;
  }
&lt;/style&gt;

&lt;hr /&gt;

&lt;p&gt;
  See: &lt;a href=&quot;https://peakd.com/hive/@howo/hive-developer-meeting-12&quot;&gt;Hive developer meeting #12&lt;/a&gt;
  by
  &lt;a href=&quot;https://hive.blog/@howo&quot;&gt;@howo&lt;/a&gt;
&lt;/p&gt;</content><author><name>howo</name></author><summary type="html">https://www.youtube.com/watch?v=w5JnzVP67vo Subjects touched upon: * Dev sync * hivemind status * Documentation * Hard fork 25 direction * Initial smart contract thoughts meeting tl;dr: The beginning is a lot of tech talk from @blocktrades and I. We mostly talk about what we've been up to. Regarding documentation, I'll make a post to outline my vision for it regarding a potential structure for it. Regarding hivemind, I know @imwatsi was interested in contributing, we touch upon that a bit, basically hivemind needs more tests. So this is a great way to get involved. Regarding hard fork 25 and its direction we agreed that it should still be &quot;small&quot; (code wise) changes like governance / economy and rc delegations. And then we dwell on how he envisions smart contracts as a layer 2 engine running on hive and how that would affect SMTs See: Hive developer meeting #12 by @howo</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://hivedocs.info/assets/images/favicon.png" /><media:content medium="image" url="https://hivedocs.info/assets/images/favicon.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Announcing the Hive Node Beacon project</title><link href="https://hivedocs.info/news/devops/api/2020/10/30/announcing-the-hive-node-beacon-project.html" rel="alternate" type="text/html" title="Announcing the Hive Node Beacon project" /><published>2020-10-30T14:48:03-07:00</published><updated>2020-10-30T14:48:03-07:00</updated><id>https://hivedocs.info/news/devops/api/2020/10/30/announcing-the-hive-node-beacon-project</id><content type="html" xml:base="https://hivedocs.info/news/devops/api/2020/10/30/announcing-the-hive-node-beacon-project.html">&lt;div id=&quot;content-peakd-announcing-the-hive-node-beacon-project&quot;&gt;Today we are happy to announce a new tool created to improve the experience of PeakD (and Hive) users.

&lt;center&gt;&lt;h5&gt;Check it out on https://beacon.peakd.com&lt;/h5&gt;&lt;/center&gt;

![beacon_cover_v1.jpg](https://files.peakd.com/file/peakd-hive/peakd/9RKDLN5s-beacon_cover_v1.jpg)

This new tool is already integrated into PeakD itself and allow users to automatically switch the API node to the best one available.

Also this is the first project released as [open source](https://github.com/peak-projects/peakd-node-beacon) so others can benefit from the work we do on PeakD.
We are planning to release more tools and libraries as open source in the near future, so hopefully this is only the first post of the list :)


#### Current status for the API nodes

You can check this on the website itself, but sharing here for a quick look

![image.png](https://files.peakd.com/file/peakd-hive/peakd/Xi1xPui8-image.png)

As you can see there are no nodes at the moment fully working. Please keep in mind that nodes are working perfectly fine on the chain level, just the social part powered by Hivemind still have some things to be fixed after the last HF. 


#### API checks

To understand how the above scores are computed you can check the list of the tests performed for each node (clicking on the magnifying glass).

![image.png](https://files.peakd.com/file/peakd-hive/peakd/1RoII1j0-image.png)

To get a better understanding of each check you can hover with the mouse on the (?) icon.

![image.png](https://files.peakd.com/file/peakd-hive/peakd/R5NKk1hz-image.png)


#### Future plans and improvements

The tool is up and running and free to use right now, but we already have some ideas to make it better and to integrate more with [peakd.com](https://peakd.com) itself:
- Integrate in the [Node Benchmark](https://peakd.com/me/tools/benchmark) page
- Allow users to perform a speed test from Beacon itself
- Integrate in the [Status](https://status.peakd.com) page
- Allow users to select multiple nodes in their Settings with a specified order preference.

---


## Support the @peakd project

Now is probably a nice time to remind you of the ways you can support the development of @peakd.

![Selection_298.png](https://files.peakd.com/file/peakd-hive/peakd/w36DQpO7-Selection_298.png)

We have a proposal on the Decentralized Hive Fund. You can review the proposal [here](/proposals/52).
If you agree to the proposal and you think the points mentioned add value to the Hive Blockchain consider supporting it using the above links or directly with **[this link](https://hivesigner.com/sign/update-proposal-votes?proposal_ids=[52]&amp;amp;approve=true)**.

--- 

We also run a witness server to help produce the blocks for the Hive Blockchain. You can vote for our witness so we are in a position to process more of them.

Vote on the witness page: https://peakd.com/witnesses

- Using Keychain: You just have to click and approve the transaction
- Using HiveSigner: You'll need access to confirm the transaction with your Active Key at least

---

###### *The PeakD Team*
_About us: https://peakd.com/about_
_Join us on Discord: https://discord.gg/Fy3bca5_&lt;/div&gt;
&lt;script crossorigin=&quot;anonymous&quot; integrity=&quot;sha256-4+XzXVhsDmqanXGHaHvgh1gMQKX40OUvDEBTu8JcmNs=&quot; src=&quot;https://code.jquery.com/jquery-3.5.1.slim.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://unpkg.com/steem-content-renderer&quot;&gt;&lt;/script&gt;

&lt;script&gt;
  $(document).ready(function() {
    try {
      const renderer = new SteemContentRenderer.DefaultRenderer({
        baseUrl: &quot;https://hive.blog/&quot;,
        breaks: true,
        skipSanitization: false,
        allowInsecureScriptTags: false,
        addNofollowToLinks: true,
        doNotShowImages: false,
        ipfsPrefix: &quot;&quot;,
        assetsWidth: 640,
        assetsHeight: 480,
        imageProxyFn: (url) =&gt; url,
        usertagUrlFn: (account) =&gt; &quot;/@peakd&quot;,
        hashtagUrlFn: (hashtag) =&gt; &quot;/announcing-the-hive-node-beacon-project&quot;,
        isLinkSafeFn: (url) =&gt; true,
      });
      
      const inputElem = $('#content-peakd-announcing-the-hive-node-beacon-project').html();
      const outputElem = $('#content-peakd-announcing-the-hive-node-beacon-project');
      const output = renderer.render(inputElem);
      
      outputElem.html(output);
    } catch(e) {
      console.log(e);
    }
  });
&lt;/script&gt;

&lt;style&gt;
  #content-peakd-announcing-the-hive-node-beacon-project {
    padding: 0 3rem;
    color: #444444;
    font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Helvetica, Arial, sans-serif;
    font-size: 16px;
    line-height: 1.8;
    text-shadow: 0 1px 0 #ffffff;
    padding: 0.5rem;
  }
  #content-peakd-announcing-the-hive-node-beacon-project code {
    background: white;
  }
  #content-peakd-announcing-the-hive-node-beacon-project a {
    border-bottom: 1px solid #444444; color: #444444; text-decoration: none;
  }
  #content-peakd-announcing-the-hive-node-beacon-project a:hover {
    border-bottom: 0;
  }
  #content-peakd-announcing-the-hive-node-beacon-project h1 {
    font-size: 2.2em;
  }
  #content-peakd-announcing-the-hive-node-beacon-project h2, h3, h4, h5 {
    margin-bottom: 0;
  }
  #content-peakd-announcing-the-hive-node-beacon-project header small {
    color: #999;
    font-size: 50%;
  }
  #content-peakd-announcing-the-hive-node-beacon-project img {
    max-width: 100%;
  }
&lt;/style&gt;

&lt;hr /&gt;

&lt;p&gt;
  See: &lt;a href=&quot;https://peakd.com/hive-139531/@peakd/announcing-the-hive-node-beacon-project&quot;&gt;Announcing the Hive Node Beacon project&lt;/a&gt;
  by
  &lt;a href=&quot;https://hive.blog/@peakd&quot;&gt;@peakd&lt;/a&gt;
&lt;/p&gt;</content><author><name>peakd</name></author><summary type="html">Today we are happy to announce a new tool created to improve the experience of PeakD (and Hive) users. Check it out on https://beacon.peakd.com ![beacon_cover_v1.jpg](https://files.peakd.com/file/peakd-hive/peakd/9RKDLN5s-beacon_cover_v1.jpg) This new tool is already integrated into PeakD itself and allow users to automatically switch the API node to the best one available. Also this is the first project released as [open source](https://github.com/peak-projects/peakd-node-beacon) so others can benefit from the work we do on PeakD. We are planning to release more tools and libraries as open source in the near future, so hopefully this is only the first post of the list :) #### Current status for the API nodes You can check this on the website itself, but sharing here for a quick look ![image.png](https://files.peakd.com/file/peakd-hive/peakd/Xi1xPui8-image.png) As you can see there are no nodes at the moment fully working. Please keep in mind that nodes are working perfectly fine on the chain level, just the social part powered by Hivemind still have some things to be fixed after the last HF. #### API checks To understand how the above scores are computed you can check the list of the tests performed for each node (clicking on the magnifying glass). ![image.png](https://files.peakd.com/file/peakd-hive/peakd/1RoII1j0-image.png) To get a better understanding of each check you can hover with the mouse on the (?) icon. ![image.png](https://files.peakd.com/file/peakd-hive/peakd/R5NKk1hz-image.png) #### Future plans and improvements The tool is up and running and free to use right now, but we already have some ideas to make it better and to integrate more with [peakd.com](https://peakd.com) itself: - Integrate in the [Node Benchmark](https://peakd.com/me/tools/benchmark) page - Allow users to perform a speed test from Beacon itself - Integrate in the [Status](https://status.peakd.com) page - Allow users to select multiple nodes in their Settings with a specified order preference. --- ## Support the @peakd project Now is probably a nice time to remind you of the ways you can support the development of @peakd. ![Selection_298.png](https://files.peakd.com/file/peakd-hive/peakd/w36DQpO7-Selection_298.png) We have a proposal on the Decentralized Hive Fund. You can review the proposal [here](/proposals/52). If you agree to the proposal and you think the points mentioned add value to the Hive Blockchain consider supporting it using the above links or directly with **[this link](https://hivesigner.com/sign/update-proposal-votes?proposal_ids=[52]&amp;amp;approve=true)**. --- We also run a witness server to help produce the blocks for the Hive Blockchain. You can vote for our witness so we are in a position to process more of them. Vote on the witness page: https://peakd.com/witnesses - Using Keychain: You just have to click and approve the transaction - Using HiveSigner: You'll need access to confirm the transaction with your Active Key at least --- ###### *The PeakD Team* _About us: https://peakd.com/about_ _Join us on Discord: https://discord.gg/Fy3bca5_ See: Announcing the Hive Node Beacon project by @peakd</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://hivedocs.info/assets/images/favicon.png" /><media:content medium="image" url="https://hivedocs.info/assets/images/favicon.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Update on BlockTrades Hive core coding</title><link href="https://hivedocs.info/news/core/development/2020/10/26/update-on-blocktrades-hive-core-coding.html" rel="alternate" type="text/html" title="Update on BlockTrades Hive core coding" /><published>2020-10-26T14:24:48-07:00</published><updated>2020-10-26T14:24:48-07:00</updated><id>https://hivedocs.info/news/core/development/2020/10/26/update-on-blocktrades-hive-core-coding</id><content type="html" xml:base="https://hivedocs.info/news/core/development/2020/10/26/update-on-blocktrades-hive-core-coding.html">&lt;div id=&quot;content-blocktrades-update-on-blocktrades-hive-core-coding&quot;&gt;We’ve spent the past week analyzing the performance of Eclipse hived/hivemind in our API service (api.hive.blog) and making improvements based on real-world loading patterns. 

It’s been a very productive week and we’ve resolved most of the outstanding issues reported and performance problems we observed. We’ve also identified and fixed several longstanding issues in the hived mutex locking code that prevented peak performance and led to potential data corruption issues.

# Hived work (blockchain node software)

We made a number of non-consensus changes to improve hived performance and fix old bugs:

We reviewed the locking used to protect the chainbase database and found several serious longstanding bugs that showed up under high stress API loading of a hived node. These bugs could lead to data corruption and non-optimal performance. Those fixes are incorporated into this merge request:
https://gitlab.syncad.com/hive/hive/-/merge_requests/143


After fixing these problems, we ran several high stress tests using the `siege` tool and were unable to “break” hived’s operation anymore. We were also able to get hived to fully utilize all the server’s cores (48 on our test system), demonstrating that the locking is fairly optimal for realistic loads.

As a performance optimization, we enabled filtering of operations returned by one of the most time-consuming API calls, `get_account_history`: 
https://gitlab.syncad.com/hive/hive/-/merge_requests/136
https://gitlab.syncad.com/hive/hive/-/merge_requests/137
https://gitlab.syncad.com/hive/hive/-/merge_requests/139


We made several changes to API responses returned by hived, mostly in response to reports from apps developers:
https://gitlab.syncad.com/hive/hive/-/merge_requests/125
https://gitlab.syncad.com/hive/hive/-/merge_requests/126
https://gitlab.syncad.com/hive/hive/-/merge_requests/133

We also limited the max number of operation of operations to  that can be fetched by this call to 1k operations (previously it allowed up to 10k operations) to optimize hived throughput: https://gitlab.syncad.com/hive/hive/-/commit/9a05f4d780fc98b891f51ab4b88ebec89fde467b

We corrected account-impacting for several virtual operations created recently:
https://gitlab.syncad.com/hive/hive/-/merge_requests/134

## Hived status

We started a full replay and a full sync early this morning to check all the above changes (full replay takes around 18 hours). We don’t expect any issues, but there is a very small chance for issues due to the mutex locking changes, even though no consensus changes were made.

With these changes, I think hived’s performance and reliability has been substantially improved over its  past condition and it seems quite solid in the face of very substantial API traffic loading. 

One minor issue still to be resolved is the longstanding issue with hived crashing if it receives API traffic when starting up, so we may tackle that next, since it can be an annoyance when updating several hiveds deployed inside of a API server node configuration. 

**As this version contains substantial operational improvements, we’ve tagged this version as [v1.24.5](https://gitlab.syncad.com/hive/hive/-/releases/v1.24.5), and it’s a strongly recommended upgrade for all API server nodes. However, there’s no need for exchanges or consensus nodes to upgrade to this version, since the performance improvements mostly come into play when a node is handling significant API traffic.**

# Hivemind

We made numerous optimizations and bug fixes in hivemind this past week:

https://gitlab.syncad.com/hive/hivemind/-/merge_requests/311
https://gitlab.syncad.com/hive/hivemind/-/merge_requests/306
https://gitlab.syncad.com/hive/hivemind/-/merge_requests/312
https://gitlab.syncad.com/hive/hivemind/-/merge_requests/314
https://gitlab.syncad.com/hive/hivemind/-/merge_requests/291
https://gitlab.syncad.com/hive/hivemind/-/merge_requests/280
https://gitlab.syncad.com/hive/hivemind/-/merge_requests/316
https://gitlab.syncad.com/hive/hivemind/-/merge_requests/318
https://gitlab.syncad.com/hive/hivemind/-/merge_requests/323
https://gitlab.syncad.com/hive/hivemind/-/merge_requests/226
https://gitlab.syncad.com/hive/hivemind/-/merge_requests/322
https://gitlab.syncad.com/hive/hivemind/-/merge_requests/289
https://gitlab.syncad.com/hive/hivemind/-/merge_requests/315
https://gitlab.syncad.com/hive/hivemind/-/merge_requests/326
https://gitlab.syncad.com/hive/hivemind/-/merge_requests/321
https://gitlab.syncad.com/hive/hivemind/-/merge_requests/325
https://gitlab.syncad.com/hive/hivemind/-/merge_requests/328



## Hivemind status (2nd layer social media microservice)

By late tomorrow I expect we’ll have resolved all the remaining big issues with hivemind responses and performance, other than reputation support (which we’ve intentionally left out until all other issues were resolved).

# Condenser + Condenser wallet (open-source code for **hive.blog**)

Merged in support for decentralized lists:
https://gitlab.syncad.com/hive/condenser/-/merge_requests/135
This functionality is still waiting one last issue to be resolved in hivemind, so it won’t be fully testable until tomorrow when we deploy a new version of hivemind.

We made numerous changes this week to improve condenser’s wallet (corrected some display issues and improved performance of page loads by using newer, faster API calls), including new features in the proposals page:
https://gitlab.syncad.com/hive/wallet/-/merge_requests/42
https://gitlab.syncad.com/hive/wallet/-/merge_requests/43
https://gitlab.syncad.com/hive/wallet/-/merge_requests/45
https://gitlab.syncad.com/hive/wallet/-/merge_requests/52
https://gitlab.syncad.com/hive/wallet/-/merge_requests/54
https://gitlab.syncad.com/hive/wallet/-/merge_requests/55
https://gitlab.syncad.com/hive/wallet/-/merge_requests/56
https://gitlab.syncad.com/hive/wallet/-/merge_requests/57
https://gitlab.syncad.com/hive/wallet/-/merge_requests/60
https://gitlab.syncad.com/hive/wallet/-/merge_requests/62
https://gitlab.syncad.com/hive/wallet/-/merge_requests/64
https://gitlab.syncad.com/hive/wallet/-/merge_requests/65
https://gitlab.syncad.com/hive/wallet/-/merge_requests/68
https://gitlab.syncad.com/hive/wallet/-/merge_requests/70

Proposals page changes:
https://gitlab.syncad.com/hive/wallet/-/merge_requests/47
https://gitlab.syncad.com/hive/wallet/-/merge_requests/49
https://gitlab.syncad.com/hive/wallet/-/merge_requests/51


## Condenser status

Condenser is looking pretty good at this point, but we’ll continue to test and look for any remaining problems.

# Hive-js improvements

In order to make hive.blog faster, we modified hive-js to support the new option to filter the operations fetched by the get_account_history call:
https://gitlab.syncad.com/hive/hive-js/-/merge_requests/12
https://gitlab.syncad.com/hive/hive-js/-/merge_requests/13
https://gitlab.syncad.com/hive/hive-js/-/merge_requests/14



# What’s next for the week?

Tomorrow we’ll hopefully be deploying a new hivemind with all the performance improvements and fixes we made in the last week, after some real world traffic testing on our API node.

We’ll also be testing condenser and the wallet and looking for fixes and optimizations we can make.

**Assuming deployment of latest hivemind goes well tomorrow, we’ll likely still need to make a few more fixes as issues get reported, but I expect that by the latter part of the coming week we can begin to analyze feasibility for various previously suggested features for HF25 and also intermediate changes that aren’t consensus changes that can be released earlier.**&lt;/div&gt;
&lt;script crossorigin=&quot;anonymous&quot; integrity=&quot;sha256-4+XzXVhsDmqanXGHaHvgh1gMQKX40OUvDEBTu8JcmNs=&quot; src=&quot;https://code.jquery.com/jquery-3.5.1.slim.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://unpkg.com/steem-content-renderer&quot;&gt;&lt;/script&gt;

&lt;script&gt;
  $(document).ready(function() {
    try {
      const renderer = new SteemContentRenderer.DefaultRenderer({
        baseUrl: &quot;https://hive.blog/&quot;,
        breaks: true,
        skipSanitization: false,
        allowInsecureScriptTags: false,
        addNofollowToLinks: true,
        doNotShowImages: false,
        ipfsPrefix: &quot;&quot;,
        assetsWidth: 640,
        assetsHeight: 480,
        imageProxyFn: (url) =&gt; url,
        usertagUrlFn: (account) =&gt; &quot;/@blocktrades&quot;,
        hashtagUrlFn: (hashtag) =&gt; &quot;/update-on-blocktrades-hive-core-coding&quot;,
        isLinkSafeFn: (url) =&gt; true,
      });
      
      const inputElem = $('#content-blocktrades-update-on-blocktrades-hive-core-coding').html();
      const outputElem = $('#content-blocktrades-update-on-blocktrades-hive-core-coding');
      const output = renderer.render(inputElem);
      
      outputElem.html(output);
    } catch(e) {
      console.log(e);
    }
  });
&lt;/script&gt;

&lt;style&gt;
  #content-blocktrades-update-on-blocktrades-hive-core-coding {
    padding: 0 3rem;
    color: #444444;
    font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Helvetica, Arial, sans-serif;
    font-size: 16px;
    line-height: 1.8;
    text-shadow: 0 1px 0 #ffffff;
    padding: 0.5rem;
  }
  #content-blocktrades-update-on-blocktrades-hive-core-coding code {
    background: white;
  }
  #content-blocktrades-update-on-blocktrades-hive-core-coding a {
    border-bottom: 1px solid #444444; color: #444444; text-decoration: none;
  }
  #content-blocktrades-update-on-blocktrades-hive-core-coding a:hover {
    border-bottom: 0;
  }
  #content-blocktrades-update-on-blocktrades-hive-core-coding h1 {
    font-size: 2.2em;
  }
  #content-blocktrades-update-on-blocktrades-hive-core-coding h2, h3, h4, h5 {
    margin-bottom: 0;
  }
  #content-blocktrades-update-on-blocktrades-hive-core-coding header small {
    color: #999;
    font-size: 50%;
  }
  #content-blocktrades-update-on-blocktrades-hive-core-coding img {
    max-width: 100%;
  }
&lt;/style&gt;

&lt;hr /&gt;

&lt;p&gt;
  See: &lt;a href=&quot;https://hive.blog/hive-139531/@blocktrades/update-on-blocktrades-hive-core-coding&quot;&gt;Update on BlockTrades Hive core coding&lt;/a&gt;
  by
  &lt;a href=&quot;https://hive.blog/@blocktrades&quot;&gt;@blocktrades&lt;/a&gt;
&lt;/p&gt;</content><author><name>blocktrades</name></author><summary type="html">We’ve spent the past week analyzing the performance of Eclipse hived/hivemind in our API service (api.hive.blog) and making improvements based on real-world loading patterns. It’s been a very productive week and we’ve resolved most of the outstanding issues reported and performance problems we observed. We’ve also identified and fixed several longstanding issues in the hived mutex locking code that prevented peak performance and led to potential data corruption issues. # Hived work (blockchain node software) We made a number of non-consensus changes to improve hived performance and fix old bugs: We reviewed the locking used to protect the chainbase database and found several serious longstanding bugs that showed up under high stress API loading of a hived node. These bugs could lead to data corruption and non-optimal performance. Those fixes are incorporated into this merge request: https://gitlab.syncad.com/hive/hive/-/merge_requests/143 After fixing these problems, we ran several high stress tests using the `siege` tool and were unable to “break” hived’s operation anymore. We were also able to get hived to fully utilize all the server’s cores (48 on our test system), demonstrating that the locking is fairly optimal for realistic loads. As a performance optimization, we enabled filtering of operations returned by one of the most time-consuming API calls, `get_account_history`: https://gitlab.syncad.com/hive/hive/-/merge_requests/136 https://gitlab.syncad.com/hive/hive/-/merge_requests/137 https://gitlab.syncad.com/hive/hive/-/merge_requests/139 We made several changes to API responses returned by hived, mostly in response to reports from apps developers: https://gitlab.syncad.com/hive/hive/-/merge_requests/125 https://gitlab.syncad.com/hive/hive/-/merge_requests/126 https://gitlab.syncad.com/hive/hive/-/merge_requests/133 We also limited the max number of operation of operations to that can be fetched by this call to 1k operations (previously it allowed up to 10k operations) to optimize hived throughput: https://gitlab.syncad.com/hive/hive/-/commit/9a05f4d780fc98b891f51ab4b88ebec89fde467b We corrected account-impacting for several virtual operations created recently: https://gitlab.syncad.com/hive/hive/-/merge_requests/134 ## Hived status We started a full replay and a full sync early this morning to check all the above changes (full replay takes around 18 hours). We don’t expect any issues, but there is a very small chance for issues due to the mutex locking changes, even though no consensus changes were made. With these changes, I think hived’s performance and reliability has been substantially improved over its past condition and it seems quite solid in the face of very substantial API traffic loading. One minor issue still to be resolved is the longstanding issue with hived crashing if it receives API traffic when starting up, so we may tackle that next, since it can be an annoyance when updating several hiveds deployed inside of a API server node configuration. **As this version contains substantial operational improvements, we’ve tagged this version as [v1.24.5](https://gitlab.syncad.com/hive/hive/-/releases/v1.24.5), and it’s a strongly recommended upgrade for all API server nodes. However, there’s no need for exchanges or consensus nodes to upgrade to this version, since the performance improvements mostly come into play when a node is handling significant API traffic.** # Hivemind We made numerous optimizations and bug fixes in hivemind this past week: https://gitlab.syncad.com/hive/hivemind/-/merge_requests/311 https://gitlab.syncad.com/hive/hivemind/-/merge_requests/306 https://gitlab.syncad.com/hive/hivemind/-/merge_requests/312 https://gitlab.syncad.com/hive/hivemind/-/merge_requests/314 https://gitlab.syncad.com/hive/hivemind/-/merge_requests/291 https://gitlab.syncad.com/hive/hivemind/-/merge_requests/280 https://gitlab.syncad.com/hive/hivemind/-/merge_requests/316 https://gitlab.syncad.com/hive/hivemind/-/merge_requests/318 https://gitlab.syncad.com/hive/hivemind/-/merge_requests/323 https://gitlab.syncad.com/hive/hivemind/-/merge_requests/226 https://gitlab.syncad.com/hive/hivemind/-/merge_requests/322 https://gitlab.syncad.com/hive/hivemind/-/merge_requests/289 https://gitlab.syncad.com/hive/hivemind/-/merge_requests/315 https://gitlab.syncad.com/hive/hivemind/-/merge_requests/326 https://gitlab.syncad.com/hive/hivemind/-/merge_requests/321 https://gitlab.syncad.com/hive/hivemind/-/merge_requests/325 https://gitlab.syncad.com/hive/hivemind/-/merge_requests/328 ## Hivemind status (2nd layer social media microservice) By late tomorrow I expect we’ll have resolved all the remaining big issues with hivemind responses and performance, other than reputation support (which we’ve intentionally left out until all other issues were resolved). # Condenser + Condenser wallet (open-source code for **hive.blog**) Merged in support for decentralized lists: https://gitlab.syncad.com/hive/condenser/-/merge_requests/135 This functionality is still waiting one last issue to be resolved in hivemind, so it won’t be fully testable until tomorrow when we deploy a new version of hivemind. We made numerous changes this week to improve condenser’s wallet (corrected some display issues and improved performance of page loads by using newer, faster API calls), including new features in the proposals page: https://gitlab.syncad.com/hive/wallet/-/merge_requests/42 https://gitlab.syncad.com/hive/wallet/-/merge_requests/43 https://gitlab.syncad.com/hive/wallet/-/merge_requests/45 https://gitlab.syncad.com/hive/wallet/-/merge_requests/52 https://gitlab.syncad.com/hive/wallet/-/merge_requests/54 https://gitlab.syncad.com/hive/wallet/-/merge_requests/55 https://gitlab.syncad.com/hive/wallet/-/merge_requests/56 https://gitlab.syncad.com/hive/wallet/-/merge_requests/57 https://gitlab.syncad.com/hive/wallet/-/merge_requests/60 https://gitlab.syncad.com/hive/wallet/-/merge_requests/62 https://gitlab.syncad.com/hive/wallet/-/merge_requests/64 https://gitlab.syncad.com/hive/wallet/-/merge_requests/65 https://gitlab.syncad.com/hive/wallet/-/merge_requests/68 https://gitlab.syncad.com/hive/wallet/-/merge_requests/70 Proposals page changes: https://gitlab.syncad.com/hive/wallet/-/merge_requests/47 https://gitlab.syncad.com/hive/wallet/-/merge_requests/49 https://gitlab.syncad.com/hive/wallet/-/merge_requests/51 ## Condenser status Condenser is looking pretty good at this point, but we’ll continue to test and look for any remaining problems. # Hive-js improvements In order to make hive.blog faster, we modified hive-js to support the new option to filter the operations fetched by the get_account_history call: https://gitlab.syncad.com/hive/hive-js/-/merge_requests/12 https://gitlab.syncad.com/hive/hive-js/-/merge_requests/13 https://gitlab.syncad.com/hive/hive-js/-/merge_requests/14 # What’s next for the week? Tomorrow we’ll hopefully be deploying a new hivemind with all the performance improvements and fixes we made in the last week, after some real world traffic testing on our API node. We’ll also be testing condenser and the wallet and looking for fixes and optimizations we can make. **Assuming deployment of latest hivemind goes well tomorrow, we’ll likely still need to make a few more fixes as issues get reported, but I expect that by the latter part of the coming week we can begin to analyze feasibility for various previously suggested features for HF25 and also intermediate changes that aren’t consensus changes that can be released earlier.** See: Update on BlockTrades Hive core coding by @blocktrades</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://hivedocs.info/assets/images/favicon.png" /><media:content medium="image" url="https://hivedocs.info/assets/images/favicon.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Hive core developper meeting #11</title><link href="https://hivedocs.info/news/core/development/2020/10/23/hive-core-developper-meeting-11.html" rel="alternate" type="text/html" title="Hive core developper meeting #11" /><published>2020-10-23T03:36:15-07:00</published><updated>2020-10-23T03:36:15-07:00</updated><id>https://hivedocs.info/news/core/development/2020/10/23/hive-core-developper-meeting-11</id><content type="html" xml:base="https://hivedocs.info/news/core/development/2020/10/23/hive-core-developper-meeting-11.html">&lt;div id=&quot;content-howo-hive-core-developper-meeting-11&quot;&gt;https://www.youtube.com/watch?v=zTFpbEo8Ptw

&lt;a href=&quot;https://www.youtube.com/watch?v=zTFpbEo8Ptw&quot;&gt; youtube url&lt;/a&gt;

subjects touched on:
* Dev Sync
* problems encountered with hivemind pending issues
* Update of documentation (who/when/how)
* Clarification on the organization/coordination of the work of developers external to the BT team with the latter
* Patreon use case and tech limitations
* communities v2 ?
* Language field in hivemind
* Get discussion in a tree instead of an array
* Airdrop distribution round
* 5 minute post limit removal 

This was one of the longest dev meetings as there was a lot of things that were touched on. I highly encourage you to give it a listen :)&lt;/div&gt;
&lt;script crossorigin=&quot;anonymous&quot; integrity=&quot;sha256-4+XzXVhsDmqanXGHaHvgh1gMQKX40OUvDEBTu8JcmNs=&quot; src=&quot;https://code.jquery.com/jquery-3.5.1.slim.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://unpkg.com/steem-content-renderer&quot;&gt;&lt;/script&gt;

&lt;script&gt;
  $(document).ready(function() {
    try {
      const renderer = new SteemContentRenderer.DefaultRenderer({
        baseUrl: &quot;https://hive.blog/&quot;,
        breaks: true,
        skipSanitization: false,
        allowInsecureScriptTags: false,
        addNofollowToLinks: true,
        doNotShowImages: false,
        ipfsPrefix: &quot;&quot;,
        assetsWidth: 640,
        assetsHeight: 480,
        imageProxyFn: (url) =&gt; url,
        usertagUrlFn: (account) =&gt; &quot;/@howo&quot;,
        hashtagUrlFn: (hashtag) =&gt; &quot;/hive-core-developper-meeting-11&quot;,
        isLinkSafeFn: (url) =&gt; true,
      });
      
      const inputElem = $('#content-howo-hive-core-developper-meeting-11').html();
      const outputElem = $('#content-howo-hive-core-developper-meeting-11');
      const output = renderer.render(inputElem);
      
      outputElem.html(output);
    } catch(e) {
      console.log(e);
    }
  });
&lt;/script&gt;

&lt;style&gt;
  #content-howo-hive-core-developper-meeting-11 {
    padding: 0 3rem;
    color: #444444;
    font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Helvetica, Arial, sans-serif;
    font-size: 16px;
    line-height: 1.8;
    text-shadow: 0 1px 0 #ffffff;
    padding: 0.5rem;
  }
  #content-howo-hive-core-developper-meeting-11 code {
    background: white;
  }
  #content-howo-hive-core-developper-meeting-11 a {
    border-bottom: 1px solid #444444; color: #444444; text-decoration: none;
  }
  #content-howo-hive-core-developper-meeting-11 a:hover {
    border-bottom: 0;
  }
  #content-howo-hive-core-developper-meeting-11 h1 {
    font-size: 2.2em;
  }
  #content-howo-hive-core-developper-meeting-11 h2, h3, h4, h5 {
    margin-bottom: 0;
  }
  #content-howo-hive-core-developper-meeting-11 header small {
    color: #999;
    font-size: 50%;
  }
  #content-howo-hive-core-developper-meeting-11 img {
    max-width: 100%;
  }
&lt;/style&gt;

&lt;hr /&gt;

&lt;p&gt;
  See: &lt;a href=&quot;https://hive.blog/core/@howo/hive-core-developper-meeting-11&quot;&gt;Hive core developper meeting #11&lt;/a&gt;
  by
  &lt;a href=&quot;https://hive.blog/@howo&quot;&gt;@howo&lt;/a&gt;
&lt;/p&gt;</content><author><name>howo</name></author><summary type="html">https://www.youtube.com/watch?v=zTFpbEo8Ptw youtube url subjects touched on: * Dev Sync * problems encountered with hivemind pending issues * Update of documentation (who/when/how) * Clarification on the organization/coordination of the work of developers external to the BT team with the latter * Patreon use case and tech limitations * communities v2 ? * Language field in hivemind * Get discussion in a tree instead of an array * Airdrop distribution round * 5 minute post limit removal This was one of the longest dev meetings as there was a lot of things that were touched on. I highly encourage you to give it a listen :) See: Hive core developper meeting #11 by @howo</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://hivedocs.info/assets/images/favicon.png" /><media:content medium="image" url="https://hivedocs.info/assets/images/favicon.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Update on Blocktrades work and the results of HF24</title><link href="https://hivedocs.info/news/core/development/2020/10/18/update-on-blocktrades-work-and-the-results-of-hf24.html" rel="alternate" type="text/html" title="Update on Blocktrades work and the results of HF24" /><published>2020-10-18T21:26:36-07:00</published><updated>2020-10-18T21:26:36-07:00</updated><id>https://hivedocs.info/news/core/development/2020/10/18/update-on-blocktrades-work-and-the-results-of-hf24</id><content type="html" xml:base="https://hivedocs.info/news/core/development/2020/10/18/update-on-blocktrades-work-and-the-results-of-hf24.html">&lt;div id=&quot;content-blocktrades-update-on-blocktrades-work-and-the-results-of-hf24&quot;&gt;![image.png](https://images.hive.blog/DQmULqqW81JQYb4CTVaQ9DfG2X8b4SATuLA92qZbLQwznxo/image.png)

I’m publishing this post a little early, as I expect to be pretty busy on Monday. Before I go into my normal reporting on the detailed coding issues that BlockTrades team worked on last week and our plans for the upcoming week, I first wanted to give a brief overview of the hardfork process as it happened last week, since that’s what’s been driving our work flow in the past week.

# Review of hardfork 24 (and an “unplanned” hardfork before that)

On the date of hardfork 24 (Oct 14th), the apps developers were still making hardfork 24 related changes and  reporting API problems they were finding with hivemind, while the BlockTrades team was working on fixing those bugs as they were reported (I’ll discuss the bug fixes later in this post). Meanwhile, the top 20 witnesses were standing by, waiting for an “all clear” signal that enough apps were stable that we could safely execute the hardfork by upgrading their nodes to the hardfork 24 code (tagged in the hived node repository as either v1.24.2 or v1.24.3).

Several of the top 20 witnesses had already updated their code to the hardfork 24 code, but this was considered OK by me and other devs, as the HF24 code requires a super-majority of the top 20 witnesses to switch to it to trigger the new HF24 protocol it contains. This allowed some top 20 witnesses to not have to hang around as we waited for the apps/hivemind integration to get to an acceptable level before we triggered the hardfork.

Unfortunately, this led to an unexpected side-effect: the HF24 code contained a protocol change that wasn’t properly guarded against execution before hardfork 24. This means that a HF24 node could produce a block that wouldn’t be accepted by HF23 nodes. We had never seen this bug triggered before, because it could only cause a problem when a HF24 node produced a block and only then under special circumstances. 

There have been a few times prior to the hardfork date when we’ve run a HF24 node as a producing node, but in the past, such a node was in the minority, so the worst thing that might have happened if this bug got triggered was that the HF24 node would temporarily fork, then fall back into consensus with the chain when the block it generated wasn’t accepted by the HF23 nodes.

But on the hardfork date, even though we didn’t have a super-majority of top 20 nodes running HF24, we did have a majority running HF24. And a majority is enough to do determine how chain forks get resolved. So when one of the HF24 nodes produced a block that was rejected by HF23 nodes, but accepted by HF24 nodes, the fork resolution logic kept the HF24 nodes on a separate unplanned hard fork from the HF23 nodes (effectively splitting the chain into two forks). 

The top 20 witnesses quickly realized what was happening, so they decided to execute the hardfork by upgrading the remaining HF23 nodes to HF24, so that all nodes rejoined the majority fork. This also required all the API node operators to upgrade their API nodes to HF24, and all Hive apps switched to their HF24 versions to use those API nodes.

Because the hardfork 24 was executed a little sooner than we would have liked due to the chain split, we still hadn’t resolved all the bugs and performance issues in hivemind and Hive apps at the time of the hardfork. This led to various glitches and slowdowns experienced by apps users over the past few days. But Hive devs have been working hard to resolve the issues as fast as possible and things are already looking much better, and I expect the remaining issues to be resolved quite soon.

One thing for the future: I want to look at ways to detect problems like the chain split before they happen. One possibility could be to setup a special secondary witness node running the new code that signs blocks as a top 20 witness, but where the blocks it produces are only broadcast to one isolated old code node that would report if it was unable to accept any of the blocks it received from the new node. We can also reduce the possibility for this problem occurring in practice by having most of the top 20 witnesses upgrade very near the same time, but that can only get us so far: the ideal solution would be to have a better test method to detect such problems and I think some variation on my proposal above should work.

# Hived work (blockchain node software)

We made several changes to API responses returned by hived, mostly in response to reports from apps developers:
https://gitlab.syncad.com/hive/hive/-/merge_requests/125
https://gitlab.syncad.com/hive/hive/-/merge_requests/126
https://gitlab.syncad.com/hive/hive/-/merge_requests/133

We also did general cleanup to docker, scripts, and configuration files for hived:
https://gitlab.syncad.com/hive/hive/-/merge_requests/130

We also fixed a problem with the cli-wallet: it was still using old chain-id after the hardfork, so it couldn’t generate proper transactions. It seems there were very few if any tests written previously for testing the cli-wallet. 
https://gitlab.syncad.com/hive/hive/-/merge_requests/128

The cli-wallet fix was necessary for exchanges, so we tagged a new version v1.24.4 that includes this change (and the other fixes above). Note that none of the above changes are needed by consensus witnesses, which is why witnesses are primarily still running 1.24.2. These changes are only needed by API nodes and exchanges.

We started a full replay yesterday to check all the above changes (this takes around 18 hours). We don’t expect any issues, since the changes were designed as non-consensus changes, only changes to the API, but better safe than sorry.

# Hivemind (2nd layer social media microservice)

Most of our time was still spent on hivemind, but we made very good progress. 

Our improvements to hivemind can be separated into two categories: bug fixes (wrong or missing data in API responses) and slow queries that result in unacceptable response times. Our bug fixes are usually made in response to reports from apps devs, but slow queries are usually detected by observing the performance of the postgres servers used by our API node with the pghero tool.  We’ve found pghero to be very handy for finding which SQL queries are consuming the most time to complete (it functions as a profiler). It’s also useful for finding duplicate and unnecessary indexes which can impact performance.

Here’s a list of improvements and bug fixes we made to hivemind:
https://gitlab.syncad.com/hive/hivemind/-/merge_requests/281
https://gitlab.syncad.com/hive/hivemind/-/merge_requests/282
https://gitlab.syncad.com/hive/hivemind/-/merge_requests/286
https://gitlab.syncad.com/hive/hivemind/-/merge_requests/287
https://gitlab.syncad.com/hive/hivemind/-/merge_requests/290
https://gitlab.syncad.com/hive/hivemind/-/merge_requests/294
https://gitlab.syncad.com/hive/hivemind/-/merge_requests/298
https://gitlab.syncad.com/hive/hivemind/-/merge_requests/297
https://gitlab.syncad.com/hive/hivemind/-/merge_requests/302
https://gitlab.syncad.com/hive/hivemind/-/merge_requests/295
https://gitlab.syncad.com/hive/hivemind/-/merge_requests/307
https://gitlab.syncad.com/hive/hivemind/-/merge_requests/306
https://gitlab.syncad.com/hive/hivemind/-/merge_requests/310

Decentralized list changes were also merged into the develop branch, after updates (the code had diverged a lot since these changes were made, so it required a decent amount of manual merging and testing): https://gitlab.syncad.com/hive/hivemind/-/merge_requests/275

## Hivemind status 

With the latest optimizations (last big one was merge request 310 made on Saturday), hivemind seems to be working fairly well, but we still have a few more optimizations to make, and we also need to re-enable reputation updating (this was temporarily disabled because it needed further optimization to avoid unacceptable sync slow downs that caused excess loading on hivemind nodes when receiving real world traffic). 

We have an optimized version of the reputation sync alogorithm on a local dev system, but we’ll be testing it further on one of our experimental API servers with real world API traffic before making it part of the official build.

We are currently running a full hivemind sync (this has generally been a 4 day process) to see if there’s any problems, as we’ve been skipping this process for the past week and doing incremental upgrades to our existing hivemind database in order to test new changes quickly.

# Experimenting with optimum API node configuration

Another thing we've been doing this week is experimenting with configuring our API node for optimal performance. I've been sharing some of that information we've discovered in the API node operators channel, but I'll make a full report here later about our findings, once we've completed that work.

# Condenser (open-source code for hive.blog)

We made some more changes to hive.blog and it’s wallet related to changes in hardfork 24 (mostly to the wallet as we already made several updates to condenser itself), especially removing usages of the get_state function which is being obsoleted in favor of more efficient API calls.
https://gitlab.syncad.com/hive/wallet/-/merge_requests/38
https://gitlab.syncad.com/hive/wallet/-/merge_requests/39
https://gitlab.syncad.com/hive/wallet/-/merge_requests/40
https://gitlab.syncad.com/hive/wallet/-/merge_requests/42
https://gitlab.syncad.com/hive/wallet/-/merge_requests/43
https://gitlab.syncad.com/hive/wallet/-/merge_requests/45

https://gitlab.syncad.com/hive/condenser/-/merge_requests/118
https://gitlab.syncad.com/hive/condenser/-/merge_requests/121
https://gitlab.syncad.com/hive/condenser/-/merge_requests/119

One fix we need to deploy soon is a change so that condenser correctly updates the vote button state after a user votes:
https://gitlab.syncad.com/hive/condenser/-/merge_requests/129

# What’s next for the week?

We have a few more optimizations to make to hivemind, and I expect we’ll get a few more bug reports,  plus we still need to deploy the final reputation calculation code. But I expect that work to slow down in the next couple of days, although the full hive sync test won’t likely complete until near the end of the week (we already observed one slow down today in the full sync with the latest changes that needs analysis).

We’ll also be testing condenser and the wallet and looking for fixes and optimizations we can make.&lt;/div&gt;
&lt;script crossorigin=&quot;anonymous&quot; integrity=&quot;sha256-4+XzXVhsDmqanXGHaHvgh1gMQKX40OUvDEBTu8JcmNs=&quot; src=&quot;https://code.jquery.com/jquery-3.5.1.slim.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://unpkg.com/steem-content-renderer&quot;&gt;&lt;/script&gt;

&lt;script&gt;
  $(document).ready(function() {
    try {
      const renderer = new SteemContentRenderer.DefaultRenderer({
        baseUrl: &quot;https://hive.blog/&quot;,
        breaks: true,
        skipSanitization: false,
        allowInsecureScriptTags: false,
        addNofollowToLinks: true,
        doNotShowImages: false,
        ipfsPrefix: &quot;&quot;,
        assetsWidth: 640,
        assetsHeight: 480,
        imageProxyFn: (url) =&gt; url,
        usertagUrlFn: (account) =&gt; &quot;/@blocktrades&quot;,
        hashtagUrlFn: (hashtag) =&gt; &quot;/update-on-blocktrades-work-and-the-results-of-hf24&quot;,
        isLinkSafeFn: (url) =&gt; true,
      });
      
      const inputElem = $('#content-blocktrades-update-on-blocktrades-work-and-the-results-of-hf24').html();
      const outputElem = $('#content-blocktrades-update-on-blocktrades-work-and-the-results-of-hf24');
      const output = renderer.render(inputElem);
      
      outputElem.html(output);
    } catch(e) {
      console.log(e);
    }
  });
&lt;/script&gt;

&lt;style&gt;
  #content-blocktrades-update-on-blocktrades-work-and-the-results-of-hf24 {
    padding: 0 3rem;
    color: #444444;
    font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Helvetica, Arial, sans-serif;
    font-size: 16px;
    line-height: 1.8;
    text-shadow: 0 1px 0 #ffffff;
    padding: 0.5rem;
  }
  #content-blocktrades-update-on-blocktrades-work-and-the-results-of-hf24 code {
    background: white;
  }
  #content-blocktrades-update-on-blocktrades-work-and-the-results-of-hf24 a {
    border-bottom: 1px solid #444444; color: #444444; text-decoration: none;
  }
  #content-blocktrades-update-on-blocktrades-work-and-the-results-of-hf24 a:hover {
    border-bottom: 0;
  }
  #content-blocktrades-update-on-blocktrades-work-and-the-results-of-hf24 h1 {
    font-size: 2.2em;
  }
  #content-blocktrades-update-on-blocktrades-work-and-the-results-of-hf24 h2, h3, h4, h5 {
    margin-bottom: 0;
  }
  #content-blocktrades-update-on-blocktrades-work-and-the-results-of-hf24 header small {
    color: #999;
    font-size: 50%;
  }
  #content-blocktrades-update-on-blocktrades-work-and-the-results-of-hf24 img {
    max-width: 100%;
  }
&lt;/style&gt;

&lt;hr /&gt;

&lt;p&gt;
  See: &lt;a href=&quot;https://hive.blog/hive-139531/@blocktrades/update-on-blocktrades-work-and-the-results-of-hf24&quot;&gt;Update on Blocktrades work and the results of HF24&lt;/a&gt;
  by
  &lt;a href=&quot;https://hive.blog/@blocktrades&quot;&gt;@blocktrades&lt;/a&gt;
&lt;/p&gt;</content><author><name>blocktrades</name></author><summary type="html">![image.png](https://images.hive.blog/DQmULqqW81JQYb4CTVaQ9DfG2X8b4SATuLA92qZbLQwznxo/image.png) I’m publishing this post a little early, as I expect to be pretty busy on Monday. Before I go into my normal reporting on the detailed coding issues that BlockTrades team worked on last week and our plans for the upcoming week, I first wanted to give a brief overview of the hardfork process as it happened last week, since that’s what’s been driving our work flow in the past week. # Review of hardfork 24 (and an “unplanned” hardfork before that) On the date of hardfork 24 (Oct 14th), the apps developers were still making hardfork 24 related changes and reporting API problems they were finding with hivemind, while the BlockTrades team was working on fixing those bugs as they were reported (I’ll discuss the bug fixes later in this post). Meanwhile, the top 20 witnesses were standing by, waiting for an “all clear” signal that enough apps were stable that we could safely execute the hardfork by upgrading their nodes to the hardfork 24 code (tagged in the hived node repository as either v1.24.2 or v1.24.3). Several of the top 20 witnesses had already updated their code to the hardfork 24 code, but this was considered OK by me and other devs, as the HF24 code requires a super-majority of the top 20 witnesses to switch to it to trigger the new HF24 protocol it contains. This allowed some top 20 witnesses to not have to hang around as we waited for the apps/hivemind integration to get to an acceptable level before we triggered the hardfork. Unfortunately, this led to an unexpected side-effect: the HF24 code contained a protocol change that wasn’t properly guarded against execution before hardfork 24. This means that a HF24 node could produce a block that wouldn’t be accepted by HF23 nodes. We had never seen this bug triggered before, because it could only cause a problem when a HF24 node produced a block and only then under special circumstances. There have been a few times prior to the hardfork date when we’ve run a HF24 node as a producing node, but in the past, such a node was in the minority, so the worst thing that might have happened if this bug got triggered was that the HF24 node would temporarily fork, then fall back into consensus with the chain when the block it generated wasn’t accepted by the HF23 nodes. But on the hardfork date, even though we didn’t have a super-majority of top 20 nodes running HF24, we did have a majority running HF24. And a majority is enough to do determine how chain forks get resolved. So when one of the HF24 nodes produced a block that was rejected by HF23 nodes, but accepted by HF24 nodes, the fork resolution logic kept the HF24 nodes on a separate unplanned hard fork from the HF23 nodes (effectively splitting the chain into two forks). The top 20 witnesses quickly realized what was happening, so they decided to execute the hardfork by upgrading the remaining HF23 nodes to HF24, so that all nodes rejoined the majority fork. This also required all the API node operators to upgrade their API nodes to HF24, and all Hive apps switched to their HF24 versions to use those API nodes. Because the hardfork 24 was executed a little sooner than we would have liked due to the chain split, we still hadn’t resolved all the bugs and performance issues in hivemind and Hive apps at the time of the hardfork. This led to various glitches and slowdowns experienced by apps users over the past few days. But Hive devs have been working hard to resolve the issues as fast as possible and things are already looking much better, and I expect the remaining issues to be resolved quite soon. One thing for the future: I want to look at ways to detect problems like the chain split before they happen. One possibility could be to setup a special secondary witness node running the new code that signs blocks as a top 20 witness, but where the blocks it produces are only broadcast to one isolated old code node that would report if it was unable to accept any of the blocks it received from the new node. We can also reduce the possibility for this problem occurring in practice by having most of the top 20 witnesses upgrade very near the same time, but that can only get us so far: the ideal solution would be to have a better test method to detect such problems and I think some variation on my proposal above should work. # Hived work (blockchain node software) We made several changes to API responses returned by hived, mostly in response to reports from apps developers: https://gitlab.syncad.com/hive/hive/-/merge_requests/125 https://gitlab.syncad.com/hive/hive/-/merge_requests/126 https://gitlab.syncad.com/hive/hive/-/merge_requests/133 We also did general cleanup to docker, scripts, and configuration files for hived: https://gitlab.syncad.com/hive/hive/-/merge_requests/130 We also fixed a problem with the cli-wallet: it was still using old chain-id after the hardfork, so it couldn’t generate proper transactions. It seems there were very few if any tests written previously for testing the cli-wallet. https://gitlab.syncad.com/hive/hive/-/merge_requests/128 The cli-wallet fix was necessary for exchanges, so we tagged a new version v1.24.4 that includes this change (and the other fixes above). Note that none of the above changes are needed by consensus witnesses, which is why witnesses are primarily still running 1.24.2. These changes are only needed by API nodes and exchanges. We started a full replay yesterday to check all the above changes (this takes around 18 hours). We don’t expect any issues, since the changes were designed as non-consensus changes, only changes to the API, but better safe than sorry. # Hivemind (2nd layer social media microservice) Most of our time was still spent on hivemind, but we made very good progress. Our improvements to hivemind can be separated into two categories: bug fixes (wrong or missing data in API responses) and slow queries that result in unacceptable response times. Our bug fixes are usually made in response to reports from apps devs, but slow queries are usually detected by observing the performance of the postgres servers used by our API node with the pghero tool. We’ve found pghero to be very handy for finding which SQL queries are consuming the most time to complete (it functions as a profiler). It’s also useful for finding duplicate and unnecessary indexes which can impact performance. Here’s a list of improvements and bug fixes we made to hivemind: https://gitlab.syncad.com/hive/hivemind/-/merge_requests/281 https://gitlab.syncad.com/hive/hivemind/-/merge_requests/282 https://gitlab.syncad.com/hive/hivemind/-/merge_requests/286 https://gitlab.syncad.com/hive/hivemind/-/merge_requests/287 https://gitlab.syncad.com/hive/hivemind/-/merge_requests/290 https://gitlab.syncad.com/hive/hivemind/-/merge_requests/294 https://gitlab.syncad.com/hive/hivemind/-/merge_requests/298 https://gitlab.syncad.com/hive/hivemind/-/merge_requests/297 https://gitlab.syncad.com/hive/hivemind/-/merge_requests/302 https://gitlab.syncad.com/hive/hivemind/-/merge_requests/295 https://gitlab.syncad.com/hive/hivemind/-/merge_requests/307 https://gitlab.syncad.com/hive/hivemind/-/merge_requests/306 https://gitlab.syncad.com/hive/hivemind/-/merge_requests/310 Decentralized list changes were also merged into the develop branch, after updates (the code had diverged a lot since these changes were made, so it required a decent amount of manual merging and testing): https://gitlab.syncad.com/hive/hivemind/-/merge_requests/275 ## Hivemind status With the latest optimizations (last big one was merge request 310 made on Saturday), hivemind seems to be working fairly well, but we still have a few more optimizations to make, and we also need to re-enable reputation updating (this was temporarily disabled because it needed further optimization to avoid unacceptable sync slow downs that caused excess loading on hivemind nodes when receiving real world traffic). We have an optimized version of the reputation sync alogorithm on a local dev system, but we’ll be testing it further on one of our experimental API servers with real world API traffic before making it part of the official build. We are currently running a full hivemind sync (this has generally been a 4 day process) to see if there’s any problems, as we’ve been skipping this process for the past week and doing incremental upgrades to our existing hivemind database in order to test new changes quickly. # Experimenting with optimum API node configuration Another thing we've been doing this week is experimenting with configuring our API node for optimal performance. I've been sharing some of that information we've discovered in the API node operators channel, but I'll make a full report here later about our findings, once we've completed that work. # Condenser (open-source code for hive.blog) We made some more changes to hive.blog and it’s wallet related to changes in hardfork 24 (mostly to the wallet as we already made several updates to condenser itself), especially removing usages of the get_state function which is being obsoleted in favor of more efficient API calls. https://gitlab.syncad.com/hive/wallet/-/merge_requests/38 https://gitlab.syncad.com/hive/wallet/-/merge_requests/39 https://gitlab.syncad.com/hive/wallet/-/merge_requests/40 https://gitlab.syncad.com/hive/wallet/-/merge_requests/42 https://gitlab.syncad.com/hive/wallet/-/merge_requests/43 https://gitlab.syncad.com/hive/wallet/-/merge_requests/45 https://gitlab.syncad.com/hive/condenser/-/merge_requests/118 https://gitlab.syncad.com/hive/condenser/-/merge_requests/121 https://gitlab.syncad.com/hive/condenser/-/merge_requests/119 One fix we need to deploy soon is a change so that condenser correctly updates the vote button state after a user votes: https://gitlab.syncad.com/hive/condenser/-/merge_requests/129 # What’s next for the week? We have a few more optimizations to make to hivemind, and I expect we’ll get a few more bug reports, plus we still need to deploy the final reputation calculation code. But I expect that work to slow down in the next couple of days, although the full hive sync test won’t likely complete until near the end of the week (we already observed one slow down today in the full sync with the latest changes that needs analysis). We’ll also be testing condenser and the wallet and looking for fixes and optimizations we can make. See: Update on Blocktrades work and the results of HF24 by @blocktrades</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://hivedocs.info/assets/images/favicon.png" /><media:content medium="image" url="https://hivedocs.info/assets/images/favicon.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>