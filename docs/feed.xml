<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="https://hivedocs.info/feed.xml" rel="self" type="application/atom+xml" /><link href="https://hivedocs.info/" rel="alternate" type="text/html" /><updated>2020-07-30T16:01:43-07:00</updated><id>https://hivedocs.info/feed.xml</id><title type="html">Hive Chain Documentation</title><subtitle>Your resource for various levels of Hive Documentation.</subtitle><author><name>site curated by: @inertia</name></author><entry><title type="html">How to fix canonical URLs and links in your pre-fork posts</title><link href="https://hivedocs.info/howto/beem/python/content/2020/05/23/how-to-fix-canonical-urls-and-links-in-your-pre-fork-posts.html" rel="alternate" type="text/html" title="How to fix canonical URLs and links in your pre-fork posts" /><published>2020-05-23T07:20:12-07:00</published><updated>2020-05-23T07:20:12-07:00</updated><id>https://hivedocs.info/howto/beem/python/content/2020/05/23/how-to-fix-canonical-urls-and-links-in-your-pre-fork-posts</id><content type="html" xml:base="https://hivedocs.info/howto/beem/python/content/2020/05/23/how-to-fix-canonical-urls-and-links-in-your-pre-fork-posts.html">&lt;p&gt;As you can see here, I have some links in my blogs written before the hive-fork pointing to steemit.com. It’s time to replace them all.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images.hive.blog/DQmfDpnHj9kXEqo2ZXNSAkaPbFb4svFqWXLyUEdEuniqd3e/steemit%20link%20in%20my%20blog&quot; alt=&quot;steemit link in my blog&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Almost all blog posts written before the fork are written with apps that are not included in &lt;a href=&quot;https://www.npmjs.com/package/@hivechain/hivescript&quot;&gt;hivescript&lt;/a&gt; and lead to problems with canonical URLs:&lt;/p&gt;

&lt;p&gt;As it can be seen here, my old post &lt;a href=&quot;https://peakd.com/beem/@holger80/update-for-beem-first-release-for-hf-21&quot;&gt;update for beem: first release for HF 21&lt;/a&gt; result in different canonical URLs on different front-ends. This is then handled as duplicated content by the search engines.
The post was written through palnet. As there is no entry for palnet in &lt;a href=&quot;https://www.npmjs.com/package/@hivechain/hivescript&quot;&gt;hivescript&lt;/a&gt;, the front-ends to not know how to build a proper canonical URL:
&lt;img src=&quot;https://images.hive.blog/DQmXe1t2QwJtizzVXDpG89GVNxyYAorFu6Tjj5LRnXkEJss/wrong%20canonical%20url&quot; alt=&quot;wrong canonical url&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;fixing-the-mess&quot;&gt;Fixing The mess&lt;/h1&gt;
&lt;p&gt;Fixing means:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;replacing all steemit, steempeak, … links with relative links&lt;/li&gt;
  &lt;li&gt;setting &lt;code class=&quot;highlighter-rouge&quot;&gt;canonical_url&lt;/code&gt; for each post written before 2020-03-20, to fix canonical  URLs.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;small-update&quot;&gt;Small update&lt;/h3&gt;
&lt;p&gt;The script uses now relative links, when found a link to steemit.com …, it will be replaced by a relative link. A relative link looks like: &lt;code class=&quot;highlighter-rouge&quot;&gt;[holger80](/@holger80)&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;[this post](/hive-139531/@holger80/how-to-fix-canonical-urls-and-links-in-your-pre-fork-posts)&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;small-update-2&quot;&gt;Small update 2&lt;/h3&gt;
&lt;p&gt;There are now three boolean parameters, which can be used to set the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;replace_steemit_links&lt;/code&gt;: when True, steemit, … links will be replaced&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;use_relative_links&lt;/code&gt;: when True, relative links will be used (starting with &lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;add_canonical_url&lt;/code&gt;: When True, a canonical_url is added to the metadata&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;small-update-3&quot;&gt;Small update 3&lt;/h3&gt;
&lt;p&gt;It is now possible to use the same script for fixing the canonical links on STEEM for all written post before the fork.
When you want to use the script on STEEM:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;set &lt;code class=&quot;highlighter-rouge&quot;&gt;target_blockchain = &quot;steem&quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When you want to use the script on HIVE:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;set &lt;code class=&quot;highlighter-rouge&quot;&gt;target_blockchain = &quot;hive&quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;python-code&quot;&gt;Python code&lt;/h3&gt;
&lt;p&gt;The following script is using beem and will do exactly this.&lt;/p&gt;

&lt;p&gt;beem can be installed by&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip install beem
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;conda install beem
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Store the following as &lt;code class=&quot;highlighter-rouge&quot;&gt;fix_canonical_urls_hive.py&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/python
&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;beem&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Hive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Steem&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;beem.utils&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addTzInfo&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;beem.account&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Account&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;beem.comment&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Comment&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;beem.nodelist&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NodeList&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;time&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;datetime&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;getpass&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;__main__&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Parameter
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;canonical_url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;https://hive.blog&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;replace_steemit_links&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;use_relative_links&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_canonical_url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;target_blockchain&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hive&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# can be hive or steem
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# ----
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# at least one option must be true
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;replace_steemit_links&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add_canonical_url&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target_blockchain&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hive&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;steem&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Canonical url must not end with /
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;canonical_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;canonical_url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;canonical_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;nodelist&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NodeList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;nodelist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update_nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;test_run_answer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Do a test run? [y/n]&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test_run_answer&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;y&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Y&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;yes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;test_run&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Doing a test run on %s!&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target_blockchain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;test_run&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test_run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target_blockchain&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hive&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;blockchain_instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Hive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nodelist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_hive_nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;blockchain_instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Steem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://api.steemit.com&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;wif&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getpass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getpass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prompt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Enter your posting key for %s.'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target_blockchain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target_blockchain&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hive&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;blockchain_instance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Hive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nodelist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_hive_nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wif&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;blockchain_instance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Steem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://api.steemit.com&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wif&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target_blockchain&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hive&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blockchain_instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_hive&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blockchain_instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_steem&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;account&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Account name =&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;account&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Account&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blockchain_instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blockchain_instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add_canonical_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Start to fix canonical_url on %s for %s&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target_blockchain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;replace_steemit_links&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Start to replace steemit links on %s for %s&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target_blockchain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;apps_with_cannonical_url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hiveblog&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;peakd&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;esteem&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;steempress&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;actifit&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                &lt;span class=&quot;s&quot;&gt;&quot;travelfeed&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;3speak&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;steemstem&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;leofinance&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;clicktrackprofit&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                &lt;span class=&quot;s&quot;&gt;&quot;dtube&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;hive_fork_date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addTzInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2020&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;blog_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;expected_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expected_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blog_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_blog_entries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_entry_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blog_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;raw_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;blog_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;parent_author&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;author&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;canonical_url&quot;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json_metadata&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;canonical_url&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json_metadata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;canonical_url&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;app&quot;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json_metadata&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json_metadata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;app&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apps_with_cannonical_url&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target_blockchain&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hive&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;created&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hive_fork_date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;links&quot;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json_metadata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;links&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json_metadata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;links&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;links&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;links&quot;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json_metadata&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;replace_steemit_links&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json_metadata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;links&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;steemit.com&quot;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;steempeak.com&quot;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;busy.org&quot;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;partiko.app&quot;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;authorperm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;new_link&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;authorperm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                            &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;authorperm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authorperm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authorperm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                            &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                                &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Account&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;authorperm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blockchain_instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blockchain_instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;use_relative_links&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                                    &lt;span class=&quot;n&quot;&gt;new_link&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/@&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                                &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                                    &lt;span class=&quot;n&quot;&gt;new_link&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;canonical_url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/@&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                            &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                                &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                            &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                                &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Comment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;authorperm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blockchain_instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blockchain_instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;use_relative_links&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                                    &lt;span class=&quot;n&quot;&gt;new_link&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;category&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;authorperm&lt;/span&gt;
                                &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                                    &lt;span class=&quot;n&quot;&gt;new_link&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;canonical_url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;category&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;authorperm&lt;/span&gt;
                            &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                                &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_link&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;links&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
                                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;links&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                                    &lt;span class=&quot;n&quot;&gt;links&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_link&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                            &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Replace %s with %s&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                            
            &lt;span class=&quot;n&quot;&gt;json_metadata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json_metadata&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;links&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;replace_steemit_links&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;json_metadata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;links&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;links&lt;/span&gt;            
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add_canonical_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;json_metadata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;canonical_url&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;canonical_url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;category&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/@&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;author&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;permlink&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Edit post nr %d with canonical_url=%s&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blog_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json_metadata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;canonical_url&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;---&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test_run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;edit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;meta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json_metadata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Skipping %s due to error&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;authorperm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;expected_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;
    
    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can now start the script with:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python fix_canonical_urls_hive.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If you are on Linux, you should replace &lt;code class=&quot;highlighter-rouge&quot;&gt;pip&lt;/code&gt; by &lt;code class=&quot;highlighter-rouge&quot;&gt;pip3&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;python&lt;/code&gt; by &lt;code class=&quot;highlighter-rouge&quot;&gt;python3&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;how-does-it-work&quot;&gt;How does it work&lt;/h2&gt;
&lt;p&gt;The script goes through all blog posts written before 2020-03-14. Whenever the post was written by an app, that is not properly handled by &lt;a href=&quot;https://www.npmjs.com/package/@hivechain/hivescript&quot;&gt;hivescript&lt;/a&gt;, a new canonical_url is set.&lt;/p&gt;

&lt;p&gt;You can define your preferred front-end here:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;canonical_url = &quot;https://hive.blog&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If you like other front-ends, you can replace this line by&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;canonical_url = &quot;https://peakd.com&quot;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;canonical_url = &quot;https://leofinance.io&quot;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;canonical_url = &quot;https://esteem.app&quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the next step, all used links are checked. Whenever a link is pointing to a valid hive post or to a valid hive user, the link is replaced by a releative url (When the link was pointing to steemit.com, steempeak.com, busy.org or partiko.app).&lt;/p&gt;

&lt;h2 id=&quot;test-run&quot;&gt;Test run&lt;/h2&gt;
&lt;p&gt;You can do a test run and checking what will be changed by the script:
&lt;img src=&quot;https://images.hive.blog/DQmZht6KJmnJkBGebgwyXdGBpj4dSCCYkdqwzn6PpwD4ado/test_run&quot; alt=&quot;test_run&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This show now the following information:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images.hive.blog/DQmWE3JdvZBYJauzmAHjFFnsCwyuZ6YBHzonbbSbtPf5Gdx/test%20result&quot; alt=&quot;test result&quot; /&gt;
The set canonical url is shown as well all links that will be replaced.&lt;/p&gt;

&lt;h2 id=&quot;fixing-your-posts&quot;&gt;Fixing your posts&lt;/h2&gt;
&lt;p&gt;We can now start to fix all old posts:
&lt;img src=&quot;https://images.hive.blog/DQmdaFJFkxsAaMmc8wG5vESFwRGqPJwRR2GPXySJtvEAxKh/starting%20the%20script&quot; alt=&quot;starting the script&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;results&quot;&gt;Results&lt;/h2&gt;
&lt;p&gt;All changes have been broadcasted:
&lt;img src=&quot;https://images.hive.blog/DQmNq6JKN9Cr5mDkBMsEcL8nCqRvH7ktkprTNXTU75K4Pz4/Broadcasted%20posts&quot; alt=&quot;Broadcasted posts&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The links have been corrected, as shown here:
&lt;img src=&quot;https://images.hive.blog/DQmUFVmj9vW84ZH1aa2V4PfSKHsJLsARDUkWbo62KpxnnfA/image&quot; alt=&quot;&quot; /&gt;
There seems to be a bug with hive.blog, that steemit.com links are shown as internal and hive.blog links are shown as external links.&lt;/p&gt;

&lt;p&gt;The canonical url is also fixed:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images.hive.blog/DQmVjxuvCHYtfaS2p6c9i4wj43siJUMJciB2gwKE8dn5RMs/canonical%20urls&quot; alt=&quot;canonical urls&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It seems that esteem.app has not changed its canonical url right now. As I know that esteem.app should read the &lt;code class=&quot;highlighter-rouge&quot;&gt;canonical_url&lt;/code&gt; parameter (works for steempress), it may correct the canonical URLs later.&lt;/p&gt;

&lt;p&gt;After a fix on esteem.app, esteem.app is using now the correct canonical url:
&lt;img src=&quot;https://images.hive.blog/DQmcbaPV3teUczT5WmxuaMybeyz4hdTEbaG5NV6kQ2HGHhj/canonical%20url%20from%20esteem.app&quot; alt=&quot;canonical url from esteem.app&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;results-on-steem&quot;&gt;Results on STEEM&lt;/h2&gt;
&lt;p&gt;Setting &lt;code class=&quot;highlighter-rouge&quot;&gt;canonical_url&lt;/code&gt; works also on steemit:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images.hive.blog/DQmShxP35w4ARXfryjEdsdWnuVKV1zebkSoRgbGCjTQRQbC/canonical%20url%20on%20steemit&quot; alt=&quot;canonical url on steemit&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I used &lt;a href=&quot;https://www.seoreviewtools.com/canonical-url-location-checker/&quot;&gt;seoreviewtools&lt;/a&gt; to check the canonical urls.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;If you like what I do, consider casting a vote for me as witness on &lt;a href=&quot;https://hivesigner.com/sign/account-witness-vote?witness=holger80&amp;amp;approve=1&quot;&gt;Hivesigner&lt;/a&gt; or on &lt;a href=&quot;https://peakd.com/witnesses&quot;&gt;PeakD&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;
  See: &lt;a href=&quot;https://hive.blog/hive-139531/@holger80/how-to-fix-canonical-urls-and-links-in-your-pre-fork-posts&quot;&gt;How to fix canonical URLs and links in your pre-fork posts&lt;/a&gt;
  by
  &lt;a href=&quot;https://hive.blog/@holger80&quot;&gt;@holger80&lt;/a&gt;
&lt;/p&gt;</content><author><name>holger80</name></author><summary type="html">As you can see here, I have some links in my blogs written before the hive-fork pointing to steemit.com. It’s time to replace them all. Almost all blog posts written before the fork are written with apps that are not included in hivescript and lead to problems with canonical URLs: As it can be seen here, my old post update for beem: first release for HF 21 result in different canonical URLs on different front-ends. This is then handled as duplicated content by the search engines. The post was written through palnet. As there is no entry for palnet in hivescript, the front-ends to not know how to build a proper canonical URL: Fixing The mess Fixing means: replacing all steemit, steempeak, … links with relative links setting canonical_url for each post written before 2020-03-20, to fix canonical URLs. Small update The script uses now relative links, when found a link to steemit.com …, it will be replaced by a relative link. A relative link looks like: [holger80](/@holger80) and [this post](/hive-139531/@holger80/how-to-fix-canonical-urls-and-links-in-your-pre-fork-posts) Small update 2 There are now three boolean parameters, which can be used to set the following: replace_steemit_links: when True, steemit, … links will be replaced use_relative_links: when True, relative links will be used (starting with /) add_canonical_url: When True, a canonical_url is added to the metadata Small update 3 It is now possible to use the same script for fixing the canonical links on STEEM for all written post before the fork. When you want to use the script on STEEM: set target_blockchain = &quot;steem&quot; When you want to use the script on HIVE: set target_blockchain = &quot;hive&quot; Python code The following script is using beem and will do exactly this. beem can be installed by pip install beem or conda install beem Store the following as fix_canonical_urls_hive.py: #!/usr/bin/python from beem import Hive, Steem from beem.utils import addTzInfo from beem.account import Account from beem.comment import Comment from beem.nodelist import NodeList import time from datetime import datetime import getpass if __name__ == &quot;__main__&quot;: # Parameter canonical_url = &quot;https://hive.blog&quot; replace_steemit_links = True use_relative_links = True add_canonical_url = True target_blockchain = &quot;hive&quot; # can be hive or steem # ---- # at least one option must be true assert replace_steemit_links or add_canonical_url assert target_blockchain in [&quot;hive&quot;, &quot;steem&quot;] # Canonical url must not end with / if canonical_url[-1] == &quot;/&quot;: canonical_url = canonical_url[:-1] nodelist = NodeList() nodelist.update_nodes() test_run_answer = input(&quot;Do a test run? [y/n]&quot;) if test_run_answer in [&quot;y&quot;, &quot;Y&quot;, &quot;yes&quot;]: test_run = True print(&quot;Doing a test run on %s!&quot; % target_blockchain) else: test_run = False if test_run: if target_blockchain == &quot;hive&quot;: blockchain_instance= Hive(node=nodelist.get_hive_nodes()) else: blockchain_instance= Steem(node=&quot;https://api.steemit.com&quot;) else: wif = getpass.getpass(prompt='Enter your posting key for %s.' % target_blockchain) if target_blockchain == &quot;hive&quot;: blockchain_instance = Hive(node=nodelist.get_hive_nodes(), keys=[wif]) else: blockchain_instance = Steem(node=&quot;https://api.steemit.com&quot;, keys=[wif]) if target_blockchain == &quot;hive&quot;: assert blockchain_instance.is_hive else: assert blockchain_instance.is_steem account = input(&quot;Account name =&quot;) account = Account(account, blockchain_instance=blockchain_instance) if add_canonical_url: print(&quot;Start to fix canonical_url on %s for %s&quot; % (target_blockchain, account[&quot;name&quot;])) if replace_steemit_links: print(&quot;Start to replace steemit links on %s for %s&quot; % (target_blockchain, account[&quot;name&quot;])) apps_with_cannonical_url = [&quot;hiveblog&quot;, &quot;peakd&quot;, &quot;esteem&quot;, &quot;steempress&quot;, &quot;actifit&quot;, &quot;travelfeed&quot;, &quot;3speak&quot;, &quot;steemstem&quot;, &quot;leofinance&quot;, &quot;clicktrackprofit&quot;, &quot;dtube&quot;] hive_fork_date = addTzInfo(datetime(2020, 3, 20, 14, 0, 0)) blog_count = 0 expected_count = 100 while expected_count - blog_count == 100: for blog in account.get_blog_entries(start_entry_id=blog_count, raw_data=False): blog_count += 1 if blog[&quot;parent_author&quot;] != &quot;&quot;: continue if blog[&quot;author&quot;] != account[&quot;name&quot;]: continue if &quot;canonical_url&quot; in blog.json_metadata and canonical_url in blog.json_metadata[&quot;canonical_url&quot;]: continue if &quot;app&quot; in blog.json_metadata and blog.json_metadata[&quot;app&quot;].split(&quot;/&quot;)[0] in apps_with_cannonical_url and target_blockchain == &quot;hive&quot;: continue if blog[&quot;created&quot;] &amp;gt; hive_fork_date: continue body = blog.body if &quot;links&quot; in blog.json_metadata: links = blog.json_metadata[&quot;links&quot;] else: links = None if &quot;links&quot; in blog.json_metadata and replace_steemit_links: for link in blog.json_metadata[&quot;links&quot;]: if &quot;steemit.com&quot; in link or &quot;steempeak.com&quot; in link or &quot;busy.org&quot; in link or &quot;partiko.app&quot; in link: authorperm = link.split(&quot;@&quot;) acc = None post = None new_link = &quot;&quot; if len(authorperm) == 1: continue authorperm = authorperm[1] if authorperm.find(&quot;/&quot;) == -1: try: acc = Account(authorperm, blockchain_instance=blockchain_instance) if use_relative_links: new_link = &quot;/@&quot; + acc[&quot;name&quot;] else: new_link = canonical_url + &quot;/@&quot; + acc[&quot;name&quot;] except: continue else: try: post = Comment(authorperm, blockchain_instance=blockchain_instance) if use_relative_links: new_link = &quot;/&quot; + post.category + &quot;/&quot; + post.authorperm else: new_link = canonical_url + &quot;/&quot; + post.category + &quot;/&quot; + post.authorperm except: continue if new_link != &quot;&quot;: for i in range(len(links)): if links[i] == link: links[i] = new_link body = body.replace(link, new_link) print(&quot;Replace %s with %s&quot; % (link, new_link)) json_metadata = blog.json_metadata or {} if links is not None and replace_steemit_links: json_metadata[&quot;links&quot;] = links if add_canonical_url: json_metadata[&quot;canonical_url&quot;] = canonical_url + &quot;/&quot; + blog[&quot;category&quot;] + &quot;/@&quot; + blog[&quot;author&quot;] + &quot;/&quot; + blog[&quot;permlink&quot;] print(&quot;Edit post nr %d with canonical_url=%s&quot; % (blog_count, json_metadata[&quot;canonical_url&quot;])) print(&quot;---&quot;) if not test_run: try: blog.edit(body, meta=json_metadata, replace=True) except: print(&quot;Skipping %s due to error&quot; % blog.authorperm) time.sleep(6) expected_count += 100 You can now start the script with: python fix_canonical_urls_hive.py If you are on Linux, you should replace pip by pip3 and python by python3. How does it work The script goes through all blog posts written before 2020-03-14. Whenever the post was written by an app, that is not properly handled by hivescript, a new canonical_url is set. You can define your preferred front-end here: canonical_url = &quot;https://hive.blog&quot; If you like other front-ends, you can replace this line by canonical_url = &quot;https://peakd.com&quot; canonical_url = &quot;https://leofinance.io&quot; canonical_url = &quot;https://esteem.app&quot; In the next step, all used links are checked. Whenever a link is pointing to a valid hive post or to a valid hive user, the link is replaced by a releative url (When the link was pointing to steemit.com, steempeak.com, busy.org or partiko.app). Test run You can do a test run and checking what will be changed by the script: This show now the following information: The set canonical url is shown as well all links that will be replaced. Fixing your posts We can now start to fix all old posts: Results All changes have been broadcasted: The links have been corrected, as shown here: There seems to be a bug with hive.blog, that steemit.com links are shown as internal and hive.blog links are shown as external links. The canonical url is also fixed: It seems that esteem.app has not changed its canonical url right now. As I know that esteem.app should read the canonical_url parameter (works for steempress), it may correct the canonical URLs later. After a fix on esteem.app, esteem.app is using now the correct canonical url: Results on STEEM Setting canonical_url works also on steemit: I used seoreviewtools to check the canonical urls. If you like what I do, consider casting a vote for me as witness on Hivesigner or on PeakD See: How to fix canonical URLs and links in your pre-fork posts by @holger80</summary></entry><entry><title type="html">Hive Tools/Libs on a Raspberry Pi 4</title><link href="https://hivedocs.info/tools/beem/python/raspberrypi/2020/05/17/hive-tools-libs-on-a-raspberry-pi-4.html" rel="alternate" type="text/html" title="Hive Tools/Libs on a Raspberry Pi 4" /><published>2020-05-17T04:26:51-07:00</published><updated>2020-05-17T04:26:51-07:00</updated><id>https://hivedocs.info/tools/beem/python/raspberrypi/2020/05/17/hive-tools-libs-on-a-raspberry-pi-4</id><content type="html" xml:base="https://hivedocs.info/tools/beem/python/raspberrypi/2020/05/17/hive-tools-libs-on-a-raspberry-pi-4.html">&lt;center&gt;![raspberrypi4_hive.png](https://files.peakd.com/file/peakd-hive/crokkon/r5C88OIR-raspberrypi4_hive.png)
&lt;sup&gt;Raspberry Pi 4B, image source: 
&lt;a href=&quot;https://www.raspberrypi.org/&quot;&gt;https://www.raspberrypi.org/&lt;/a&gt;
, modified with the Hive logo&lt;/sup&gt;&lt;/center&gt;

&lt;p&gt;I recently bought a Raspberry Pi 4 and finally found the time to set it up:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Raspbian&lt;/li&gt;
  &lt;li&gt;Python development environment via &lt;code class=&quot;highlighter-rouge&quot;&gt;virtualenv&lt;/code&gt; using
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/holgern/beem&quot;&gt;Beem&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/emre/lighthive&quot;&gt;Lighthive&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;numpy, matplotlib, … and whatever is needed&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;remote access from anywhere with an SSH server as a Tor Hidden Service&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I added heatsinks to the ICs because they came with the case, not necessarily because they were necessary. In fact I haven’t tested it without, so I can’t really tell. A fan was included as well, but I didn’t install it and it isnt’ necessary so far. The CPU reports around 50 degC. Compared to the RPi3 I had before, I’m really excited by the performance! Here’s a comparison of the (wall) time it takes to sign the same Hive transaction 200 times on a RPi3 and the RPi4:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://files.peakd.com/file/peakd-hive/crokkon/duMO7Iys-pi3.png&quot; alt=&quot;pi3.png&quot; /&gt;
&lt;img src=&quot;https://files.peakd.com/file/peakd-hive/crokkon/AVy1VjSq-pi4.png&quot; alt=&quot;pi4.png&quot; /&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Device&lt;/th&gt;
      &lt;th&gt;Mean Time (s)&lt;/th&gt;
      &lt;th&gt;Median Time (s)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Raspberry Pi 3&lt;/td&gt;
      &lt;td&gt;0.3398&lt;/td&gt;
      &lt;td&gt;0.3811&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Raspberry Pi 4&lt;/td&gt;
      &lt;td&gt;0.1839&lt;/td&gt;
      &lt;td&gt;0.1969&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Now that’s a basically a factor 2 difference! The test script is identical, both were idle and both use &lt;code class=&quot;highlighter-rouge&quot;&gt;secp256k1&lt;/code&gt; for signing. I’m not really sure why there are multiple peaks around the same time differences apart from each other. Does the signing algorithm randomly use multiples rounds? Worth to look into - at a later time :)&lt;/p&gt;

&lt;p&gt;Main point here:&lt;/p&gt;
&lt;h4 id=&quot;rpi4-is-typically-around-a-factor-two-faster-and-than-its-predecessor-makes-a-decent-platform-for-hive-related-tools-and-scripts&quot;&gt;RPi4 is typically around a factor two faster and than its predecessor makes a decent platform for Hive-related tools and scripts!&lt;/h4&gt;

&lt;p&gt;For the moment, it runs the following things for me:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;@curx on Hive and Steem&lt;/li&gt;
  &lt;li&gt;Account creation token claiming script on Hive and Steem&lt;/li&gt;
  &lt;li&gt;An autovoter for my main account on Hive&lt;/li&gt;
  &lt;li&gt;Some tribe-related helpers and scripts&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Both beem and lighthive work like a charm!&lt;/p&gt;

&lt;p&gt;Anyone else using Pi’s for Steem/Hive? What do you do with them?&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;
  See: &lt;a href=&quot;https://peakd.com/hive-139531/@crokkon/hive-tools-libs-on-a-raspberry-pi-4&quot;&gt;Hive Tools/Libs on a Raspberry Pi 4&lt;/a&gt;
  by
  &lt;a href=&quot;https://hive.blog/@crokkon&quot;&gt;@crokkon&lt;/a&gt;
&lt;/p&gt;</content><author><name>crokkon</name></author><summary type="html">![raspberrypi4_hive.png](https://files.peakd.com/file/peakd-hive/crokkon/r5C88OIR-raspberrypi4_hive.png) Raspberry Pi 4B, image source: https://www.raspberrypi.org/ , modified with the Hive logo I recently bought a Raspberry Pi 4 and finally found the time to set it up: Raspbian Python development environment via virtualenv using Beem Lighthive numpy, matplotlib, … and whatever is needed remote access from anywhere with an SSH server as a Tor Hidden Service I added heatsinks to the ICs because they came with the case, not necessarily because they were necessary. In fact I haven’t tested it without, so I can’t really tell. A fan was included as well, but I didn’t install it and it isnt’ necessary so far. The CPU reports around 50 degC. Compared to the RPi3 I had before, I’m really excited by the performance! Here’s a comparison of the (wall) time it takes to sign the same Hive transaction 200 times on a RPi3 and the RPi4: Device Mean Time (s) Median Time (s) Raspberry Pi 3 0.3398 0.3811 Raspberry Pi 4 0.1839 0.1969 Now that’s a basically a factor 2 difference! The test script is identical, both were idle and both use secp256k1 for signing. I’m not really sure why there are multiple peaks around the same time differences apart from each other. Does the signing algorithm randomly use multiples rounds? Worth to look into - at a later time :) Main point here: RPi4 is typically around a factor two faster and than its predecessor makes a decent platform for Hive-related tools and scripts! For the moment, it runs the following things for me: @curx on Hive and Steem Account creation token claiming script on Hive and Steem An autovoter for my main account on Hive Some tribe-related helpers and scripts Both beem and lighthive work like a charm! Anyone else using Pi’s for Steem/Hive? What do you do with them? See: Hive Tools/Libs on a Raspberry Pi 4 by @crokkon</summary></entry><entry><title type="html">Beta Hive Ledger web interface</title><link href="https://hivedocs.info/howto/nodejs/wallet/2020/05/14/beta-hive-ledger-web-interface.html" rel="alternate" type="text/html" title="Beta Hive Ledger web interface" /><published>2020-05-14T23:38:33-07:00</published><updated>2020-05-14T23:38:33-07:00</updated><id>https://hivedocs.info/howto/nodejs/wallet/2020/05/14/beta-hive-ledger-web-interface</id><content type="html" xml:base="https://hivedocs.info/howto/nodejs/wallet/2020/05/14/beta-hive-ledger-web-interface.html">&lt;p&gt;&lt;img src=&quot;https://images.hive.blog/DQmcfYRWVU8sAwuHQvg1AxD2XcaxmrmoPqfsWornH66K2BH/ledger-hive.jpg&quot; alt=&quot;Beta Hive Ledger web app&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I’ve updated my beta web interface for @netuoso Hive app for the Ledger hardware wallet. It now allows you to select the key for up to 10 accounts and will use Hive Keychain to add your selected public key into your account key auths.&lt;/p&gt;

&lt;h2 id=&quot;lets-learn-a-little-bit-more-about-the-hive-blockchain&quot;&gt;Lets learn a little bit more about the Hive blockchain&lt;/h2&gt;
&lt;p&gt;On the blockchain, your account contains a set of public key roles (owner, active, posting and memo keys). This allows the blockchain to verify when dApps are signing your transactions with your one of your private keys.&lt;/p&gt;

&lt;p&gt;For each role, the blockchain allows you to store multiple public keys to use for verification. What this allows are:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;signing transactions with different private keys&lt;/li&gt;
  &lt;li&gt;allow another user to do things on your behalf without sharing your own keys&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The use case #2 is what happens when you allow PeakD to schedule a post in the future or when you allow Steem Auto to follow a trail for you via HiveSigner. Those two dApps don’t have your private keys but they can still do things on your behalf. What happens when you use HiveSigner to give them permission is you are adding their account into a list of authorised users.&lt;/p&gt;

&lt;p&gt;With use case #1, it’s very similar but instead of granting permission to a user account, you are granting permission to a key. This is very useful in the case of this Ledger project because this means I can extract the Ledger public key and tell the blockchain that I’m granting permission to this key to perform activities on my behalf. Alternatively, I could also replace my existing keys with the Ledger keys but that means that if I loose both my main Ledger device, the backup one and the recovery words, I won’t be able to access my account anymore. Adding a key to the list of authorised keys means I can access my account with both my current keys and the one from the device. I can then write down my current keys on a piece of paper that I would keep somewhere safe. If anything happens with my devices I can always retrieve that piece of paper.&lt;/p&gt;

&lt;h2 id=&quot;the-beta-web-interface&quot;&gt;The beta web interface&lt;/h2&gt;
&lt;div class=&quot;pull-left&quot;&gt;

![Beta Hive Ledger web app](https://images.hive.blog/DQmcfYRWVU8sAwuHQvg1AxD2XcaxmrmoPqfsWornH66K2BH/ledger-hive.jpg)

&lt;/div&gt;

&lt;p&gt;So when you access &lt;a href=&quot;https://tools.hivean.com/ledger.html&quot;&gt;the web interface&lt;/a&gt;, it will ask you to connect your Ledger device and launch the &lt;a href=&quot;https://hive.blog/hive-139531/@netuoso/hive-application-for-the-ledger-nano-s-x-hardware-wallet&quot;&gt;Hive app&lt;/a&gt;. You will then be presented with a form that allows you to extract the device public key and perform some basic actions: adding your device public key to your account authorised keys, sending HIVE/HBD to another user.&lt;/p&gt;

&lt;h3 id=&quot;the-keys&quot;&gt;The keys&lt;/h3&gt;
&lt;p&gt;The Hive Ledger app allows you to generate private and public keys for a lot of accounts. That means you can use it to manage your main and all your alt accounts on Hive. For the beta, I’ve restricted it to 10 accounts only.&lt;/p&gt;

&lt;p&gt;Each account can also have multiple sets of keys. You usually start with set #1 and if you ever need to change keys you would select the next set.&lt;/p&gt;

&lt;p&gt;Each set of keys is composed of the Owner Key, the Active Key, the Posting Key and the Memo Key. You can only extract the public keys from the device, the private keys never leave the device which is why it is much safer because you won’t share them with anyone or any dApp.&lt;/p&gt;

&lt;h3 id=&quot;granting-permissions-to-the-keys&quot;&gt;Granting permissions to the keys&lt;/h3&gt;
&lt;p&gt;Once you have selected your account number, your key set number and your key role, the interface will extract and display its public key and will ask you to confirm it by matching it with the one displayed on your Ledger device. Upon confirmation, it will present you with a button that will allow you to ask the blockchain to add the selected public key into your list of authorised keys for that role. This action will be performed by the Hive @Keychain browser extension.&lt;/p&gt;

&lt;p&gt;There can be different strategies for which key to add to your list of authorised keys:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;you could add all of the 4 keys, although the Memo key is not yet fully supported&lt;/li&gt;
  &lt;li&gt;you could add just the Owner and Active keys and use your current Posting key or Hive Keychain to perform post, comments and upvotes.&lt;/li&gt;
  &lt;li&gt;you could add just the Active key because you only want to use the Ledger to perform financial transactions&lt;/li&gt;
  &lt;li&gt;you could add just the Owner key because the owner key can perform all actions that can be done by the other keys including account recovery which is exclusive to the Owner key&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://images.hive.blog/DQmNxMDNzb3zia6Xi5fTrUUEB6d363Ae8RhJxC3jnSUScMc/Screen%20Shot%202020-05-14%20at%2011.32.29%20pm.jpg&quot; alt=&quot;Active authority granted&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;making-a-transfer-using-the-ledger-device-to-sign-the-transaction&quot;&gt;Making a transfer using the Ledger device to sign the transaction&lt;/h3&gt;
&lt;p&gt;Once you have added the Active or Owner key (or both) to your list of authorised keys on the blockchain, you will be able to use your Ledger device to authorise transfer or Hive and HBD assets to another account.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images.hive.blog/DQmcpM8Pixon5Pu2gpQztTmqqJGCC7XZbrrZ4YfnaBb7rMg/Screen%20Shot%202020-05-15%20at%204.27.51%20pm.jpg&quot; alt=&quot;Making a transfer using Ledger Hive web interface&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once you’ve filled the form and click on &lt;code class=&quot;highlighter-rouge&quot;&gt;Send&lt;/code&gt;, the details of the transfer will show up on your Ledger device and you will need to confirm each of the fields: from, to, amount, currency and memo. Please note that the blockchain only accepts the currency symbols STEEM and SBD but will actually map it to HIVE and HBD this is why the device will show STEEM and SBD for HIVE and HBD respectively. A future hardfork will change this behaviour.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images.hive.blog/DQmXqYcPbm8kY1366qiDSgLhi5k2FCWdicccZKn7D42AnWw/IMG_5581.JPG&quot; alt=&quot;Confirming transfer details on a Ledger Nano S&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once you have confirmed and approved on your device, the web interface will receive the crypto signature from the device and will then submit the signed transfer request to the blockchain (Hive Keychain is not used here) and will display its response. Wait for a few minutes and double check that the transaction has been recorded by using a block explorer such as https://hiveblocks.com&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images.hive.blog/DQmR8GHT9e7d2MB1JLaCHjT5BJ9LRfjHtYF2n4LgVtsmoFS/Screen%20Shot%202020-05-15%20at%204.33.10%20pm.jpg&quot; alt=&quot;Ledger signed transfer successful&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;related-links&quot;&gt;Related links&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The beta web interface: 
&lt;a href=&quot;https://tools.hivean.com/ledger.html&quot;&gt;https://tools.hivean.com/ledger.html&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Instructions for installing the Hive app on a Ledger device: 
&lt;a href=&quot;https://hive.blog/hive-139531/@netuoso/hive-application-for-the-ledger-nano-s-x-hardware-wallet&quot;&gt;https://hive.blog/hive-139531/@netuoso/hive-application-for-the-ledger-nano-s-x-hardware-wallet&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Using the Ledger Hive apps with Beem the Python library: 
&lt;a href=&quot;https://peakd.com/hive-139531/@holger80/update-for-beem-support-for-ledger-nano-sx-has-been-added&quot;&gt;https://peakd.com/hive-139531/@holger80/update-for-beem-support-for-ledger-nano-sx-has-been-added&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;open-source&quot;&gt;Open Source&lt;/h2&gt;
&lt;p&gt;My web interface won’t be release open source, however, the library I’m working on that allows it to communicate with the Ledger device via Web USB will be release as soon as I can get the code ready.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Vote for my witness&lt;/strong&gt;
&lt;a href=&quot;https://hivesigner.com/sign/account-witness-vote?witness=quochuy&amp;amp;approve=1&quot;&gt;&lt;img src=&quot;https://images.hive.blog/DQmecYTZemY8SwU6rrg7awhpNRBsehUp7ivk9RGyZsUUpVw/quochuy-hive-witness.jpg&quot; alt=&quot;Support @quochuy Witness.jpg&quot; /&gt;&lt;/a&gt;
On Hive, Witnesses are playing the important role of providing a performant and safe network for all of us. You have the power to choose 30 trusty witnesses to package transactions and sign the blocks that will go in the Hive blockchain. &lt;a href=&quot;https://hivesigner.com/sign/account-witness-vote?witness=quochuy&amp;amp;approve=1&quot;&gt;Vote for me via HiveSigner&lt;/a&gt; to support my work for the community.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;
  See: &lt;a href=&quot;https://hive.blog/hive-139531/@quochuy/beta-hive-ledger-web-interface&quot;&gt;Beta Hive Ledger web interface&lt;/a&gt;
  by
  &lt;a href=&quot;https://hive.blog/@quochuy&quot;&gt;@quochuy&lt;/a&gt;
&lt;/p&gt;</content><author><name>quochuy</name></author><summary type="html">I’ve updated my beta web interface for @netuoso Hive app for the Ledger hardware wallet. It now allows you to select the key for up to 10 accounts and will use Hive Keychain to add your selected public key into your account key auths. Lets learn a little bit more about the Hive blockchain On the blockchain, your account contains a set of public key roles (owner, active, posting and memo keys). This allows the blockchain to verify when dApps are signing your transactions with your one of your private keys. For each role, the blockchain allows you to store multiple public keys to use for verification. What this allows are: signing transactions with different private keys allow another user to do things on your behalf without sharing your own keys The use case #2 is what happens when you allow PeakD to schedule a post in the future or when you allow Steem Auto to follow a trail for you via HiveSigner. Those two dApps don’t have your private keys but they can still do things on your behalf. What happens when you use HiveSigner to give them permission is you are adding their account into a list of authorised users. With use case #1, it’s very similar but instead of granting permission to a user account, you are granting permission to a key. This is very useful in the case of this Ledger project because this means I can extract the Ledger public key and tell the blockchain that I’m granting permission to this key to perform activities on my behalf. Alternatively, I could also replace my existing keys with the Ledger keys but that means that if I loose both my main Ledger device, the backup one and the recovery words, I won’t be able to access my account anymore. Adding a key to the list of authorised keys means I can access my account with both my current keys and the one from the device. I can then write down my current keys on a piece of paper that I would keep somewhere safe. If anything happens with my devices I can always retrieve that piece of paper. The beta web interface ![Beta Hive Ledger web app](https://images.hive.blog/DQmcfYRWVU8sAwuHQvg1AxD2XcaxmrmoPqfsWornH66K2BH/ledger-hive.jpg) So when you access the web interface, it will ask you to connect your Ledger device and launch the Hive app. You will then be presented with a form that allows you to extract the device public key and perform some basic actions: adding your device public key to your account authorised keys, sending HIVE/HBD to another user. The keys The Hive Ledger app allows you to generate private and public keys for a lot of accounts. That means you can use it to manage your main and all your alt accounts on Hive. For the beta, I’ve restricted it to 10 accounts only. Each account can also have multiple sets of keys. You usually start with set #1 and if you ever need to change keys you would select the next set. Each set of keys is composed of the Owner Key, the Active Key, the Posting Key and the Memo Key. You can only extract the public keys from the device, the private keys never leave the device which is why it is much safer because you won’t share them with anyone or any dApp. Granting permissions to the keys Once you have selected your account number, your key set number and your key role, the interface will extract and display its public key and will ask you to confirm it by matching it with the one displayed on your Ledger device. Upon confirmation, it will present you with a button that will allow you to ask the blockchain to add the selected public key into your list of authorised keys for that role. This action will be performed by the Hive @Keychain browser extension. There can be different strategies for which key to add to your list of authorised keys: you could add all of the 4 keys, although the Memo key is not yet fully supported you could add just the Owner and Active keys and use your current Posting key or Hive Keychain to perform post, comments and upvotes. you could add just the Active key because you only want to use the Ledger to perform financial transactions you could add just the Owner key because the owner key can perform all actions that can be done by the other keys including account recovery which is exclusive to the Owner key Making a transfer using the Ledger device to sign the transaction Once you have added the Active or Owner key (or both) to your list of authorised keys on the blockchain, you will be able to use your Ledger device to authorise transfer or Hive and HBD assets to another account. Once you’ve filled the form and click on Send, the details of the transfer will show up on your Ledger device and you will need to confirm each of the fields: from, to, amount, currency and memo. Please note that the blockchain only accepts the currency symbols STEEM and SBD but will actually map it to HIVE and HBD this is why the device will show STEEM and SBD for HIVE and HBD respectively. A future hardfork will change this behaviour. Once you have confirmed and approved on your device, the web interface will receive the crypto signature from the device and will then submit the signed transfer request to the blockchain (Hive Keychain is not used here) and will display its response. Wait for a few minutes and double check that the transaction has been recorded by using a block explorer such as https://hiveblocks.com Related links The beta web interface: https://tools.hivean.com/ledger.html Instructions for installing the Hive app on a Ledger device: https://hive.blog/hive-139531/@netuoso/hive-application-for-the-ledger-nano-s-x-hardware-wallet Using the Ledger Hive apps with Beem the Python library: https://peakd.com/hive-139531/@holger80/update-for-beem-support-for-ledger-nano-sx-has-been-added Open Source My web interface won’t be release open source, however, the library I’m working on that allows it to communicate with the Ledger device via Web USB will be release as soon as I can get the code ready. Vote for my witness On Hive, Witnesses are playing the important role of providing a performant and safe network for all of us. You have the power to choose 30 trusty witnesses to package transactions and sign the blocks that will go in the Hive blockchain. Vote for me via HiveSigner to support my work for the community. See: Beta Hive Ledger web interface by @quochuy</summary></entry><entry><title type="html">Example of using the Ledger Nano S with Beem</title><link href="https://hivedocs.info/howto/beem/python/wallet/2020/05/12/example-of-using-the-ledger-nano-s-with-beem.html" rel="alternate" type="text/html" title="Example of using the Ledger Nano S with Beem" /><published>2020-05-12T19:46:45-07:00</published><updated>2020-05-12T19:46:45-07:00</updated><id>https://hivedocs.info/howto/beem/python/wallet/2020/05/12/example-of-using-the-ledger-nano-s-with-beem</id><content type="html" xml:base="https://hivedocs.info/howto/beem/python/wallet/2020/05/12/example-of-using-the-ledger-nano-s-with-beem.html">&lt;h1 id=&quot;example-of-using-the-ledger-nano-s-with-beem&quot;&gt;Example of using the Ledger Nano S with Beem&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;https://files.peakd.com/file/peakd-hive/netuoso/qo0CRK3m-hiveledgerbanenr.png&quot; alt=&quot;hive ledger&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Earlier today, @holger80 announced the release of Beem v0.23.8 which has support for signing transactions via the Hive application on the Ledger Nano S. You can find that post here: 
&lt;a href=&quot;https://peakd.com/hive-139531/@holger80/update-for-beem-support-for-ledger-nano-sx-has-been-added&quot;&gt;https://peakd.com/hive-139531/@holger80/update-for-beem-support-for-ledger-nano-sx-has-been-added&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This post will give a quick demonstration of using the &lt;code class=&quot;highlighter-rouge&quot;&gt;cli_wallet&lt;/code&gt; to configure your account to be able to use your Ledger Nano S for signing.&lt;/p&gt;

&lt;h2 id=&quot;first-things-first-install-beem&quot;&gt;First thing’s first, install Beem&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pip install -U beem&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;getting-your-new-public-key&quot;&gt;Getting your new Public Key&lt;/h2&gt;
&lt;p&gt;The first step of configuring your account to use the Ledger Nano S is to get your public key from the device.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;beempy -u listkeys&lt;/code&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;+-------------------------------------------------------+
| Available Key for 48'/13'/0'/0'/0'                    |
+-------------------------------------------------------+
| STM8SZg3gBcuAEkz9xGKVMnwJHWESHcXFYWDbRcSBCz322dH6jPwy |
+-------------------------------------------------------+
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;You can see the &lt;code class=&quot;highlighter-rouge&quot;&gt;path&lt;/code&gt; is &lt;code class=&quot;highlighter-rouge&quot;&gt;48'/13'/0'/0'/0'&lt;/code&gt;. For now we are going to ignore the reason for that specific path and just proceed using it as it is the default path. The public key that you get from the result relates to the path shown above; changing the path, changes the key.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;configuring-your-account&quot;&gt;Configuring your Account&lt;/h3&gt;
&lt;p&gt;Now that you have obtained the public key from your Ledger Nano S you can proceed with configuring your account using the &lt;code class=&quot;highlighter-rouge&quot;&gt;cli_wallet&lt;/code&gt;. This guide will assume you already have knowledge of installing and using the &lt;code class=&quot;highlighter-rouge&quot;&gt;cli_wallet&lt;/code&gt; and have imported your account’s owner private key already.&lt;/p&gt;

&lt;p&gt;Next, let’s use the &lt;code class=&quot;highlighter-rouge&quot;&gt;get_account&lt;/code&gt; method to list our current keys. Here is the current sample output of my @nettybot account:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &quot;name&quot;: &quot;nettybot&quot;,
  &quot;owner&quot;: {
    &quot;weight_threshold&quot;: 1,
    &quot;account_auths&quot;: [],
    &quot;key_auths&quot;: [[
        &quot;STM5NDUssdRuiqJB6inoK3KRhFbGfxMPsF5f4wdTs5QBad7Bv11du&quot;,
        1
      ]
    ]
  },
  &quot;active&quot;: {
    &quot;weight_threshold&quot;: 1,
    &quot;account_auths&quot;: [],
    &quot;key_auths&quot;: [[
        &quot;STM8SZg3gBcuAEkz9xGKVMnwJHWESHcXFYWDbRcSBCz322dH6jPwy&quot;,
        1
      ]
    ]
  },
  &quot;posting&quot;: {
    &quot;weight_threshold&quot;: 1,
    &quot;account_auths&quot;: [],
    &quot;key_auths&quot;: [[
        &quot;STM7PCZiSjxkLcP5KeQLWDSoP7AKRFBbZagrrpJSXNt4PyiQ3nuLB&quot;,
        1
      ]
    ]
  },
  &quot;memo_key&quot;: &quot;STM5qQY3f2ByahSuYw5pkR2fAFrhDFB6T9jm8mvzFFpRkNVZfyFLB&quot;,
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With that out of the way, you can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;update_account&lt;/code&gt; command. First let’s check the help for this command:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;This method updates the keys of an existing account.

Parameters:
    accountname: The name of the account (type: string)
    json_meta: New JSON Metadata to be associated with the account (type:
	string)
    owner: New public owner key for the account (type: public_key_type)
    active: New public active key for the account (type: public_key_type)
    posting: New public posting key for the account (type: public_key_type)
    memo: New public memo key for the account (type: public_key_type)
    broadcast: true if you wish to broadcast the transaction (type: bool)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we can use the information we have and put everything together.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;update_account nettybot &quot;&quot; STM8SZg3gBcuAEkz9xGKVMnwJHWESHcXFYWDbRcSBCz322dH6jPwy STM8SZg3gBcuAEkz9xGKVMnwJHWESHcXFYWDbRcSBCz322dH6jPwy STM7PCZiSjxkLcP5KeQLWDSoP7AKRFBbZagrrpJSXNt4PyiQ3nuLB STM5qQY3f2ByahSuYw5pkR2fAFrhDFB6T9jm8mvzFFpRkNVZfyFLB
true&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The above command will set @nettybot’s owner and active key to the result we got from the Ledger Nano S using &lt;code class=&quot;highlighter-rouge&quot;&gt;listkeys&lt;/code&gt;. &lt;em&gt;(note: in this example I am setting the owner and active key to the same key. For optimal security, you should use a different key for each but since we are using a Ledger Nano S and @nettybot is a test account, I am going to use a single key for both)&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;After running the &lt;code class=&quot;highlighter-rouge&quot;&gt;update_account&lt;/code&gt; command, we can check the result again by using &lt;code class=&quot;highlighter-rouge&quot;&gt;get_account&lt;/code&gt; once more.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &quot;name&quot;: &quot;nettybot&quot;,
  &quot;owner&quot;: {
    &quot;weight_threshold&quot;: 1,
    &quot;account_auths&quot;: [],
    &quot;key_auths&quot;: [[
        &quot;STM8SZg3gBcuAEkz9xGKVMnwJHWESHcXFYWDbRcSBCz322dH6jPwy&quot;,
        1
      ]
    ]
  },
  &quot;active&quot;: {
    &quot;weight_threshold&quot;: 1,
    &quot;account_auths&quot;: [],
    &quot;key_auths&quot;: [[
        &quot;STM8SZg3gBcuAEkz9xGKVMnwJHWESHcXFYWDbRcSBCz322dH6jPwy&quot;,
        1
      ]
    ]
  },
  &quot;posting&quot;: {
    &quot;weight_threshold&quot;: 1,
    &quot;account_auths&quot;: [],
    &quot;key_auths&quot;: [[
        &quot;STM7PCZiSjxkLcP5KeQLWDSoP7AKRFBbZagrrpJSXNt4PyiQ3nuLB&quot;,
        1
      ]
    ]
  },
  &quot;memo_key&quot;: &quot;STM5qQY3f2ByahSuYw5pkR2fAFrhDFB6T9jm8mvzFFpRkNVZfyFLB&quot;,
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Success .. the owner and active key are now protected inside my Ledger Nano S. There is very little risk of me ever having these keys stolen or lost. If my Ledger Nano S ever breaks, I can use my backup words to initialize a new Ledger Nano S and generate the same exact keys again.&lt;/p&gt;

&lt;p&gt;Hopefully you noticed that means you should &lt;strong&gt;ALWAYS KEEP YOUR LEDGER RECOVERY PHRASE OFFLINE&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;using-our-account-with-beem--ledger&quot;&gt;Using our Account with Beem + Ledger&lt;/h3&gt;
&lt;p&gt;Alright, now that our account is configured to have the proper key setup, we can use beem to perform operations on the Hive blockchain.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Want to vote on this post?
&lt;code class=&quot;highlighter-rouge&quot;&gt;beempy -u upvote -w 100 -a nettybot &quot;@netuoso/example-of-using-the-ledger-nano-s-with-beem&quot;&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Want to vote for a witness?
&lt;code class=&quot;highlighter-rouge&quot;&gt;beempy -u approvewitness -a nettybot netuoso&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Want to delegate some HP?
&lt;code class=&quot;highlighter-rouge&quot;&gt;beempy -u delegate -a nettybot &quot;1000.000 HIVE&quot; netuoso&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Want to send some tokens?
&lt;code class=&quot;highlighter-rouge&quot;&gt;beempy -u transfer -a nettybot netuoso 1000.000 HIVE &quot;Ledger Nano S tip :)&quot;&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;That’s pretty the idea .. no need to import keys to Beem because the keys are all stored inside the Ledger Nano S hardware wallet. This is the absolute most secure way possible to configure your Hive account and execute transactions on the blockchain.&lt;/p&gt;

&lt;p&gt;Beem is going to keep growing because @holger80 is a badass dev so be sure to tell him thanks for making this integration so awesome. Soon hopefully we will even see Keychain integrations.&lt;/p&gt;

&lt;p&gt;By the way, a Vessel Ledger Nano S integration is also around the corner. Stay tuned for that as more and more options for using the Ledger Nano S with your Hive account become available.&lt;/p&gt;

&lt;h3 id=&quot;vote-for-netuoso-for-hive-witness-and-be-sure-to-vote-for-holger80-as-well&quot;&gt;Vote for @netuoso for Hive Witness and be sure to vote for @holger80 as well!&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;
  See: &lt;a href=&quot;https://peakd.com/hive-139531/@netuoso/example-of-using-the-ledger-nano-s-with-beem&quot;&gt;Example of using the Ledger Nano S with Beem&lt;/a&gt;
  by
  &lt;a href=&quot;https://hive.blog/@netuoso&quot;&gt;@netuoso&lt;/a&gt;
&lt;/p&gt;</content><author><name>netuoso</name></author><summary type="html">Example of using the Ledger Nano S with Beem Earlier today, @holger80 announced the release of Beem v0.23.8 which has support for signing transactions via the Hive application on the Ledger Nano S. You can find that post here: https://peakd.com/hive-139531/@holger80/update-for-beem-support-for-ledger-nano-sx-has-been-added This post will give a quick demonstration of using the cli_wallet to configure your account to be able to use your Ledger Nano S for signing. First thing’s first, install Beem pip install -U beem Getting your new Public Key The first step of configuring your account to use the Ledger Nano S is to get your public key from the device. beempy -u listkeys +-------------------------------------------------------+ | Available Key for 48'/13'/0'/0'/0' | +-------------------------------------------------------+ | STM8SZg3gBcuAEkz9xGKVMnwJHWESHcXFYWDbRcSBCz322dH6jPwy | +-------------------------------------------------------+ You can see the path is 48'/13'/0'/0'/0'. For now we are going to ignore the reason for that specific path and just proceed using it as it is the default path. The public key that you get from the result relates to the path shown above; changing the path, changes the key. Configuring your Account Now that you have obtained the public key from your Ledger Nano S you can proceed with configuring your account using the cli_wallet. This guide will assume you already have knowledge of installing and using the cli_wallet and have imported your account’s owner private key already. Next, let’s use the get_account method to list our current keys. Here is the current sample output of my @nettybot account: &quot;name&quot;: &quot;nettybot&quot;, &quot;owner&quot;: { &quot;weight_threshold&quot;: 1, &quot;account_auths&quot;: [], &quot;key_auths&quot;: [[ &quot;STM5NDUssdRuiqJB6inoK3KRhFbGfxMPsF5f4wdTs5QBad7Bv11du&quot;, 1 ] ] }, &quot;active&quot;: { &quot;weight_threshold&quot;: 1, &quot;account_auths&quot;: [], &quot;key_auths&quot;: [[ &quot;STM8SZg3gBcuAEkz9xGKVMnwJHWESHcXFYWDbRcSBCz322dH6jPwy&quot;, 1 ] ] }, &quot;posting&quot;: { &quot;weight_threshold&quot;: 1, &quot;account_auths&quot;: [], &quot;key_auths&quot;: [[ &quot;STM7PCZiSjxkLcP5KeQLWDSoP7AKRFBbZagrrpJSXNt4PyiQ3nuLB&quot;, 1 ] ] }, &quot;memo_key&quot;: &quot;STM5qQY3f2ByahSuYw5pkR2fAFrhDFB6T9jm8mvzFFpRkNVZfyFLB&quot;, With that out of the way, you can use the update_account command. First let’s check the help for this command: This method updates the keys of an existing account. Parameters: accountname: The name of the account (type: string) json_meta: New JSON Metadata to be associated with the account (type: string) owner: New public owner key for the account (type: public_key_type) active: New public active key for the account (type: public_key_type) posting: New public posting key for the account (type: public_key_type) memo: New public memo key for the account (type: public_key_type) broadcast: true if you wish to broadcast the transaction (type: bool) Now we can use the information we have and put everything together. update_account nettybot &quot;&quot; STM8SZg3gBcuAEkz9xGKVMnwJHWESHcXFYWDbRcSBCz322dH6jPwy STM8SZg3gBcuAEkz9xGKVMnwJHWESHcXFYWDbRcSBCz322dH6jPwy STM7PCZiSjxkLcP5KeQLWDSoP7AKRFBbZagrrpJSXNt4PyiQ3nuLB STM5qQY3f2ByahSuYw5pkR2fAFrhDFB6T9jm8mvzFFpRkNVZfyFLB true The above command will set @nettybot’s owner and active key to the result we got from the Ledger Nano S using listkeys. (note: in this example I am setting the owner and active key to the same key. For optimal security, you should use a different key for each but since we are using a Ledger Nano S and @nettybot is a test account, I am going to use a single key for both). After running the update_account command, we can check the result again by using get_account once more. &quot;name&quot;: &quot;nettybot&quot;, &quot;owner&quot;: { &quot;weight_threshold&quot;: 1, &quot;account_auths&quot;: [], &quot;key_auths&quot;: [[ &quot;STM8SZg3gBcuAEkz9xGKVMnwJHWESHcXFYWDbRcSBCz322dH6jPwy&quot;, 1 ] ] }, &quot;active&quot;: { &quot;weight_threshold&quot;: 1, &quot;account_auths&quot;: [], &quot;key_auths&quot;: [[ &quot;STM8SZg3gBcuAEkz9xGKVMnwJHWESHcXFYWDbRcSBCz322dH6jPwy&quot;, 1 ] ] }, &quot;posting&quot;: { &quot;weight_threshold&quot;: 1, &quot;account_auths&quot;: [], &quot;key_auths&quot;: [[ &quot;STM7PCZiSjxkLcP5KeQLWDSoP7AKRFBbZagrrpJSXNt4PyiQ3nuLB&quot;, 1 ] ] }, &quot;memo_key&quot;: &quot;STM5qQY3f2ByahSuYw5pkR2fAFrhDFB6T9jm8mvzFFpRkNVZfyFLB&quot;, Success .. the owner and active key are now protected inside my Ledger Nano S. There is very little risk of me ever having these keys stolen or lost. If my Ledger Nano S ever breaks, I can use my backup words to initialize a new Ledger Nano S and generate the same exact keys again. Hopefully you noticed that means you should ALWAYS KEEP YOUR LEDGER RECOVERY PHRASE OFFLINE. Using our Account with Beem + Ledger Alright, now that our account is configured to have the proper key setup, we can use beem to perform operations on the Hive blockchain. Want to vote on this post? beempy -u upvote -w 100 -a nettybot &quot;@netuoso/example-of-using-the-ledger-nano-s-with-beem&quot; Want to vote for a witness? beempy -u approvewitness -a nettybot netuoso Want to delegate some HP? beempy -u delegate -a nettybot &quot;1000.000 HIVE&quot; netuoso Want to send some tokens? beempy -u transfer -a nettybot netuoso 1000.000 HIVE &quot;Ledger Nano S tip :)&quot; That’s pretty the idea .. no need to import keys to Beem because the keys are all stored inside the Ledger Nano S hardware wallet. This is the absolute most secure way possible to configure your Hive account and execute transactions on the blockchain. Beem is going to keep growing because @holger80 is a badass dev so be sure to tell him thanks for making this integration so awesome. Soon hopefully we will even see Keychain integrations. By the way, a Vessel Ledger Nano S integration is also around the corner. Stay tuned for that as more and more options for using the Ledger Nano S with your Hive account become available. Vote for @netuoso for Hive Witness and be sure to vote for @holger80 as well! See: Example of using the Ledger Nano S with Beem by @netuoso</summary></entry><entry><title type="html">update for beem: support for Ledger Nano (S/X) has been added</title><link href="https://hivedocs.info/howto/beem/python/wallet/2020/05/12/update-for-beem-support-for-ledger-nano-sx-has-been-added.html" rel="alternate" type="text/html" title="update for beem: support for Ledger Nano (S/X) has been added" /><published>2020-05-12T12:23:15-07:00</published><updated>2020-05-12T12:23:15-07:00</updated><id>https://hivedocs.info/howto/beem/python/wallet/2020/05/12/update-for-beem-support-for-ledger-nano-sx-has-been-added</id><content type="html" xml:base="https://hivedocs.info/howto/beem/python/wallet/2020/05/12/update-for-beem-support-for-ledger-nano-sx-has-been-added.html">&lt;h2 id=&quot;repository&quot;&gt;Repository&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/holgern/beem&quot;&gt;https://github.com/holgern/beem&lt;/a&gt;&lt;/p&gt;
&lt;div style=&quot;display: block; margin: 0 auto;&quot;&gt;

  &lt;p&gt;&lt;img src=&quot;https://cdn.steemitimages.com/DQmcRrwLPSywSYMierfP6um6mejeMNGjN9Rxw7audJqTDgb/beem-logo&quot; alt=&quot;beem-logo&quot; /&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/holgern/beem&quot;&gt;beem&lt;/a&gt; is a python library and command line tool for HIVE.  The current version is 0.23.7.&lt;/p&gt;

&lt;p&gt;There is also a discord channel for beem: 
&lt;a href=&quot;https://discord.gg/4HM592V&quot;&gt;https://discord.gg/4HM592V&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The newest beem version can be installed by:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip install -U beem
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If you want to use Ledger Nano, then you need also:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip install -U ledgerblue
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Check that you are using hive nodes. The following command&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;beempy updatenodes --hive
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;updates the nodelist and uses only hive nodes. After setting hive as default_chain, &lt;code class=&quot;highlighter-rouge&quot;&gt;beempy updatenodes&lt;/code&gt; can be used.&lt;/p&gt;

&lt;p&gt;The list of nodes can be checked with&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;beempy config
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;beempy currentnode
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;shows the currently connected node.&lt;/p&gt;

&lt;h2 id=&quot;changelog-for-versions-0237&quot;&gt;Changelog for versions 0.23.7&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Fix update_account_jsonmetadata and add posting_json_metadata property to Account&lt;/li&gt;
  &lt;li&gt;Add Ledger Nano S support&lt;/li&gt;
  &lt;li&gt;beempy -u activates ledger signing&lt;/li&gt;
  &lt;li&gt;beempy -u listkeys shows pubkey from ledger&lt;/li&gt;
  &lt;li&gt;beempy -u listaccounts searches for accounts that have pubkey derived from attached ledger&lt;/li&gt;
  &lt;li&gt;beempy -u keygen creates pubkey lists that can be used for newaccount and changekeys&lt;/li&gt;
  &lt;li&gt;new option use_ledger and path for Hive&lt;/li&gt;
  &lt;li&gt;Allow role selection in keygen&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;changelog-for-versions-0236&quot;&gt;Changelog for versions 0.23.6&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;beempy --key key_list.json command&lt;/code&gt; can be used to set keys in beempy without using the wallet.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;using-the-ledger-nano-for-signing&quot;&gt;Using the Ledger Nano for signing&lt;/h2&gt;

&lt;p&gt;beem/beepy is the first library/application that supports signing of operation with the ledger Nano S/X hardware wallet. It uses the &lt;a href=&quot;https://peakd.com/hive-139531/@netuoso/hive-application-for-the-ledger-nano-s-x-hardware-wallet&quot;&gt;Hive wallet application for ledger Nano S/X&lt;/a&gt; from @netuoso.&lt;/p&gt;

&lt;p&gt;Uploading the app to a Nano X is not yet possible.&lt;/p&gt;

&lt;p&gt;You need to install the Hive app to your ledger Nano. You can download it from &lt;a href=&quot;https://github.com/netuoso/ledger-app-hive&quot;&gt;ledger-hive-app&lt;/a&gt; by @netuoso.
Please read the readme on how to install the app to your ledger.&lt;/p&gt;

&lt;p&gt;When you sucessfully could install the Hive app to your ledger, you need to select it and enter &lt;code class=&quot;highlighter-rouge&quot;&gt;Open application&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You need also install ledgerblue&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip install -U ledgerblue
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can test if everything works with&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;beempy -u listkeys
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;-u&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;--use-ledger&lt;/code&gt; parameter activates ledger support for all beempy commands.
If you see&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ledgerblue.commException.CommException: Exception : Invalid status 6d00 (Unexpected state of device: verify that the right application is opened?)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;your setup is not correct. If you see&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;+-------------------------------------------------------+
| Available Key for 48'/13'/0'/0'/0'                    |
+-------------------------------------------------------+
| STM...                                                | 
+-------------------------------------------------------+
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;everything is set up.&lt;/p&gt;

&lt;h2 id=&quot;changing-your-keys&quot;&gt;Changing your keys&lt;/h2&gt;
&lt;p&gt;You need to change your keys to the public keys that your ledger provides before using the ledger for signing. It is also possible to change only the owner key.&lt;/p&gt;

&lt;p&gt;As private keys will not leave your hardware wallet, you cannot put them into keychain or peakd as before. You can only sign operations on apps that support the ledger.&lt;/p&gt;

&lt;p&gt;When you lose your ledger and your recovery phrase, you lose the ability to sign with that role. E.g. when you changed your owner key, and you lost your ledger and the recovery phrase, you cannot change your account keys anymore.&lt;/p&gt;

&lt;p&gt;In the current state (lack of ledger support by other apps), i recommend to change only the owner key.&lt;/p&gt;

&lt;h2 id=&quot;seting-the-path&quot;&gt;Seting the path&lt;/h2&gt;
&lt;p&gt;The pubkeys that are provided by the ledger are derived from the given path.
A  path for hive consists of&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;48'/13'/role number'/account index'/key sequence'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The role number is 0 for owner, 1 for active, 4 for posting and 3 for memo.&lt;/p&gt;

&lt;p&gt;You need to assign an account index number to your account. You are starting with 0 and when you plan to use a second account, you need to increase this index. The key index starts with 0 for each role and account index. Whenever you change your keys, you need to increase the key sequence index.&lt;/p&gt;

&lt;h3 id=&quot;changing-your-owner-active-and-posting-key&quot;&gt;Changing your owner, active and posting key&lt;/h3&gt;
&lt;p&gt;It is not recommended to change the memo key (no encryption support for ledger yet on beem yet), this is the maximum setup. Changing your owner, active and posting key means at this moment (when more app add support for ledger, this will change):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;all operation can only be broadcasted by beem/beempy&lt;/li&gt;
  &lt;li&gt;Voting, transfering on a mobile device is not possible&lt;/li&gt;
  &lt;li&gt;keychain usage is not possible&lt;/li&gt;
  &lt;li&gt;peakd, hive.blog cannot be used for voting or any other operation&lt;/li&gt;
  &lt;li&gt;hive-engine or any dapp cannot be longer used&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At first, three new pubkeys needs to be obtained from the ledger:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;beempy -u keygen --account 3 --role owner,active,posting
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This beempy command creates three pubkeys for the account index 3 derived from the following paths:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt; 48'/13'/0'/3'/0'&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt; 48'/13'/1'/3'/0'&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt; 48'/13'/4'/3'/0'&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can save the pubkeys to a json for easier key changing by:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;beempy -u keygen --account 3 --role owner,active,posting --export-pub beembot.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In both cases you will be asked to approve the shown pubkeys on your ledger Nano.&lt;/p&gt;

&lt;p&gt;We can now change the keys with&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;beempy changekeys --import-pub beembot.json beembot
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;changing-your-owner-and-active-key&quot;&gt;Changing your owner and active key&lt;/h2&gt;
&lt;p&gt;This involves changing your owner and active key.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;all operation that need an active key can only be broadcasted by beem/beempy.&lt;/li&gt;
  &lt;li&gt;transfering Hive/HBD on a mobile device is not possible&lt;/li&gt;
  &lt;li&gt;keychain usage is not possible for operation needing an active key&lt;/li&gt;
  &lt;li&gt;hive-engine or any dapps that are using custom_json signed with an active key cannot be longer used.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;beempy -u keygen  --role owner,active --export-pub account_pubkeys.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;You can set the account index with &lt;code class=&quot;highlighter-rouge&quot;&gt;--account&lt;/code&gt;.
Changing the keys can be done with &lt;code class=&quot;highlighter-rouge&quot;&gt;beempy changekeys&lt;/code&gt; as shown above.&lt;/p&gt;

&lt;h2 id=&quot;changing-your-owner-key&quot;&gt;Changing your owner key&lt;/h2&gt;
&lt;p&gt;This changes only the owner key. Active and posting key are still managed with private keys as before. Until ledger is not supported by keychain or on mobile, this is the most likely usecase now.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Changing your keys needs to be done with beem/beempy&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;beempy -u keygen --role owner --export-pub account_pubkeys.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;You can set the account index with &lt;code class=&quot;highlighter-rouge&quot;&gt;--account&lt;/code&gt;.
Changing the keys can be done with &lt;code class=&quot;highlighter-rouge&quot;&gt;beempy changekeys&lt;/code&gt; as shown above.&lt;/p&gt;

&lt;p&gt;You may need to change the default path. When you used &lt;code class=&quot;highlighter-rouge&quot;&gt;--account 2&lt;/code&gt;, you need to set&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;beempy set default_path &quot;48'/13'/0'/2'/0'&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Whenever you use &lt;code class=&quot;highlighter-rouge&quot;&gt;beempy -u&lt;/code&gt;, this path is used for signing.&lt;/p&gt;

&lt;h2 id=&quot;checking-if-changing-keys-was-sucessfully&quot;&gt;Checking if changing keys was sucessfully&lt;/h2&gt;
&lt;p&gt;The following command checks if a derived pubkey from the ledger is set somewhere in Hive using &lt;code class=&quot;highlighter-rouge&quot;&gt;getAccountFromPublicKey&lt;/code&gt; from the wallet class.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;beempy -u listaccounts
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;returns then&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;+---------+---------+-------------------------------------------------------+------------------+
| Name    | Type    | Available Key                                         | Path             |
+---------+---------+-------------------------------------------------------+------------------+
| beembot | owner   | STM7UYXcqJsZqoroPKoziDmB3XHSVfnLbLJ9TWSVsD4zC7YHsdgo5 | 48'/13'/0'/3'/0' |
| beembot | active  | STM7a1bcn9Anx7F2dKZGEkbVRFbCHT9exx42SSKd4JicJW82VQtAc | 48'/13'/1'/3'/0' |
| beembot | posting | STM7cvheXK2FTEAkWe1U7SD2W6H6H3a6uJ28ors37rxcE5evP5fji | 48'/13'/4'/3'/0' |
+---------+---------+-------------------------------------------------------+------------------+
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;set-the-path&quot;&gt;Set the path&lt;/h2&gt;
&lt;p&gt;As we have used a account index &amp;gt; 0, we must change the default path. At the moment, only one path can be stored in default_path.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;beempy set default_path &quot;48'/13'/0'/3'/0'&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;We will now sign all transactions with the owner key, until the path is changed or set for a transaction with &lt;code class=&quot;highlighter-rouge&quot;&gt;--path&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can check which pubkey is returned for the actually set &lt;code class=&quot;highlighter-rouge&quot;&gt;default_path&lt;/code&gt; with&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;beempy -u listkeys
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The shown pubkey can checked with&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;beempy info STM...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;using-the-ledger-to-sign-transactions&quot;&gt;Using the ledger to sign transactions&lt;/h2&gt;

&lt;p&gt;We can now sign all transaction by the ledger, when &lt;code class=&quot;highlighter-rouge&quot;&gt;-u&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;--use-ledger&lt;/code&gt; is set.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;beempy -u transfer -a beembot holger80 0.001 HIVE &quot;test with ledger&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This is now signed with the owner key, as default_path is &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;48'/13'/0'/3'/0'&quot;&lt;/code&gt;.
We can sign the same trx with the active by setting the path to &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;48'/13'/1'/3'/0'&quot;&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;beempy -u --path &quot;48'/13'/1'/3'/0'&quot; transfer -a beembot holger80 0.001 HIVE &quot;test with ledger&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;building-and-signing-a-transaction-in-python&quot;&gt;Building and signing a transaction in python&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from beem import Hive
from beem.transactionbuilder import TransactionBuilder
from beembase import operations
hive = Hive(use_ledger=True, path=&quot;48'/13'/1'/3'/0'&quot;)

tx = TransactionBuilder(blockchain_instance=hive)

transfer_dict = {&quot;from&quot;: 'beembot', &quot;to&quot;: 'holger80',
                 &quot;amount&quot;: '0.001 HIVE', &quot;memo&quot;: 'test with ledger'}
op = operations.Transfer(**transfer_dict)
tx.appendOps(op)
tx.sign()
tx.broadcast()

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It is also possible to use the predifined broadcast function&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from beem import Hive
from beem.account import Account
hive = Hive(use_ledger=True, path=&quot;48'/13'/1'/3'/0'&quot;)
account = Account(&quot;beembot&quot;, blockchain_instance=hive)
account.transfer(&quot;holger80&quot;, 0.001, &quot;HIVE&quot;, &quot;test with ledger&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Sending all four transfers had worked:
&lt;img src=&quot;https://images.hive.blog/DQmQP4epEqsc67hw44vAv7ZYphUJjjGJRcrYaEk4gCpR576/image&quot; alt=&quot;&quot; /&gt;
I was asked everytime to check the transfer op and had to validate every field.&lt;/p&gt;

&lt;h2 id=&quot;advantages-for-changing-the-owner-key&quot;&gt;Advantages for changing the owner key&lt;/h2&gt;
&lt;p&gt;Letting the ledger signing with the owner key has some advantages:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;beempy can be used without entering any keys, as I can sign all operations with the owner key&lt;/li&gt;
  &lt;li&gt;Each operation must be reviewed on the ledger before broadcasting&lt;/li&gt;
  &lt;li&gt;The owner key cannot be accedentially pasted&lt;/li&gt;
  &lt;li&gt;When I lose the keys to my hive account, I can easily create new keys, as the owner key is stored in the ledger.&lt;/li&gt;
  &lt;li&gt;My owner key is protected against pishing and hacking.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I just need to take good care of the ledger device and the recovery words.&lt;/p&gt;

&lt;h2 id=&quot;roadmap&quot;&gt;Roadmap&lt;/h2&gt;
&lt;p&gt;For the next release, I will work on multisigning with ledger as one signer (at the moment, only one signer is possible when using ledger). Also, a better path handling is needed. At the moment, only one default_path can be set. Something like storing the path for all used keys, depending on roles and accounts in a database would be useful. Parallel storage of keys and paths would also nice.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;If you like what I do, consider casting a vote for me as witness on &lt;a href=&quot;https://hivesigner.com/sign/account-witness-vote?witness=holger80&amp;amp;approve=1&quot;&gt;Hivesigner&lt;/a&gt; or on &lt;a href=&quot;https://peakd.com/witnesses&quot;&gt;PeakD&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;
  See: &lt;a href=&quot;https://hive.blog/hive-139531/@holger80/update-for-beem-support-for-ledger-nano-sx-has-been-added&quot;&gt;update for beem: support for Ledger Nano (S/X) has been added&lt;/a&gt;
  by
  &lt;a href=&quot;https://hive.blog/@holger80&quot;&gt;@holger80&lt;/a&gt;
&lt;/p&gt;</content><author><name>holger80</name></author><summary type="html">Repository https://github.com/holgern/beem beem is a python library and command line tool for HIVE. The current version is 0.23.7. There is also a discord channel for beem: https://discord.gg/4HM592V The newest beem version can be installed by: pip install -U beem If you want to use Ledger Nano, then you need also: pip install -U ledgerblue Check that you are using hive nodes. The following command beempy updatenodes --hive updates the nodelist and uses only hive nodes. After setting hive as default_chain, beempy updatenodes can be used. The list of nodes can be checked with beempy config and beempy currentnode shows the currently connected node. Changelog for versions 0.23.7 Fix update_account_jsonmetadata and add posting_json_metadata property to Account Add Ledger Nano S support beempy -u activates ledger signing beempy -u listkeys shows pubkey from ledger beempy -u listaccounts searches for accounts that have pubkey derived from attached ledger beempy -u keygen creates pubkey lists that can be used for newaccount and changekeys new option use_ledger and path for Hive Allow role selection in keygen Changelog for versions 0.23.6 beempy --key key_list.json command can be used to set keys in beempy without using the wallet. Using the Ledger Nano for signing beem/beepy is the first library/application that supports signing of operation with the ledger Nano S/X hardware wallet. It uses the Hive wallet application for ledger Nano S/X from @netuoso. Uploading the app to a Nano X is not yet possible. You need to install the Hive app to your ledger Nano. You can download it from ledger-hive-app by @netuoso. Please read the readme on how to install the app to your ledger. When you sucessfully could install the Hive app to your ledger, you need to select it and enter Open application. You need also install ledgerblue pip install -U ledgerblue You can test if everything works with beempy -u listkeys The -u or --use-ledger parameter activates ledger support for all beempy commands. If you see ledgerblue.commException.CommException: Exception : Invalid status 6d00 (Unexpected state of device: verify that the right application is opened?) your setup is not correct. If you see +-------------------------------------------------------+ | Available Key for 48'/13'/0'/0'/0' | +-------------------------------------------------------+ | STM... | +-------------------------------------------------------+ everything is set up. Changing your keys You need to change your keys to the public keys that your ledger provides before using the ledger for signing. It is also possible to change only the owner key. As private keys will not leave your hardware wallet, you cannot put them into keychain or peakd as before. You can only sign operations on apps that support the ledger. When you lose your ledger and your recovery phrase, you lose the ability to sign with that role. E.g. when you changed your owner key, and you lost your ledger and the recovery phrase, you cannot change your account keys anymore. In the current state (lack of ledger support by other apps), i recommend to change only the owner key. Seting the path The pubkeys that are provided by the ledger are derived from the given path. A path for hive consists of 48'/13'/role number'/account index'/key sequence' The role number is 0 for owner, 1 for active, 4 for posting and 3 for memo. You need to assign an account index number to your account. You are starting with 0 and when you plan to use a second account, you need to increase this index. The key index starts with 0 for each role and account index. Whenever you change your keys, you need to increase the key sequence index. Changing your owner, active and posting key It is not recommended to change the memo key (no encryption support for ledger yet on beem yet), this is the maximum setup. Changing your owner, active and posting key means at this moment (when more app add support for ledger, this will change): all operation can only be broadcasted by beem/beempy Voting, transfering on a mobile device is not possible keychain usage is not possible peakd, hive.blog cannot be used for voting or any other operation hive-engine or any dapp cannot be longer used At first, three new pubkeys needs to be obtained from the ledger: beempy -u keygen --account 3 --role owner,active,posting This beempy command creates three pubkeys for the account index 3 derived from the following paths: 48'/13'/0'/3'/0' 48'/13'/1'/3'/0' 48'/13'/4'/3'/0' You can save the pubkeys to a json for easier key changing by: beempy -u keygen --account 3 --role owner,active,posting --export-pub beembot.json In both cases you will be asked to approve the shown pubkeys on your ledger Nano. We can now change the keys with beempy changekeys --import-pub beembot.json beembot Changing your owner and active key This involves changing your owner and active key. all operation that need an active key can only be broadcasted by beem/beempy. transfering Hive/HBD on a mobile device is not possible keychain usage is not possible for operation needing an active key hive-engine or any dapps that are using custom_json signed with an active key cannot be longer used. beempy -u keygen --role owner,active --export-pub account_pubkeys.json You can set the account index with --account. Changing the keys can be done with beempy changekeys as shown above. Changing your owner key This changes only the owner key. Active and posting key are still managed with private keys as before. Until ledger is not supported by keychain or on mobile, this is the most likely usecase now. Changing your keys needs to be done with beem/beempy beempy -u keygen --role owner --export-pub account_pubkeys.json You can set the account index with --account. Changing the keys can be done with beempy changekeys as shown above. You may need to change the default path. When you used --account 2, you need to set beempy set default_path &quot;48'/13'/0'/2'/0'&quot; Whenever you use beempy -u, this path is used for signing. Checking if changing keys was sucessfully The following command checks if a derived pubkey from the ledger is set somewhere in Hive using getAccountFromPublicKey from the wallet class. beempy -u listaccounts returns then +---------+---------+-------------------------------------------------------+------------------+ | Name | Type | Available Key | Path | +---------+---------+-------------------------------------------------------+------------------+ | beembot | owner | STM7UYXcqJsZqoroPKoziDmB3XHSVfnLbLJ9TWSVsD4zC7YHsdgo5 | 48'/13'/0'/3'/0' | | beembot | active | STM7a1bcn9Anx7F2dKZGEkbVRFbCHT9exx42SSKd4JicJW82VQtAc | 48'/13'/1'/3'/0' | | beembot | posting | STM7cvheXK2FTEAkWe1U7SD2W6H6H3a6uJ28ors37rxcE5evP5fji | 48'/13'/4'/3'/0' | +---------+---------+-------------------------------------------------------+------------------+ Set the path As we have used a account index &amp;gt; 0, we must change the default path. At the moment, only one path can be stored in default_path. beempy set default_path &quot;48'/13'/0'/3'/0'&quot; We will now sign all transactions with the owner key, until the path is changed or set for a transaction with --path. You can check which pubkey is returned for the actually set default_path with beempy -u listkeys The shown pubkey can checked with beempy info STM... Using the ledger to sign transactions We can now sign all transaction by the ledger, when -u or --use-ledger is set. beempy -u transfer -a beembot holger80 0.001 HIVE &quot;test with ledger&quot; This is now signed with the owner key, as default_path is &quot;48'/13'/0'/3'/0'&quot;. We can sign the same trx with the active by setting the path to &quot;48'/13'/1'/3'/0'&quot;: beempy -u --path &quot;48'/13'/1'/3'/0'&quot; transfer -a beembot holger80 0.001 HIVE &quot;test with ledger&quot; Building and signing a transaction in python from beem import Hive from beem.transactionbuilder import TransactionBuilder from beembase import operations hive = Hive(use_ledger=True, path=&quot;48'/13'/1'/3'/0'&quot;) tx = TransactionBuilder(blockchain_instance=hive) transfer_dict = {&quot;from&quot;: 'beembot', &quot;to&quot;: 'holger80', &quot;amount&quot;: '0.001 HIVE', &quot;memo&quot;: 'test with ledger'} op = operations.Transfer(**transfer_dict) tx.appendOps(op) tx.sign() tx.broadcast() It is also possible to use the predifined broadcast function from beem import Hive from beem.account import Account hive = Hive(use_ledger=True, path=&quot;48'/13'/1'/3'/0'&quot;) account = Account(&quot;beembot&quot;, blockchain_instance=hive) account.transfer(&quot;holger80&quot;, 0.001, &quot;HIVE&quot;, &quot;test with ledger&quot;) Sending all four transfers had worked: I was asked everytime to check the transfer op and had to validate every field. Advantages for changing the owner key Letting the ledger signing with the owner key has some advantages: beempy can be used without entering any keys, as I can sign all operations with the owner key Each operation must be reviewed on the ledger before broadcasting The owner key cannot be accedentially pasted When I lose the keys to my hive account, I can easily create new keys, as the owner key is stored in the ledger. My owner key is protected against pishing and hacking. I just need to take good care of the ledger device and the recovery words. Roadmap For the next release, I will work on multisigning with ledger as one signer (at the moment, only one signer is possible when using ledger). Also, a better path handling is needed. At the moment, only one default_path can be set. Something like storing the path for all used keys, depending on roles and accounts in a database would be useful. Parallel storage of keys and paths would also nice. If you like what I do, consider casting a vote for me as witness on Hivesigner or on PeakD See: update for beem: support for Ledger Nano (S/X) has been added by @holger80</summary></entry><entry><title type="html">Hive Application for the Ledger Nano S/X Hardware Wallet</title><link href="https://hivedocs.info/howto/nano/python/wallet/2020/05/10/hive-application-for-the-ledger-nano-s-x-hardware-wallet.html" rel="alternate" type="text/html" title="Hive Application for the Ledger Nano S/X Hardware Wallet" /><published>2020-05-10T20:46:24-07:00</published><updated>2020-05-10T20:46:24-07:00</updated><id>https://hivedocs.info/howto/nano/python/wallet/2020/05/10/hive-application-for-the-ledger-nano-s-x-hardware-wallet</id><content type="html" xml:base="https://hivedocs.info/howto/nano/python/wallet/2020/05/10/hive-application-for-the-ledger-nano-s-x-hardware-wallet.html">&lt;h1 id=&quot;hive-application-for-the-ledger-nano-sx-hardware-wallet&quot;&gt;Hive Application for the Ledger Nano S/X Hardware Wallet&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;https://files.peakd.com/file/peakd-hive/netuoso/7AwM0dDa-image.png&quot; alt=&quot;image credit @thepeakstudio&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;hive-wallet-application-framework-for-ledger-nano-sx&quot;&gt;Hive wallet application framework for Ledger Nano S/X&lt;/h4&gt;

&lt;p&gt;When installed on a Ledger Nano S/X device, this application will deserialize transactions and display them on the hardware wallet for secure validation by the user. If the user accepts the transaction, this application will then sign the transaction with the key specified by the user.&lt;/p&gt;

&lt;p&gt;There is a pre-compiled binary available in the &lt;code class=&quot;highlighter-rouge&quot;&gt;bin/&lt;/code&gt; folder and attached to each public Github release. However, you may optionally choose to compile the Hive Ledger Nano S/X application manually with help of the run.sh script provided in the repository. Usage instructions and examples are below..&lt;/p&gt;

&lt;h2 id=&quot;latest-stable-release&quot;&gt;Latest Stable Release&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
&amp;lt;a href=&quot;https://github.com/netuoso/ledger-app-hive/releases/tag/v1.0.0&quot;&amp;gt;https://github.com/netuoso/ledger-app-hive/releases/tag/v1.0.0&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;building-the-development-version&quot;&gt;Building the Development Version&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Clone this repository
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git clone 
&amp;lt;a href=&quot;https://github.com/netuoso/ledger-app-hive&quot;&amp;gt;https://github.com/netuoso/ledger-app-hive&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Install Docker if not already installed
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;./run.sh install_docker&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Pull the latest ledger-app-hive docker image
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;./run.sh update&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Start the Docker container
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;./run.sh start&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Build the ledger-app-hive application
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;./run.sh build VERSION&lt;/code&gt; # replace VERSION with &lt;code class=&quot;highlighter-rouge&quot;&gt;1.4&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;1.5&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;1.6&lt;/code&gt; based on your Ledger Nano S firmware&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;loading-the-development-app-on-a-ledger-nano-s&quot;&gt;Loading the Development App on a Ledger Nano S&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;you must use Python 3.7 for loading&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Connect the Ledger Nano S to your computer&lt;/li&gt;
  &lt;li&gt;Install the Ledger python module
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pip install ledgerblue&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Load the application onto the Ledger Nano S
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;./run.sh load VERSION&lt;/code&gt; # replace VERSION with &lt;code class=&quot;highlighter-rouge&quot;&gt;1.4&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;1.5&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;1.6&lt;/code&gt; based on your Ledger Nano S firmware&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;testing-the-application&quot;&gt;Testing the Application&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Navigate to the test directory
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cd test&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Run the &lt;code class=&quot;highlighter-rouge&quot;&gt;getPublicKey.py&lt;/code&gt; script &lt;strong&gt;python3 required&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;python getPublicKey.py&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Run the &lt;code class=&quot;highlighter-rouge&quot;&gt;signTransaction.py&lt;/code&gt; script &lt;strong&gt;python2.7 required&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;python signTransaction.py&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;example-testing-output&quot;&gt;Example Testing Output&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;getPublicKey:
&lt;img src=&quot;https://imgur.com/ptKjcek.gif&quot; alt=&quot;&quot; /&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Public key compressed 03d3ead6a886a5896dd05f546704761228c14d6b8d306fa7b0945f75df678b6193
Calculated from public key: Address STM8SZg3gBcuAEkz9xGKVMnwJHWESHcXFYWDbRcSBCz322dH6jPwy
Received from ledger: Address STM8SZg3gBcuAEkz9xGKVMnwJHWESHcXFYWDbRcSBCz322dH6jPwy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;signTransaction:
&lt;img src=&quot;https://imgur.com/48o5qhz.gif&quot; alt=&quot;&quot; /&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HID =&amp;gt; d40400007205800000308000000d8000000080000000800000000420000000000000000000000000000000000000000000000000000000000000000004021b88040485342c6304048164b85e040101042302086e65747479626f74076e6574756f736f010000000000000003535445454d000000040100
HID &amp;lt;= 1f636611993e469a3ad201fbe40df36e8c2be55378a3ca338654f3844d80ce2d6d32a27448c4e5d5e63707f1b9164b42e8cf29f052ae72bd12609182c9d8c88c389000
1f636611993e469a3ad201fbe40df36e8c2be55378a3ca338654f3844d80ce2d6d32a27448c4e5d5e63707f1b9164b42e8cf29f052ae72bd12609182c9d8c88c38
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;technical-application-spec&quot;&gt;Technical Application Spec&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/netuoso/ledger-app-hive/blob/master/doc/hiveapp.asc&quot;&gt;ledger-app-hive Technical Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;contributing&quot;&gt;Contributing&lt;/h2&gt;
&lt;p&gt;If you are interested in contributing the to ledger-app-hive repository, you will need a Github account. Ensure that you have compiled the application, have it installed on your Ledger Nano S/X, and/or throughly read this README and visited the relevant links before filing an issue.&lt;/p&gt;

&lt;h2 id=&quot;bug-reports&quot;&gt;Bug Reports&lt;/h2&gt;
&lt;p&gt;If you encounter an issue while using the ledger-app-hive application on a Ledger Nano S/X Device, visit the &lt;a href=&quot;https://github.com/netuoso/ledger-app-hive/issues&quot;&gt;issues pages&lt;/a&gt; and leave a detailed issue with all necessary information to assist with debugging.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;notes&quot;&gt;Notes&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;This application is in its initial release (v1.0.0)&lt;/li&gt;
  &lt;li&gt;There may be bugs that I have not encountered&lt;/li&gt;
  &lt;li&gt;If the Ledger Nano Device ever locks up, just unplug and restart it&lt;/li&gt;
  &lt;li&gt;If you encounter bugs/issues file them on the Github repository&lt;/li&gt;
  &lt;li&gt;Try and break the application and report bugs for the benefit of everyone&lt;/li&gt;
  &lt;li&gt;Contact @netuoso on Hive, on the &lt;a href=&quot;https://discord.gg/cvnByhu&quot;&gt;HiveDevs Discord&lt;/a&gt;, or on Twitter (&lt;a href=&quot;https://twitter.com/netuoso&quot;&gt;@netuoso&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Thanks to @thepeakstudio and @doze for their contribution of the Hive + Ledger image assets used on this page&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;vote-netuoso-for-hive-witness&quot;&gt;Vote @netuoso For Hive Witness&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://peakd.com/me/witnesses&quot;&gt;https://peakd.com/me/witnesses&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://wallet.hive.blog/&quot;&gt;https://wallet.hive.blog/&lt;/a&gt;
~witnesses&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;links&quot;&gt;Links&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/netuoso/ledger-app-hive&quot;&gt;https://github.com/netuoso/ledger-app-hive&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.ledger.com/&quot;&gt;https://www.ledger.com/&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://twitter.com/netuoso&quot;&gt;https://twitter.com/netuoso&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://files.peakd.com/file/peakd-hive/netuoso/HzlFn4gX-image.png&quot; alt=&quot;image credit @doze&quot; /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;
  See: &lt;a href=&quot;https://peakd.com/hive-139531/@netuoso/hive-application-for-the-ledger-nano-s-x-hardware-wallet&quot;&gt;Hive Application for the Ledger Nano S/X Hardware Wallet&lt;/a&gt;
  by
  &lt;a href=&quot;https://hive.blog/@netuoso&quot;&gt;@netuoso&lt;/a&gt;
&lt;/p&gt;</content><author><name>netuoso</name></author><summary type="html">Hive Application for the Ledger Nano S/X Hardware Wallet Hive wallet application framework for Ledger Nano S/X When installed on a Ledger Nano S/X device, this application will deserialize transactions and display them on the hardware wallet for secure validation by the user. If the user accepts the transaction, this application will then sign the transaction with the key specified by the user. There is a pre-compiled binary available in the bin/ folder and attached to each public Github release. However, you may optionally choose to compile the Hive Ledger Nano S/X application manually with help of the run.sh script provided in the repository. Usage instructions and examples are below.. Latest Stable Release &amp;lt;a href=&quot;https://github.com/netuoso/ledger-app-hive/releases/tag/v1.0.0&quot;&amp;gt;https://github.com/netuoso/ledger-app-hive/releases/tag/v1.0.0&amp;lt;/a&amp;gt; Building the Development Version Clone this repository git clone &amp;lt;a href=&quot;https://github.com/netuoso/ledger-app-hive&quot;&amp;gt;https://github.com/netuoso/ledger-app-hive&amp;lt;/a&amp;gt; Install Docker if not already installed ./run.sh install_docker Pull the latest ledger-app-hive docker image ./run.sh update Start the Docker container ./run.sh start Build the ledger-app-hive application ./run.sh build VERSION # replace VERSION with 1.4,1.5,1.6 based on your Ledger Nano S firmware Loading the Development App on a Ledger Nano S you must use Python 3.7 for loading Connect the Ledger Nano S to your computer Install the Ledger python module pip install ledgerblue Load the application onto the Ledger Nano S ./run.sh load VERSION # replace VERSION with 1.4,1.5,1.6 based on your Ledger Nano S firmware Testing the Application Navigate to the test directory cd test Run the getPublicKey.py script python3 required python getPublicKey.py Run the signTransaction.py script python2.7 required python signTransaction.py Example Testing Output getPublicKey: Public key compressed 03d3ead6a886a5896dd05f546704761228c14d6b8d306fa7b0945f75df678b6193 Calculated from public key: Address STM8SZg3gBcuAEkz9xGKVMnwJHWESHcXFYWDbRcSBCz322dH6jPwy Received from ledger: Address STM8SZg3gBcuAEkz9xGKVMnwJHWESHcXFYWDbRcSBCz322dH6jPwy signTransaction: HID =&amp;gt; d40400007205800000308000000d8000000080000000800000000420000000000000000000000000000000000000000000000000000000000000000004021b88040485342c6304048164b85e040101042302086e65747479626f74076e6574756f736f010000000000000003535445454d000000040100 HID &amp;lt;= 1f636611993e469a3ad201fbe40df36e8c2be55378a3ca338654f3844d80ce2d6d32a27448c4e5d5e63707f1b9164b42e8cf29f052ae72bd12609182c9d8c88c389000 1f636611993e469a3ad201fbe40df36e8c2be55378a3ca338654f3844d80ce2d6d32a27448c4e5d5e63707f1b9164b42e8cf29f052ae72bd12609182c9d8c88c38 Technical Application Spec ledger-app-hive Technical Documentation Contributing If you are interested in contributing the to ledger-app-hive repository, you will need a Github account. Ensure that you have compiled the application, have it installed on your Ledger Nano S/X, and/or throughly read this README and visited the relevant links before filing an issue. Bug Reports If you encounter an issue while using the ledger-app-hive application on a Ledger Nano S/X Device, visit the issues pages and leave a detailed issue with all necessary information to assist with debugging. Notes This application is in its initial release (v1.0.0) There may be bugs that I have not encountered If the Ledger Nano Device ever locks up, just unplug and restart it If you encounter bugs/issues file them on the Github repository Try and break the application and report bugs for the benefit of everyone Contact @netuoso on Hive, on the HiveDevs Discord, or on Twitter (@netuoso) Thanks to @thepeakstudio and @doze for their contribution of the Hive + Ledger image assets used on this page Vote @netuoso For Hive Witness https://peakd.com/me/witnesses https://wallet.hive.blog/ ~witnesses Links https://github.com/netuoso/ledger-app-hive https://www.ledger.com/ https://twitter.com/netuoso See: Hive Application for the Ledger Nano S/X Hardware Wallet by @netuoso</summary></entry><entry><title type="html">Core development report #1</title><link href="https://hivedocs.info/news/core/development/2020/05/09/core-development-report-1.html" rel="alternate" type="text/html" title="Core development report #1" /><published>2020-05-09T11:13:15-07:00</published><updated>2020-05-09T11:13:15-07:00</updated><id>https://hivedocs.info/news/core/development/2020/05/09/core-development-report-1</id><content type="html" xml:base="https://hivedocs.info/news/core/development/2020/05/09/core-development-report-1.html">&lt;p&gt;&lt;img src=&quot;https://files.peakd.com/file/peakd-hive/howo/HC23nP8u-image.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Hi,&lt;/p&gt;

&lt;p&gt;First of all thank you to everyone who voted on my proposal, it’s very humbling to see so much support from stakeholders.&lt;/p&gt;

&lt;p&gt;I initially wanted to make a post every two to three weeks as I mentioned on my initial proposal, the reason for such length between each update is that sometimes we work on big features (like rc delegations) and sometimes weekly updates would be almost one liners of very technical talk “yep did x/y/z still working on it, stuck on this one bug because code works strangely on z”. And I figured it was not worth it.&lt;/p&gt;

&lt;p&gt;But when talking with @neoxian he told me&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;You know what? Even a simple post each week saying “Yep, I’m still working on X” would be a confidence booster.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So I figured I will try to do weekly updates on what I am doing. Be warned though, these posts will be very technical and also most likely quite short.&lt;/p&gt;

&lt;p&gt;So I am still working on RC delegations, I have taken a bunch of the feedback from my last post on it 
&lt;a href=&quot;https://peakd.com/rc/@howo/rc-delegations-current-development-status-and-request-for-feedback&quot;&gt;https://peakd.com/rc/@howo/rc-delegations-current-development-status-and-request-for-feedback&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I removed some limitations on slots to allow the user to set the delegator on slots 1,2 and 3. This should help with some use cases where before if steem created your account, only the @steem account could delegate to you and change that slot.&lt;/p&gt;

&lt;p&gt;I have changed it to keep the same property (aka letting outside people change it) but also added the possibility for the user to set it himself.&lt;/p&gt;

&lt;p&gt;Previously there was also a thing that allowed the top (ranked 1) witness from changing the recover slot, which was useful because mined accounts do not have a recovery account, so that slot would effectively be dead (since only the recovery account could update that slot). for those accounts. Now that the user can set the slot himself, I removed that feature since I don’t think it really serves a purpose anymore.&lt;/p&gt;

&lt;p&gt;There was a bug where the code allowed the same pool to delegate to the same user on multiple slots, which served zero purpose but caused the rc calculations to fail. So I changed the logic to only allow one delegation. The good news is that now that this is in place I could make some modifications to the delegation operation to hide some of the slot complexity to devs.&lt;/p&gt;

&lt;p&gt;Before when delegating from a pool to a user you had to say to which slot you wanted to delegate, now it’s no longer needed. So that’s a bit more straightforward.&lt;/p&gt;

&lt;p&gt;I also made a javascript test suite, but it’s still a work in progress. I will share it in time so it can double as a documentation for devs on how to work with the new rc system. I don’t want to share it too early because I am still making some changes to the api and the parameters.&lt;/p&gt;

&lt;p&gt;I took this opportunity to test a bunch of edge cases, I am not done yet but this is starting to look solid.&lt;/p&gt;

&lt;p&gt;I think in the coming days I will work on making a proper test suite in the actual chain code so I can test things more quickly and also this means we can run it whenever we make a release making the whole chain more stable.&lt;/p&gt;

&lt;p&gt;speaking of testing, the hf24 code freeze is almost upon us, and some of my api changes still need to have automated tests before then, so I will make that as well in the short term.&lt;/p&gt;

&lt;h1 id=&quot;questions--suggestions--ask-them-below-&quot;&gt;Questions ? Suggestions ? Ask them below !&lt;/h1&gt;

&lt;p&gt;Please consider voting on my core development proposal here 
&lt;a href=&quot;https://hivedao.com/proposals/97&quot;&gt;https://hivedao.com/proposals/97&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I am also managing the @steempress witness if you have a free vote that would be very appreciated :)&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;
  See: &lt;a href=&quot;https://peakd.com/hive/@howo/core-development-report-1&quot;&gt;Core development report #1&lt;/a&gt;
  by
  &lt;a href=&quot;https://hive.blog/@howo&quot;&gt;@howo&lt;/a&gt;
&lt;/p&gt;</content><author><name>howo</name></author><summary type="html">Hi, First of all thank you to everyone who voted on my proposal, it’s very humbling to see so much support from stakeholders. I initially wanted to make a post every two to three weeks as I mentioned on my initial proposal, the reason for such length between each update is that sometimes we work on big features (like rc delegations) and sometimes weekly updates would be almost one liners of very technical talk “yep did x/y/z still working on it, stuck on this one bug because code works strangely on z”. And I figured it was not worth it. But when talking with @neoxian he told me You know what? Even a simple post each week saying “Yep, I’m still working on X” would be a confidence booster. So I figured I will try to do weekly updates on what I am doing. Be warned though, these posts will be very technical and also most likely quite short. So I am still working on RC delegations, I have taken a bunch of the feedback from my last post on it https://peakd.com/rc/@howo/rc-delegations-current-development-status-and-request-for-feedback I removed some limitations on slots to allow the user to set the delegator on slots 1,2 and 3. This should help with some use cases where before if steem created your account, only the @steem account could delegate to you and change that slot. I have changed it to keep the same property (aka letting outside people change it) but also added the possibility for the user to set it himself. Previously there was also a thing that allowed the top (ranked 1) witness from changing the recover slot, which was useful because mined accounts do not have a recovery account, so that slot would effectively be dead (since only the recovery account could update that slot). for those accounts. Now that the user can set the slot himself, I removed that feature since I don’t think it really serves a purpose anymore. There was a bug where the code allowed the same pool to delegate to the same user on multiple slots, which served zero purpose but caused the rc calculations to fail. So I changed the logic to only allow one delegation. The good news is that now that this is in place I could make some modifications to the delegation operation to hide some of the slot complexity to devs. Before when delegating from a pool to a user you had to say to which slot you wanted to delegate, now it’s no longer needed. So that’s a bit more straightforward. I also made a javascript test suite, but it’s still a work in progress. I will share it in time so it can double as a documentation for devs on how to work with the new rc system. I don’t want to share it too early because I am still making some changes to the api and the parameters. I took this opportunity to test a bunch of edge cases, I am not done yet but this is starting to look solid. I think in the coming days I will work on making a proper test suite in the actual chain code so I can test things more quickly and also this means we can run it whenever we make a release making the whole chain more stable. speaking of testing, the hf24 code freeze is almost upon us, and some of my api changes still need to have automated tests before then, so I will make that as well in the short term. Questions ? Suggestions ? Ask them below ! Please consider voting on my core development proposal here https://hivedao.com/proposals/97 I am also managing the @steempress witness if you have a free vote that would be very appreciated :) See: Core development report #1 by @howo</summary></entry><entry><title type="html">Ruby Client for Hive: hive-ruby-1.0.0.pre.1</title><link href="https://hivedocs.info/tools/ruby/2020/05/07/ruby-client-for-hive-hive-ruby-1-0-0-pre-1.html" rel="alternate" type="text/html" title="Ruby Client for Hive: hive-ruby-1.0.0.pre.1" /><published>2020-05-07T01:16:18-07:00</published><updated>2020-05-07T01:16:18-07:00</updated><id>https://hivedocs.info/tools/ruby/2020/05/07/ruby-client-for-hive-hive-ruby-1-0-0-pre-1</id><content type="html" xml:base="https://hivedocs.info/tools/ruby/2020/05/07/ruby-client-for-hive-hive-ruby-1-0-0-pre-1.html">&lt;div class=&quot;pull-right&quot;&gt;
  &lt;img src=&quot;https://files.peakd.com/file/peakd-hive/inertia/aJnQFjOw-logo-128.png&quot; /&gt;
&lt;/div&gt;

&lt;h1 id=&quot;hive-ruby&quot;&gt;&lt;a href=&quot;https://gitlab.syncad.com/hive/hive-ruby&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;hive-ruby&lt;/code&gt;&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;Hive-ruby the Ruby API for Hive blockchain.&lt;/p&gt;

&lt;h2 id=&quot;radiator-vs-hive-ruby&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;radiator&lt;/code&gt; vs. &lt;code class=&quot;highlighter-rouge&quot;&gt;hive-ruby&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;hive-ruby&lt;/code&gt; gem was written from the ground up by &lt;code class=&quot;highlighter-rouge&quot;&gt;@inertia&lt;/code&gt;, who is also the author of &lt;a href=&quot;https://github.com/inertia186/radiator&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;radiator&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“I intend to continue work on &lt;code class=&quot;highlighter-rouge&quot;&gt;radiator&lt;/code&gt; indefinitely. But in &lt;code class=&quot;highlighter-rouge&quot;&gt;radiator-0.5&lt;/code&gt;, I intend to refactor &lt;code class=&quot;highlighter-rouge&quot;&gt;radiator&lt;/code&gt; so that is uses &lt;code class=&quot;highlighter-rouge&quot;&gt;hive-ruby&lt;/code&gt; as its core. This means that some features of &lt;code class=&quot;highlighter-rouge&quot;&gt;radiator&lt;/code&gt; like Serialization will become redundant. I think it’s still useful for radiator to do its own serialization because it reduces the number of API requests.” - @inertia&lt;/p&gt;
&lt;/blockquote&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;radiator&lt;/code&gt;&lt;/th&gt;
      &lt;th&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;hive-ruby&lt;/code&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Has internal failover logic&lt;/td&gt;
      &lt;td&gt;Can have failover delegated externally&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Passes &lt;code class=&quot;highlighter-rouge&quot;&gt;error&lt;/code&gt; responses to the caller&lt;/td&gt;
      &lt;td&gt;Handles &lt;code class=&quot;highlighter-rouge&quot;&gt;error&lt;/code&gt; responses and raises exceptions&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Supports tx signing, does its own serialization&lt;/td&gt;
      &lt;td&gt;Also supports tx signing, but delegates serialization to &lt;code class=&quot;highlighter-rouge&quot;&gt;database_api.get_transaction_hex&lt;/code&gt;, then deserializes to verify&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;All apis and methods are hardcoded&lt;/td&gt;
      &lt;td&gt;Asks &lt;code class=&quot;highlighter-rouge&quot;&gt;jsonrpc&lt;/code&gt; what apis and methods are available from the node&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;(&lt;code class=&quot;highlighter-rouge&quot;&gt;radiator-0.4.x&lt;/code&gt;) Only supports AppBase but relies on &lt;code class=&quot;highlighter-rouge&quot;&gt;condenser_api&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Only supports AppBase but does not rely on &lt;code class=&quot;highlighter-rouge&quot;&gt;condenser_api&lt;/code&gt; &lt;strong&gt;(WIP)&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Small list of helper methods for select ops (in addition to build your own transaction)&lt;/td&gt;
      &lt;td&gt;Complete implementation of helper methods for every op (in addition to build your own transaction)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Does not (yet) support &lt;code class=&quot;highlighter-rouge&quot;&gt;json-rpc-batch&lt;/code&gt; requests&lt;/td&gt;
      &lt;td&gt;Supports &lt;code class=&quot;highlighter-rouge&quot;&gt;json-rpc-batch&lt;/code&gt; requests&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;getting-started&quot;&gt;Getting Started&lt;/h2&gt;

&lt;p&gt;The hive-ruby gem is compatible with Ruby 2.2.5 or later.&lt;/p&gt;

&lt;h3 id=&quot;install-the-gem-for-your-project&quot;&gt;Install the gem for your project&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;(Assuming that &lt;a href=&quot;https://www.ruby-lang.org/en/downloads/&quot;&gt;Ruby is installed&lt;/a&gt; on your computer, as well as &lt;a href=&quot;http://rubygems.org/pages/download&quot;&gt;RubyGems&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;To install the gem on your computer, run in shell:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;hive-ruby
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;… then add in your code:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'hive'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To add the gem as a dependency to your project with &lt;a href=&quot;http://bundler.io/&quot;&gt;Bundler&lt;/a&gt;, you can add this line in your Gemfile:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'hive-ruby'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;require: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'hive'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;examples&quot;&gt;Examples&lt;/h2&gt;

&lt;h3 id=&quot;broadcast-vote&quot;&gt;Broadcast Vote&lt;/h3&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;voter: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;voter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;author: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;permlink: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;permlink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;weight: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;weight&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Hive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Broadcast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;vote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;wif: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wif&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;params: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;streaming&quot;&gt;Streaming&lt;/h3&gt;

&lt;p&gt;The value passed to the block is an object, with the keys: &lt;code class=&quot;highlighter-rouge&quot;&gt;:type&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;:value&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;operations&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To start a stream from a specific block number, pass it as an argument:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;operations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;at_block_num: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9001&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can also grab the related transaction id and block number for each operation:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;operations&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trx_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;block_num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block_num&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; :: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trx_id&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To stream only certain operations:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;operations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;types: :vote_operation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Or pass an array of certain operations:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;operations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;types: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:comment_operation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:vote_operation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Or (optionally) just pass the operation(s) you want as the only arguments.  This is semantic sugar for when you want specific types and take all of the defaults.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;operations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:vote_operation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To also include virtual operations:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;operations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;include_virtual: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;multisig&quot;&gt;Multisig&lt;/h3&gt;

&lt;p&gt;You can use multisignature to broadcast an operation.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;voter: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;voter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;author: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;permlink: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;permlink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;weight: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;weight&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Hive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Broadcast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;vote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;wif: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wif1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wif2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;params: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In addition to signing with multiple &lt;code class=&quot;highlighter-rouge&quot;&gt;wif&lt;/code&gt; private keys, it is possible to also export a partially signed transaction to have signing completed by someone else.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;TransactionBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;wif: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wif1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;vote: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;voter: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;voter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;author: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;permlink: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;permlink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;weight: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;weight&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;trx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_json&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'trx.json'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'w'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then send the contents of &lt;code class=&quot;highlighter-rouge&quot;&gt;trx.json&lt;/code&gt; to the other signing party so they can privately sign and broadcast the transaction.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;trx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'trx.json'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;TransactionBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;wif: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wif2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;trx: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;api&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CondenserApi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;trx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;transaction&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;broadcast_transaction_synchronous&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;get-accounts&quot;&gt;Get Accounts&lt;/h3&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;api&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;DatabaseApi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find_accounts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;accounts: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'hiveio'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'alice'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;accounts&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;reputation-formatter&quot;&gt;Reputation Formatter&lt;/h3&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;rep&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Formatter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reputation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reputation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rep&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;tests&quot;&gt;Tests&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Clone the client repository into a directory of your choice:
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git clone 
&amp;lt;a href=&quot;https://gitlab.syncad.com/hive/hive-ruby.git&quot;&amp;gt;https://gitlab.syncad.com/hive/hive-ruby.git&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Navigate into the new folder
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cd hive-ruby&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;All tests can be invoked as follows:
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bundle exec rake test&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;To run &lt;code class=&quot;highlighter-rouge&quot;&gt;static&lt;/code&gt; tests:
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bundle exec rake test:static&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;To run &lt;code class=&quot;highlighter-rouge&quot;&gt;broadcast&lt;/code&gt; tests (broadcast is simulated, only &lt;code class=&quot;highlighter-rouge&quot;&gt;verify&lt;/code&gt; is actually used):
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bundle exec rake test:broadcast&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;To run &lt;code class=&quot;highlighter-rouge&quot;&gt;threads&lt;/code&gt; tests (which quickly verifies thread safety):
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bundle exec rake test:threads&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;To run &lt;code class=&quot;highlighter-rouge&quot;&gt;testnet&lt;/code&gt; tests (which does actual broadcasts)
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;TEST_NODE=
&amp;lt;a href=&quot;https://testnet-api.openhive.network&quot;&amp;gt;https://testnet-api.openhive.network&amp;lt;/a&amp;gt;
 bundle exec rake test:testnet&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can also run other tests that are not part of the above &lt;code class=&quot;highlighter-rouge&quot;&gt;test&lt;/code&gt; execution:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;To run &lt;code class=&quot;highlighter-rouge&quot;&gt;block_range&lt;/code&gt;, which streams blocks (using &lt;code class=&quot;highlighter-rouge&quot;&gt;json-rpc-batch&lt;/code&gt;)
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bundle exec rake stream:block_range&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want to point to any node for tests, instead of letting the test suite pick the default, set the environment variable to &lt;code class=&quot;highlighter-rouge&quot;&gt;TEST_NODE&lt;/code&gt;, e.g.:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ TEST_NODE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&amp;lt;a &lt;span class=&quot;nv&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://testnet-api.openhive.network&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;https://testnet-api.openhive.network&amp;lt;/a&amp;gt;
 bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;rake &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;contributions&quot;&gt;Contributions&lt;/h2&gt;

&lt;p&gt;Patches are welcome! Contributors are listed in the &lt;code class=&quot;highlighter-rouge&quot;&gt;hive-ruby.gemspec&lt;/code&gt; file. Please run the tests (&lt;code class=&quot;highlighter-rouge&quot;&gt;rake test&lt;/code&gt;) before opening a pull request and make sure that you are passing all of them. If you would like to contribute, but don’t know what to work on, check the issues list.&lt;/p&gt;

&lt;h2 id=&quot;issues&quot;&gt;Issues&lt;/h2&gt;

&lt;p&gt;When you find issues, please report them!&lt;/p&gt;

&lt;h2 id=&quot;license&quot;&gt;License&lt;/h2&gt;

&lt;p&gt;MIT&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;
  See: &lt;a href=&quot;https://peakd.com/hive-139531/@inertia/ruby-client-for-hive-hive-ruby-1-0-0-pre-1&quot;&gt;Ruby Client for Hive: hive-ruby-1.0.0.pre.1&lt;/a&gt;
  by
  &lt;a href=&quot;https://hive.blog/@inertia&quot;&gt;@inertia&lt;/a&gt;
&lt;/p&gt;</content><author><name>inertia</name></author><summary type="html">hive-ruby Hive-ruby the Ruby API for Hive blockchain. radiator vs. hive-ruby The hive-ruby gem was written from the ground up by @inertia, who is also the author of radiator. “I intend to continue work on radiator indefinitely. But in radiator-0.5, I intend to refactor radiator so that is uses hive-ruby as its core. This means that some features of radiator like Serialization will become redundant. I think it’s still useful for radiator to do its own serialization because it reduces the number of API requests.” - @inertia radiator hive-ruby Has internal failover logic Can have failover delegated externally Passes error responses to the caller Handles error responses and raises exceptions Supports tx signing, does its own serialization Also supports tx signing, but delegates serialization to database_api.get_transaction_hex, then deserializes to verify All apis and methods are hardcoded Asks jsonrpc what apis and methods are available from the node (radiator-0.4.x) Only supports AppBase but relies on condenser_api Only supports AppBase but does not rely on condenser_api (WIP) Small list of helper methods for select ops (in addition to build your own transaction) Complete implementation of helper methods for every op (in addition to build your own transaction) Does not (yet) support json-rpc-batch requests Supports json-rpc-batch requests Getting Started The hive-ruby gem is compatible with Ruby 2.2.5 or later. Install the gem for your project (Assuming that Ruby is installed on your computer, as well as RubyGems) To install the gem on your computer, run in shell: gem install hive-ruby … then add in your code: require 'hive' To add the gem as a dependency to your project with Bundler, you can add this line in your Gemfile: gem 'hive-ruby', require: 'hive' Examples Broadcast Vote params = { voter: voter, author: author, permlink: permlink, weight: weight } Hive::Broadcast.vote(wif: wif, params: params) do |result| puts result end Streaming The value passed to the block is an object, with the keys: :type and :value. stream = Hive::Stream.new stream.operations do |op| puts &quot;#{op.type}: #{op.value}&quot; end To start a stream from a specific block number, pass it as an argument: stream = Hive::Stream.new stream.operations(at_block_num: 9001) do |op| puts &quot;#{op.type}: #{op.value}&quot; end You can also grab the related transaction id and block number for each operation: stream = Hive::Stream.new stream.operations do |op, trx_id, block_num| puts &quot;#{block_num} :: #{trx_id}&quot; puts &quot;#{op.type}: #{op.value}&quot; end To stream only certain operations: stream = Hive::Stream.new stream.operations(types: :vote_operation) do |op| puts &quot;#{op.type}: #{op.value}&quot; end Or pass an array of certain operations: stream = Hive::Stream.new stream.operations(types: [:comment_operation, :vote_operation]) do |op| puts &quot;#{op.type}: #{op.value}&quot; end Or (optionally) just pass the operation(s) you want as the only arguments. This is semantic sugar for when you want specific types and take all of the defaults. stream = Hive::Stream.new stream.operations(:vote_operation) do |op| puts &quot;#{op.type}: #{op.value}&quot; end To also include virtual operations: stream = Hive::Stream.new stream.operations(include_virtual: true) do |op| puts &quot;#{op.type}: #{op.value}&quot; end Multisig You can use multisignature to broadcast an operation. params = { voter: voter, author: author, permlink: permlink, weight: weight } Hive::Broadcast.vote(wif: [wif1, wif2], params: params) do |result| puts result end In addition to signing with multiple wif private keys, it is possible to also export a partially signed transaction to have signing completed by someone else. builder = Hive::TransactionBuilder.new(wif: wif1) builder.put(vote: { voter: voter, author: author, permlink: permlink, weight: weight }) trx = builder.sign.to_json File.open('trx.json', 'w') do |f| f.write(trx) end Then send the contents of trx.json to the other signing party so they can privately sign and broadcast the transaction. trx = open('trx.json').read builder = Hive::TransactionBuilder.new(wif: wif2, trx: trx) api = Hive::CondenserApi.new trx = builder.transaction api.broadcast_transaction_synchronous(trx) Get Accounts api = Hive::DatabaseApi.new api.find_accounts(accounts: ['hiveio', 'alice']) do |result| puts result.accounts end Reputation Formatter rep = Hive::Formatter.reputation(account.reputation) puts rep Tests Clone the client repository into a directory of your choice: git clone &amp;lt;a href=&quot;https://gitlab.syncad.com/hive/hive-ruby.git&quot;&amp;gt;https://gitlab.syncad.com/hive/hive-ruby.git&amp;lt;/a&amp;gt; Navigate into the new folder cd hive-ruby All tests can be invoked as follows: bundle exec rake test To run static tests: bundle exec rake test:static To run broadcast tests (broadcast is simulated, only verify is actually used): bundle exec rake test:broadcast To run threads tests (which quickly verifies thread safety): bundle exec rake test:threads To run testnet tests (which does actual broadcasts) TEST_NODE= &amp;lt;a href=&quot;https://testnet-api.openhive.network&quot;&amp;gt;https://testnet-api.openhive.network&amp;lt;/a&amp;gt; bundle exec rake test:testnet You can also run other tests that are not part of the above test execution: To run block_range, which streams blocks (using json-rpc-batch) bundle exec rake stream:block_range If you want to point to any node for tests, instead of letting the test suite pick the default, set the environment variable to TEST_NODE, e.g.: $ TEST_NODE= &amp;lt;a href=&quot;https://testnet-api.openhive.network&quot;&amp;gt;https://testnet-api.openhive.network&amp;lt;/a&amp;gt; bundle exec rake test Contributions Patches are welcome! Contributors are listed in the hive-ruby.gemspec file. Please run the tests (rake test) before opening a pull request and make sure that you are passing all of them. If you would like to contribute, but don’t know what to work on, check the issues list. Issues When you find issues, please report them! License MIT See: Ruby Client for Hive: hive-ruby-1.0.0.pre.1 by @inertia</summary></entry><entry><title type="html">Hive Pressure 2: How to Answer Hive Questions?</title><link href="https://hivedocs.info/news/devops/hivemind/nodes/2020/05/04/hive-pressure-2-how-to-answer-hive-questions.html" rel="alternate" type="text/html" title="Hive Pressure 2: How to Answer Hive Questions?" /><published>2020-05-04T11:32:57-07:00</published><updated>2020-05-04T11:32:57-07:00</updated><id>https://hivedocs.info/news/devops/hivemind/nodes/2020/05/04/hive-pressure-2-how-to-answer-hive-questions</id><content type="html" xml:base="https://hivedocs.info/news/devops/hivemind/nodes/2020/05/04/hive-pressure-2-how-to-answer-hive-questions.html">&lt;p&gt;First, you need to learn how to ask good questions, and here are some of the resources that will help you to do so:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developers.hive.io/apidefinitions/&quot;&gt;https://developers.hive.io/apidefinitions/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://hive.hivesigner.com/&quot;&gt;https://hive.hivesigner.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(Kudos to @inertia and @good-karma)&lt;/p&gt;

&lt;p&gt;This set of API calls is far from perfect, but for now it has to be enough for general purpose API nodes.&lt;/p&gt;

&lt;center&gt;
&lt;a href=&quot;https://www.youtube.com/watch&quot;&gt;https://www.youtube.com/watch&lt;/a&gt;
?v=vlW9lDE3DuI&lt;/center&gt;

&lt;h1 id=&quot;the-big-the-slow-and-the-ugly&quot;&gt;The big, the slow, and the ugly.&lt;/h1&gt;
&lt;p&gt;Back in the days, we used to run a so-called “full node”, that is a single &lt;del&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;steemd&lt;/code&gt;&lt;/del&gt; (yeah, we haven’t renamed the binary yet) node that was built with &lt;code class=&quot;highlighter-rouge&quot;&gt;LOW_MEMORY_NODE=OFF&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;CLEAR_VOTES=OFF&lt;/code&gt; and configured with all the plugins you can get.
It required a lot of RAM, it replayed for ages, and it was a huge pain to keep it running.
Our code is great for running blockchain. It’s not equally efficient when it has to answer complex questions.&lt;/p&gt;

&lt;h1 id=&quot;current-architecture&quot;&gt;Current architecture&lt;/h1&gt;
&lt;p&gt;The idea is to move the workload requiring complex queries out of our blockchain nodes.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                  +----------+                                                                
                  |          &amp;lt;-----------------+             @     @@@@@@    ,@@@@@%          
                  | Hivemind |                 |            @@@@    (@@@@@*    @@@@@@         
        +-------+ |          &amp;lt;-------+         |          %@@@@@@     @@@@@@    %@@@@@,       
        |       | +-----^----+       |         |         @@@@@@@@@@    @@@@@@     @@@@@@      
        | redis |       |            |         |       ,@@@@@@@@@@@@     @@@@@@    @@@@@@     
        |       &amp;lt;--+    |       +----v-----+   |      @@@@@@@@@@@@@@@&amp;amp;    @@@@@@     @@@@@@   
        +-------+  |  +-v-+     |          |   |     @@@@@@@@@@@@@@@@@@    .@@@@@%    @@@@@@  
                   |  |   &amp;lt;-----&amp;gt; AH node  |   |   @@@@@@@@@@@@@@@@@@@@@(              .@@@@@%
        +-------+  +--&amp;gt; j |     |          |   |    @@@@@@@@@@@@@@@@@@@@               @@@@@@ 
&amp;lt;-------&amp;gt;       |     | u |     +----------+   |     *@@@@@@@@@@@@@@@@     @@@@@@    @@@@@@.  
&amp;lt;-------&amp;gt; nginx &amp;lt;-----&amp;gt; s |                    |       @@@@@@@@@@@@@@    &amp;amp;@@@@@.    @@@@@@    
&amp;lt;-------&amp;gt;       |     | s |     +----------+   |        #@@@@@@@@@@     @@@@@@    #@@@@@/     
        +-------+     | i |     |          |   |          @@@@@@@@    /@@@@@/    @@@@@@       
                      |   &amp;lt;-----&amp;gt; FAT node &amp;lt;---+           @@@@@(    @@@@@@    .@@@@@&amp;amp;        
                      +---+     |          |                 @@     @@@@@&amp;amp;    @@@@@@          
                                +----------+                                                  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;sup&gt;
Sorry, lack of GIMP skills
&lt;/sup&gt;&lt;/p&gt;

&lt;h2 id=&quot;hivemind&quot;&gt;Hivemind&lt;/h2&gt;
&lt;p&gt;For this purpose I use Hivemind (hats off to @roadscape) backed by PostgreSQL.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Hive is a “consensus interpretation” layer for the Hive blockchain, maintaining the state of social features such as post feeds, follows, and communities. Written in Python, it synchronizes an SQL database with chain state, providing developers with a more flexible/extensible alternative to the raw hived API.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;fat-node&quot;&gt;FAT node&lt;/h2&gt;
&lt;p&gt;Also, instead of a single &lt;code class=&quot;highlighter-rouge&quot;&gt;hived&lt;/code&gt; node with all the plugins, I chose to run two nodes, one of them is a “fat node” (&lt;code class=&quot;highlighter-rouge&quot;&gt;LOW_MEMORY_NODE=OFF&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;CLEAR_VOTES=OFF&lt;/code&gt;) on a MIRA-enabled instance to feed the Hivemind.&lt;/p&gt;

&lt;p&gt;Please note that I have NOT included &lt;code class=&quot;highlighter-rouge&quot;&gt;market_history&lt;/code&gt; in my configuration, simply because it doesn’t require a “fat node”, but Hivemind requires it, so make sure that you have it somewhere.&lt;/p&gt;

&lt;h2 id=&quot;ah-node&quot;&gt;AH node&lt;/h2&gt;
&lt;p&gt;Account history node is the other node I use in my setup. It serves not only account history, but it’s definitely the heaviest plugin here, hence the name.
I’m not using MIRA here, because I prefer the pre-MIRA implementation of the account history plugin and MIRA had some issues with it. Also, it’s way too slow for replay.&lt;/p&gt;

&lt;h2 id=&quot;jussi&quot;&gt;Jussi&lt;/h2&gt;
&lt;p&gt;Instead of one service, I now have three specialized ones, I need to route incoming calls to them.
So the &lt;code class=&quot;highlighter-rouge&quot;&gt;get_account_history&lt;/code&gt; goes to the AH node, while the &lt;code class=&quot;highlighter-rouge&quot;&gt;get_followers&lt;/code&gt; goes to Hivemind.
That’s what jussi does, but it also caches things.&lt;/p&gt;

&lt;h2 id=&quot;redis&quot;&gt;Redis&lt;/h2&gt;
&lt;p&gt;Jussi uses Redis as in-memory data cache. This can very effectively take load off the nodes. Even though most of the entries quickly expire, it’s enough to effectively answer common questions such as “what’s in the head block?”&lt;/p&gt;

&lt;div style=&quot;display: block; margin: 0 auto;&quot;&gt;
  &lt;p&gt;&lt;img src=&quot;https://images.hive.blog/DQmdb8PSfpBkD2dm8cJtLZJNvCYAe2aYLy5Rr9MCLQxHLoN/headblock.jpg&quot; alt=&quot;headblock.jpg&quot; /&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;8 dApps asking for the latest block will result in 1 call to the node and 7 cache hits from Redis.&lt;/p&gt;

&lt;h2 id=&quot;nginx&quot;&gt;Nginx&lt;/h2&gt;
&lt;p&gt;That’s the world facing component - here you can have your SSL termination, rate limiting, load balancing, and all other fancy stuff related to serving your clients.&lt;/p&gt;

&lt;h1 id=&quot;resources&quot;&gt;Resources&lt;/h1&gt;
&lt;p&gt;Now when you know all the components, let’s take a look at what is required to run them all and (in the darkness) bind them.&lt;/p&gt;

&lt;h2 id=&quot;small-stuff&quot;&gt;Small stuff&lt;/h2&gt;
&lt;p&gt;There are no specific needs here. The more traffic you expect, the more resources you will need, but they can run on any reasonable server on instance:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Nginx needs what nginx usually needs - a bunch of cores and some RAM.&lt;/li&gt;
  &lt;li&gt;Jussi is no different than nginx when it comes to resources.&lt;/li&gt;
  &lt;li&gt;Redis needs what redis usually needs - a few GB of RAM to hold the data.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;big-stuff&quot;&gt;Big stuff&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;the AH node, which is non-MIRA in my setup, requires plenty of RAM for the &lt;code class=&quot;highlighter-rouge&quot;&gt;shared_memory.bin&lt;/code&gt; file to either hold it on tmpfs or buffer/cache it, especially during replay. A machine with 32GB RAM will work, but I would rather suggest using a 64GB RAM machine these days. Of course, low latency storage such as SSD or NVMe is a must. You need 600GB of it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;the FAT node in my setup is running MIRA, so it’s not that memory hungry, but the more RAM you have, the more effective it can be. A machine with 16GB RAM might work, but I would go with 32GB or 64GB for it. Don’t even try without a very fast SSD or NVMe. You need 400GB of it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Hivemind itself is a simple script, but it needs PostgreSQL as a database backend, and for that you need all the things that PostgreSQL usually needs. It can run on pretty much everything, as long as you have enough space to fit the data, currently 300GB. Of course, faster storage and more RAM will result in much better performance.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;from-zero-to-hero&quot;&gt;From zero to hero&lt;/h1&gt;
&lt;p&gt;Reference hardware configuration:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Intel(R) Xeon(R) E-2274G CPU @ 4.00GHz
64GB RAM, ECC, 2666MT/s
2x NVMe 960GB (SAMSUNG PM983)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;When you are starting from scratch, it’s best to get a recent &lt;code class=&quot;highlighter-rouge&quot;&gt;block_log&lt;/code&gt;
I’m providing one at 
&lt;a href=&quot;https://gtg.openhive.network/get/blockchain/&quot;&gt;https://gtg.openhive.network/get/blockchain/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;How fast you can get it depends on your network and load on my server. The average downloading speed is around 30MB/s, so you should be able to get it in less than 3 hours.&lt;/p&gt;

&lt;div style=&quot;display: block; margin: 0 auto;&quot;&gt;
  &lt;p&gt;&lt;img src=&quot;https://images.hive.blog/DQmRTxHALWD8Nszhg7cYkqu4tQHCLotEYMK7USDF2xthbAH/replay-speed.png&quot; alt=&quot;replay-speed.png&quot; /&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;div style=&quot;display: block; margin: 0 auto;&quot;&gt;
  &lt;p&gt;&lt;img src=&quot;https://images.hive.blog/DQmeYsSaz9PTyt6wamQU76Z6Mz7gJGce8aHxmj78Q58DLuo/replay-times.png&quot; alt=&quot;replay-times.png&quot; /&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Node type&lt;/th&gt;
      &lt;th&gt;Replay Time&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;AH Node&lt;/td&gt;
      &lt;td&gt;15 hours 42 minutes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Fat Node&lt;/td&gt;
      &lt;td&gt;48 hours 53 minutes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Hivemind&lt;/td&gt;
      &lt;td&gt;85 hours 50 minutes&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Roughly you need 4 days and 9 hours to have it synced to the latest head block.&lt;/p&gt;

&lt;div style=&quot;display: block; margin: 0 auto;&quot;&gt;
  &lt;p&gt;&lt;img src=&quot;https://images.hive.blog/DQmTQXoQYYFenMLrvLRZzuHZQdZ6wStc394jKTnGF8bya1s/4days9hours.jpg&quot; alt=&quot;4days9hours.jpg&quot; /&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;A lot can be improved at the backend, and we are working on that. To be developer-friendly, we also need to improve the set of available API calls, finally get rid of the deprecated ones such as &lt;code class=&quot;highlighter-rouge&quot;&gt;get_state&lt;/code&gt;, and move away from the all in one wrapper &lt;code class=&quot;highlighter-rouge&quot;&gt;condenser_api&lt;/code&gt;. But that’s a different story for a different occasion.&lt;/p&gt;

&lt;div style=&quot;display: block; margin: 0 auto;&quot;&gt;
  &lt;p&gt;&lt;img src=&quot;https://images.hive.blog/DQmSJUo4g9AmoVFoAbs6gzMw6coVURUQKg7URtBSfkEj5oJ/Hive_free-file.png&quot; alt=&quot;Hive_Queen&quot; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;

&lt;p&gt;
  See: &lt;a href=&quot;https://hive.blog/hive-160391/@gtg/hive-pressure-2-how-to-answer-hive-questions&quot;&gt;Hive Pressure 2: How to Answer Hive Questions?&lt;/a&gt;
  by
  &lt;a href=&quot;https://hive.blog/@gtg&quot;&gt;@gtg&lt;/a&gt;
&lt;/p&gt;</content><author><name>gtg</name></author><summary type="html">First, you need to learn how to ask good questions, and here are some of the resources that will help you to do so: https://developers.hive.io/apidefinitions/ https://hive.hivesigner.com/ (Kudos to @inertia and @good-karma) This set of API calls is far from perfect, but for now it has to be enough for general purpose API nodes. https://www.youtube.com/watch ?v=vlW9lDE3DuI The big, the slow, and the ugly. Back in the days, we used to run a so-called “full node”, that is a single steemd (yeah, we haven’t renamed the binary yet) node that was built with LOW_MEMORY_NODE=OFF and CLEAR_VOTES=OFF and configured with all the plugins you can get. It required a lot of RAM, it replayed for ages, and it was a huge pain to keep it running. Our code is great for running blockchain. It’s not equally efficient when it has to answer complex questions. Current architecture The idea is to move the workload requiring complex queries out of our blockchain nodes. +----------+ | &amp;lt;-----------------+ @ @@@@@@ ,@@@@@% | Hivemind | | @@@@ (@@@@@* @@@@@@ +-------+ | &amp;lt;-------+ | %@@@@@@ @@@@@@ %@@@@@, | | +-----^----+ | | @@@@@@@@@@ @@@@@@ @@@@@@ | redis | | | | ,@@@@@@@@@@@@ @@@@@@ @@@@@@ | &amp;lt;--+ | +----v-----+ | @@@@@@@@@@@@@@@&amp;amp; @@@@@@ @@@@@@ +-------+ | +-v-+ | | | @@@@@@@@@@@@@@@@@@ .@@@@@% @@@@@@ | | &amp;lt;-----&amp;gt; AH node | | @@@@@@@@@@@@@@@@@@@@@( .@@@@@% +-------+ +--&amp;gt; j | | | | @@@@@@@@@@@@@@@@@@@@ @@@@@@ &amp;lt;-------&amp;gt; | | u | +----------+ | *@@@@@@@@@@@@@@@@ @@@@@@ @@@@@@. &amp;lt;-------&amp;gt; nginx &amp;lt;-----&amp;gt; s | | @@@@@@@@@@@@@@ &amp;amp;@@@@@. @@@@@@ &amp;lt;-------&amp;gt; | | s | +----------+ | #@@@@@@@@@@ @@@@@@ #@@@@@/ +-------+ | i | | | | @@@@@@@@ /@@@@@/ @@@@@@ | &amp;lt;-----&amp;gt; FAT node &amp;lt;---+ @@@@@( @@@@@@ .@@@@@&amp;amp; +---+ | | @@ @@@@@&amp;amp; @@@@@@ +----------+ Sorry, lack of GIMP skills Hivemind For this purpose I use Hivemind (hats off to @roadscape) backed by PostgreSQL. Hive is a “consensus interpretation” layer for the Hive blockchain, maintaining the state of social features such as post feeds, follows, and communities. Written in Python, it synchronizes an SQL database with chain state, providing developers with a more flexible/extensible alternative to the raw hived API. FAT node Also, instead of a single hived node with all the plugins, I chose to run two nodes, one of them is a “fat node” (LOW_MEMORY_NODE=OFF and CLEAR_VOTES=OFF) on a MIRA-enabled instance to feed the Hivemind. Please note that I have NOT included market_history in my configuration, simply because it doesn’t require a “fat node”, but Hivemind requires it, so make sure that you have it somewhere. AH node Account history node is the other node I use in my setup. It serves not only account history, but it’s definitely the heaviest plugin here, hence the name. I’m not using MIRA here, because I prefer the pre-MIRA implementation of the account history plugin and MIRA had some issues with it. Also, it’s way too slow for replay. Jussi Instead of one service, I now have three specialized ones, I need to route incoming calls to them. So the get_account_history goes to the AH node, while the get_followers goes to Hivemind. That’s what jussi does, but it also caches things. Redis Jussi uses Redis as in-memory data cache. This can very effectively take load off the nodes. Even though most of the entries quickly expire, it’s enough to effectively answer common questions such as “what’s in the head block?” 8 dApps asking for the latest block will result in 1 call to the node and 7 cache hits from Redis. Nginx That’s the world facing component - here you can have your SSL termination, rate limiting, load balancing, and all other fancy stuff related to serving your clients. Resources Now when you know all the components, let’s take a look at what is required to run them all and (in the darkness) bind them. Small stuff There are no specific needs here. The more traffic you expect, the more resources you will need, but they can run on any reasonable server on instance: Nginx needs what nginx usually needs - a bunch of cores and some RAM. Jussi is no different than nginx when it comes to resources. Redis needs what redis usually needs - a few GB of RAM to hold the data. Big stuff the AH node, which is non-MIRA in my setup, requires plenty of RAM for the shared_memory.bin file to either hold it on tmpfs or buffer/cache it, especially during replay. A machine with 32GB RAM will work, but I would rather suggest using a 64GB RAM machine these days. Of course, low latency storage such as SSD or NVMe is a must. You need 600GB of it. the FAT node in my setup is running MIRA, so it’s not that memory hungry, but the more RAM you have, the more effective it can be. A machine with 16GB RAM might work, but I would go with 32GB or 64GB for it. Don’t even try without a very fast SSD or NVMe. You need 400GB of it. Hivemind itself is a simple script, but it needs PostgreSQL as a database backend, and for that you need all the things that PostgreSQL usually needs. It can run on pretty much everything, as long as you have enough space to fit the data, currently 300GB. Of course, faster storage and more RAM will result in much better performance. From zero to hero Reference hardware configuration: Intel(R) Xeon(R) E-2274G CPU @ 4.00GHz 64GB RAM, ECC, 2666MT/s 2x NVMe 960GB (SAMSUNG PM983) When you are starting from scratch, it’s best to get a recent block_log I’m providing one at https://gtg.openhive.network/get/blockchain/ How fast you can get it depends on your network and load on my server. The average downloading speed is around 30MB/s, so you should be able to get it in less than 3 hours. Node type Replay Time AH Node 15 hours 42 minutes Fat Node 48 hours 53 minutes Hivemind 85 hours 50 minutes Roughly you need 4 days and 9 hours to have it synced to the latest head block. A lot can be improved at the backend, and we are working on that. To be developer-friendly, we also need to improve the set of available API calls, finally get rid of the deprecated ones such as get_state, and move away from the all in one wrapper condenser_api. But that’s a different story for a different occasion. See: Hive Pressure 2: How to Answer Hive Questions? by @gtg</summary></entry><entry><title type="html">Interactive Hive API moved to Hivesigner</title><link href="https://hivedocs.info/news/swagger/api/2020/04/29/interactive-hive-api-moved-to-hivesigner.html" rel="alternate" type="text/html" title="Interactive Hive API moved to Hivesigner" /><published>2020-04-29T05:59:54-07:00</published><updated>2020-04-29T05:59:54-07:00</updated><id>https://hivedocs.info/news/swagger/api/2020/04/29/interactive-hive-api-moved-to-hivesigner</id><content type="html" xml:base="https://hivedocs.info/news/swagger/api/2020/04/29/interactive-hive-api-moved-to-hivesigner.html">&lt;p&gt;Thank you everyone for your &lt;a href=&quot;https://esteem.app/hive/@good-karma/hivesigner-ongoing-development-and-improvement&quot;&gt;support on Hivesigner proposal&lt;/a&gt;. We are almost in range of approved proposals. If you haven’t voted, please consider approving proposal to help us make Hivesigner better.&lt;/p&gt;

&lt;center&gt; 
&lt;img src=&quot;https://img.esteem.app/kbgnol.png&quot; /&gt;
 &lt;/center&gt;

&lt;h2 id=&quot;recent-updates&quot;&gt;Recent updates&lt;/h2&gt;

&lt;p&gt;Some updates if you have missed recent developments related to Hivesigner:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://esteem.app/hive-139531/@emrebeyler/powering-up-2&quot;&gt;Hivesigner Python Client&lt;/a&gt; released thanks to @emrebeyler for his awesome job and contribution. Consider voting for his witness!&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/ledgerconnect/hivesigner/wiki&quot;&gt;Hivesigner wiki updated&lt;/a&gt;, we are in process of unifying all documentation via github so that website can mirror and guide developers. Integrating Hivesigner OAuth is quite simple but with proper documentation it can help even new developers to start developing on Blockchain/Hive.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Earlier today, we pushed new release that changes some links and fixes few bugs related to dhive. Chrome/Brave extension update is submitted for review, should be available soon.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Today, in effort to help onboarding more developers and new apps on Hive, we are introducing &lt;a href=&quot;https://hive.hivesigner.com&quot;&gt;Interactive Hive API explorer&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Visit 
&lt;a href=&quot;https://hive.hivesigner.com&quot;&gt;https://hive.hivesigner.com&lt;/a&gt;
 to try out Hive API directly on your browser.&lt;/li&gt;
  &lt;li&gt;It is &lt;a href=&quot;https://github.com/ledgerconnect/hiveapi&quot;&gt;opensource&lt;/a&gt;, if you find bugs or want to contribute, feel free to create pull request or &lt;a href=&quot;https://github.com/ledgerconnect/hiveapi/issues&quot;&gt;report issues on github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It has search field to find relevant APIs quickly, some queries have default values so results can be fetched with single click, I believe it is very convenient for developers to get started. Check it out!&lt;/p&gt;

&lt;p&gt;Simply studying Hive API + Hivesigner API, you can start building decentralized apps in matter of hours.&lt;/p&gt;

&lt;h2 id=&quot;buidl-on&quot;&gt;Buidl on!&lt;/h2&gt;

&lt;h1 id=&quot;support-proposal&quot;&gt;Support proposal&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://hivesigner.com/sign/update-proposal-votes?proposal_ids=%5B88%5D&amp;amp;approve=true&quot;&gt;Vote for Hivesigner Proposal&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;HiveDao: 
&lt;a href=&quot;https://hivedao.com/proposal/88&quot;&gt;https://hivedao.com/proposal/88&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;PeakD: 
&lt;a href=&quot;https://peakd.com/proposals/88&quot;&gt;https://peakd.com/proposals/88&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;HiveBlog Wallet: 
&lt;a href=&quot;https://wallet.hive.blog/proposals&quot;&gt;https://wallet.hive.blog/proposals&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Discord: 
&lt;a href=&quot;https://discord.gg/pNJn7wh&quot;&gt;https://discord.gg/pNJn7wh&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ledgerconnect/hivesigner/issues/2&quot;&gt;Github roadmap thread&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;
  See: &lt;a href=&quot;https://esteem.app/hivesigner/@good-karma/interactive-hive-api-moved-to-hivesigner&quot;&gt;Interactive Hive API moved to Hivesigner&lt;/a&gt;
  by
  &lt;a href=&quot;https://hive.blog/@good-karma&quot;&gt;@good-karma&lt;/a&gt;
&lt;/p&gt;</content><author><name>good-karma</name></author><summary type="html">Thank you everyone for your support on Hivesigner proposal. We are almost in range of approved proposals. If you haven’t voted, please consider approving proposal to help us make Hivesigner better. Recent updates Some updates if you have missed recent developments related to Hivesigner: Hivesigner Python Client released thanks to @emrebeyler for his awesome job and contribution. Consider voting for his witness! Hivesigner wiki updated, we are in process of unifying all documentation via github so that website can mirror and guide developers. Integrating Hivesigner OAuth is quite simple but with proper documentation it can help even new developers to start developing on Blockchain/Hive. Earlier today, we pushed new release that changes some links and fixes few bugs related to dhive. Chrome/Brave extension update is submitted for review, should be available soon. Today, in effort to help onboarding more developers and new apps on Hive, we are introducing Interactive Hive API explorer Visit https://hive.hivesigner.com to try out Hive API directly on your browser. It is opensource, if you find bugs or want to contribute, feel free to create pull request or report issues on github It has search field to find relevant APIs quickly, some queries have default values so results can be fetched with single click, I believe it is very convenient for developers to get started. Check it out! Simply studying Hive API + Hivesigner API, you can start building decentralized apps in matter of hours. Buidl on! Support proposal Vote for Hivesigner Proposal HiveDao: https://hivedao.com/proposal/88 PeakD: https://peakd.com/proposals/88 HiveBlog Wallet: https://wallet.hive.blog/proposals Discord: https://discord.gg/pNJn7wh Github roadmap thread See: Interactive Hive API moved to Hivesigner by @good-karma</summary></entry></feed>