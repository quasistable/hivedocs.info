<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="https://hivedocs.info/feed.xml" rel="self" type="application/atom+xml" /><link href="https://hivedocs.info/" rel="alternate" type="text/html" /><updated>2020-11-13T13:22:07-08:00</updated><id>https://hivedocs.info/feed.xml</id><title type="html">Hive Chain Documentation</title><subtitle>Your resource for various levels of Hive Documentation.</subtitle><author><name>site curated by: @inertia</name></author><entry><title type="html">HiveSQL is free again - Thank you for your support!</title><link href="https://hivedocs.info/news/sql/database/2020/11/12/hivesql-free.html" rel="alternate" type="text/html" title="HiveSQL is free again - Thank you for your support!" /><published>2020-11-12T08:30:00-08:00</published><updated>2020-11-12T08:30:00-08:00</updated><id>https://hivedocs.info/news/sql/database/2020/11/12/hivesql-free</id><content type="html" xml:base="https://hivedocs.info/news/sql/database/2020/11/12/hivesql-free.html">&lt;div id=&quot;content-arcange-hivesql-free&quot;&gt;![](https://i.imgur.com/h4Ez40w.png)

A few days ago, I introduced a [proposal](https://peakd.com/me/proposals/138) to make HiveSQL free to use again. The aim of the proposal is to enable as many developers and users as possible to benefit from this valuable tool and develop applications and services for our ecosystem.

Today, thanks to your amazing support, I'm happy to announce that HiveSQL is free again!

This means that anyone with a registered HiveSQL account will now have access to all the blockchain data and will be able to issue SQL queries for free.

## How to register your HiveSQL account?

For obvious security reasons, before being able to access the HiveSQL database, you will have to create a HiveSQL account. The activation process is very simple:

1. Transfer **0.01 SBD** to @hivesql (no memo required)

2. As soon as @hivesql receives your transfer, your activation will be processed

3. A few seconds later, you will receive a micro-transfer back from @hivesql.

![](https://i.imgur.com/9yQYdUL.png)

The @hivesql transfer memo contains your new credentials and is therefore encrypted.
There are two easy ways to see its content;

1. if you use **peakd.com**, click on the small green lock 
![](https://i.imgur.com/uugVmTH.png)

2. if you have **Keychain** installed, open it and click on the History button&lt;br /&gt;
![](https://i.imgur.com/7OerE4l.png)&lt;br /&gt;
![](https://i.imgur.com/jQtQGgl.png)

The memo contains the following information:

* the  hostname to connect to the HiveSQL server.
* your personal login
* your password

## What's next

Now that the proposal is funded, I will finally be able to tackle the many improvement projects that I wanted to implement. There is a lot of work ahead, among them the HiveSQL.io website update and the creation of decent documentation and tutorials.

I would also like to partially review the design of the database to further improve its performance. I also want to add tables that can be useful and avoid redundant queries.

I also have lots of other ideas, but one thing at a time... let's first consolidate the basics.

## Support

If you have any questions, remarks or suggestions, support for HiveSQL is provided on the [HiveSQL Discord Channel](https://discord.gg/kyEFDfT) only.

**Support the Proposal**

Things keep moving in life, so additional support for the proposal is still welcome.

* [Vote for this proposal on Peakd.com](https://peakd.com/me/proposals/138)
* [Vote for this Proposal on Hive.blog](https://wallet.hive.blog/proposals/138)
* [Vote for this Proposal using HiveSigner](https://hivesigner.com/sign/update_proposal_votes?proposal_ids=%5B%22138%22%5D&amp;amp;approve=true)

Thank you to all who supported the proposal and made HiveSQL free again!

---
&lt;center&gt;

### Check out my apps and services
&lt;a href=&quot;/hive/@hive.engage/stay-connected-with-your-hive-audience-and-catch-attention&quot;&gt;&lt;img src=&quot;https://i.imgur.com/GiNJqlm.png&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;/@hivebuzz&quot;&gt;&lt;img src=&quot;https://i.imgur.com/B4UTun2.png&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;/@hivesql&quot;&gt;&lt;img src=&quot;https://i.imgur.com/EPN8RW6.png&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;/hive/@arcange/introducing-hive-account-recovery&quot;&gt;&lt;img src=&quot;https://i.imgur.com/6TWeW7V.png&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;/@hive.autoclaim&quot;&gt;&lt;img src=&quot;https://i.imgur.com/ih2pEOw.png&quot; /&gt;&lt;/a&gt;&lt;/center&gt;
&lt;center&gt;

### [Vote for me as a witness ![](https://i.imgur.com/2bi4SnT.png)](https://hivesigner.com/sign/account-witness-vote?witness=arcange&amp;amp;approve=1)
&amp;lt;/div&amp;gt;
&lt;script crossorigin=&quot;anonymous&quot; integrity=&quot;sha256-4+XzXVhsDmqanXGHaHvgh1gMQKX40OUvDEBTu8JcmNs=&quot; src=&quot;https://code.jquery.com/jquery-3.5.1.slim.min.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;https://unpkg.com/steem-content-renderer&quot;&gt;&lt;/script&gt;
&lt;script&gt;
  $(document).ready(function() {
    try {
      const renderer = new SteemContentRenderer.DefaultRenderer({
        baseUrl: &quot;https://hive.blog/&quot;,
        breaks: true,
        skipSanitization: false,
        allowInsecureScriptTags: false,
        addNofollowToLinks: true,
        doNotShowImages: false,
        ipfsPrefix: &quot;&quot;,
        assetsWidth: 640,
        assetsHeight: 480,
        imageProxyFn: (url) =&gt; url,
        usertagUrlFn: (account) =&gt; &quot;/@arcange&quot;,
        hashtagUrlFn: (hashtag) =&gt; &quot;/hivesql-free&quot;,
        isLinkSafeFn: (url) =&gt; true,
      });
      
      const inputElem = $('#content-arcange-hivesql-free').html();
      const outputElem = $('#content-arcange-hivesql-free');
      const output = renderer.render(inputElem);
      
      outputElem.html(output);
    } catch(e) {
      console.log(e);
    }
  });
&lt;/script&gt;
&lt;style&gt;
  #content-arcange-hivesql-free {
    padding: 0 3rem;
    color: #444444;
    font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Helvetica, Arial, sans-serif;
    font-size: 16px;
    line-height: 1.8;
    text-shadow: 0 1px 0 #ffffff;
    padding: 0.5rem;
  }
  #content-arcange-hivesql-free code {
    background: white;
  }
  #content-arcange-hivesql-free a {
    border-bottom: 1px solid #444444; color: #444444; text-decoration: none;
  }
  #content-arcange-hivesql-free a:hover {
    border-bottom: 0;
  }
  #content-arcange-hivesql-free h1 {
    font-size: 2.2em;
  }
  #content-arcange-hivesql-free h2, h3, h4, h5 {
    margin-bottom: 0;
  }
  #content-arcange-hivesql-free header small {
    color: #999;
    font-size: 50%;
  }
  #content-arcange-hivesql-free img {
    max-width: 100%;
  }
&lt;/style&gt;

&lt;hr /&gt;
&lt;p&gt;
  See: &lt;a href=&quot;https://peakd.com/hive-139531/@arcange/hivesql-free&quot;&gt;HiveSQL is free again - Thank you for your support!&lt;/a&gt;
  by
  &lt;a href=&quot;https://hive.blog/@arcange&quot;&gt;@arcange&lt;/a&gt;
&lt;/p&gt;

&lt;/center&gt;&lt;/div&gt;</content><author><name>arcange</name></author><summary type="html">![](https://i.imgur.com/h4Ez40w.png) A few days ago, I introduced a [proposal](https://peakd.com/me/proposals/138) to make HiveSQL free to use again. The aim of the proposal is to enable as many developers and users as possible to benefit from this valuable tool and develop applications and services for our ecosystem. Today, thanks to your amazing support, I'm happy to announce that HiveSQL is free again! This means that anyone with a registered HiveSQL account will now have access to all the blockchain data and will be able to issue SQL queries for free. ## How to register your HiveSQL account? For obvious security reasons, before being able to access the HiveSQL database, you will have to create a HiveSQL account. The activation process is very simple: 1. Transfer **0.01 SBD** to @hivesql (no memo required) 2. As soon as @hivesql receives your transfer, your activation will be processed 3. A few seconds later, you will receive a micro-transfer back from @hivesql. ![](https://i.imgur.com/9yQYdUL.png) The @hivesql transfer memo contains your new credentials and is therefore encrypted. There are two easy ways to see its content; 1. if you use **peakd.com**, click on the small green lock ![](https://i.imgur.com/uugVmTH.png) 2. if you have **Keychain** installed, open it and click on the History button ![](https://i.imgur.com/7OerE4l.png) ![](https://i.imgur.com/jQtQGgl.png) The memo contains the following information: * the hostname to connect to the HiveSQL server. * your personal login * your password ## What's next Now that the proposal is funded, I will finally be able to tackle the many improvement projects that I wanted to implement. There is a lot of work ahead, among them the HiveSQL.io website update and the creation of decent documentation and tutorials. I would also like to partially review the design of the database to further improve its performance. I also want to add tables that can be useful and avoid redundant queries. I also have lots of other ideas, but one thing at a time... let's first consolidate the basics. ## Support If you have any questions, remarks or suggestions, support for HiveSQL is provided on the [HiveSQL Discord Channel](https://discord.gg/kyEFDfT) only. **Support the Proposal** Things keep moving in life, so additional support for the proposal is still welcome. * [Vote for this proposal on Peakd.com](https://peakd.com/me/proposals/138) * [Vote for this Proposal on Hive.blog](https://wallet.hive.blog/proposals/138) * [Vote for this Proposal using HiveSigner](https://hivesigner.com/sign/update_proposal_votes?proposal_ids=%5B%22138%22%5D&amp;amp;approve=true) Thank you to all who supported the proposal and made HiveSQL free again! --- ### Check out my apps and services ### [Vote for me as a witness ![](https://i.imgur.com/2bi4SnT.png)](https://hivesigner.com/sign/account-witness-vote?witness=arcange&amp;amp;approve=1) &amp;lt;/div&amp;gt; See: HiveSQL is free again - Thank you for your support! by @arcange</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://i.imgur.com/h4Ez40w.png" /><media:content medium="image" url="https://i.imgur.com/h4Ez40w.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Radiator v0.4.8 - Hive Ruby API Client: Eclipse Update</title><link href="https://hivedocs.info/news/ruby/eclipse/2020/11/09/radiator-v0-4-8-hive-ruby-api-client-eclipse-update.html" rel="alternate" type="text/html" title="Radiator v0.4.8 - Hive Ruby API Client: Eclipse Update" /><published>2020-11-09T11:32:33-08:00</published><updated>2020-11-09T11:32:33-08:00</updated><id>https://hivedocs.info/news/ruby/eclipse/2020/11/09/radiator-v0-4-8-hive-ruby-api-client-eclipse-update</id><content type="html" xml:base="https://hivedocs.info/news/ruby/eclipse/2020/11/09/radiator-v0-4-8-hive-ruby-api-client-eclipse-update.html">&lt;div id=&quot;content-inertia-radiator-v0-4-8-hive-ruby-api-client-eclipse-update&quot;&gt;&lt;div class=&quot;pull-right&quot;&gt;
&lt;img src=&quot;https://i.imgur.com/1r9bHwF.png&quot; /&gt;
&lt;/div&gt;

Repository: https://github.com/inertia186/radiator

In addition to bug fixes and general identifier name changes for Hive assets, this version of Radiator now incorporates `hive-ruby` as the primary basis for interacting with the blockchain.

So why use Radiator at all when you can just use the `hive-ruby` gem directly?  Well, that's because Radiator can do failover as well as access the Hive Engine API.

Not only that, but Radiator can also still work with Steem (and Steem Engine), if you're into that sort of thing.

To update your applications:

```bash
bundle update
```

#### Changes in v0.4.8

* Eclipse Update
* Now wrapping [`hive-ruby`](https://gitlab.syncad.com/hive/hive-ruby) and [`steem-ruby`](https://github.com/steemit/steem-ruby)

#### Changes in v0.4.7

* Added `attr_reader` for `Radiator::Type::Amount` [#28](https://github.com/inertia186/radiator/issues/28)
* Added restful fallback for `get_transaction` during `recover_transactions_on_error`
* Fix beneficiary serialization (thanks @eonwarped)

#### Changes in v0.4.6

* Added health check and persist option

#### Previous Changes
- [Radiator v0.4.5 - Engine Support](https://hive.blog/utopian-io/@inertia/radiator-v0-4-5-steem-ruby-api-client-steem-engine-support)
- [Radiator v0.4.0 - AppBase Update](https://hive.blog/radiator/@inertia/radiator-v0-4-0-steem-ruby-api-client-appbase-update)
- [Radiator v0.3.0 - Now With Failover Support](https://hive.blog/radiator/@inertia/radiator-v0-3-0-steem-ruby-api-client-update-now-with-failover-support)

#### Github
https://github.com/inertia186&lt;/div&gt;
&lt;script crossorigin=&quot;anonymous&quot; integrity=&quot;sha256-4+XzXVhsDmqanXGHaHvgh1gMQKX40OUvDEBTu8JcmNs=&quot; src=&quot;https://code.jquery.com/jquery-3.5.1.slim.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://unpkg.com/steem-content-renderer&quot;&gt;&lt;/script&gt;

&lt;script&gt;
  $(document).ready(function() {
    try {
      const renderer = new SteemContentRenderer.DefaultRenderer({
        baseUrl: &quot;https://hive.blog/&quot;,
        breaks: true,
        skipSanitization: false,
        allowInsecureScriptTags: false,
        addNofollowToLinks: true,
        doNotShowImages: false,
        ipfsPrefix: &quot;&quot;,
        assetsWidth: 640,
        assetsHeight: 480,
        imageProxyFn: (url) =&gt; url,
        usertagUrlFn: (account) =&gt; &quot;/@inertia&quot;,
        hashtagUrlFn: (hashtag) =&gt; &quot;/radiator-v0-4-8-hive-ruby-api-client-eclipse-update&quot;,
        isLinkSafeFn: (url) =&gt; true,
      });
      
      const inputElem = $('#content-inertia-radiator-v0-4-8-hive-ruby-api-client-eclipse-update').html();
      const outputElem = $('#content-inertia-radiator-v0-4-8-hive-ruby-api-client-eclipse-update');
      const output = renderer.render(inputElem);
      
      outputElem.html(output);
    } catch(e) {
      console.log(e);
    }
  });
&lt;/script&gt;

&lt;style&gt;
  #content-inertia-radiator-v0-4-8-hive-ruby-api-client-eclipse-update {
    padding: 0 3rem;
    color: #444444;
    font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Helvetica, Arial, sans-serif;
    font-size: 16px;
    line-height: 1.8;
    text-shadow: 0 1px 0 #ffffff;
    padding: 0.5rem;
  }
  #content-inertia-radiator-v0-4-8-hive-ruby-api-client-eclipse-update code {
    background: white;
  }
  #content-inertia-radiator-v0-4-8-hive-ruby-api-client-eclipse-update a {
    border-bottom: 1px solid #444444; color: #444444; text-decoration: none;
  }
  #content-inertia-radiator-v0-4-8-hive-ruby-api-client-eclipse-update a:hover {
    border-bottom: 0;
  }
  #content-inertia-radiator-v0-4-8-hive-ruby-api-client-eclipse-update h1 {
    font-size: 2.2em;
  }
  #content-inertia-radiator-v0-4-8-hive-ruby-api-client-eclipse-update h2, h3, h4, h5 {
    margin-bottom: 0;
  }
  #content-inertia-radiator-v0-4-8-hive-ruby-api-client-eclipse-update header small {
    color: #999;
    font-size: 50%;
  }
  #content-inertia-radiator-v0-4-8-hive-ruby-api-client-eclipse-update img {
    max-width: 100%;
  }
&lt;/style&gt;

&lt;hr /&gt;

&lt;p&gt;
  See: &lt;a href=&quot;https://hive.blog/hive-139531/@inertia/radiator-v0-4-8-hive-ruby-api-client-eclipse-update&quot;&gt;Radiator v0.4.8 - Hive Ruby API Client: Eclipse Update&lt;/a&gt;
  by
  &lt;a href=&quot;https://hive.blog/@inertia&quot;&gt;@inertia&lt;/a&gt;
&lt;/p&gt;</content><author><name>inertia</name></author><summary type="html">Repository: https://github.com/inertia186/radiator In addition to bug fixes and general identifier name changes for Hive assets, this version of Radiator now incorporates `hive-ruby` as the primary basis for interacting with the blockchain. So why use Radiator at all when you can just use the `hive-ruby` gem directly? Well, that's because Radiator can do failover as well as access the Hive Engine API. Not only that, but Radiator can also still work with Steem (and Steem Engine), if you're into that sort of thing. To update your applications: ```bash bundle update ``` #### Changes in v0.4.8 * Eclipse Update * Now wrapping [`hive-ruby`](https://gitlab.syncad.com/hive/hive-ruby) and [`steem-ruby`](https://github.com/steemit/steem-ruby) #### Changes in v0.4.7 * Added `attr_reader` for `Radiator::Type::Amount` [#28](https://github.com/inertia186/radiator/issues/28) * Added restful fallback for `get_transaction` during `recover_transactions_on_error` * Fix beneficiary serialization (thanks @eonwarped) #### Changes in v0.4.6 * Added health check and persist option #### Previous Changes - [Radiator v0.4.5 - Engine Support](https://hive.blog/utopian-io/@inertia/radiator-v0-4-5-steem-ruby-api-client-steem-engine-support) - [Radiator v0.4.0 - AppBase Update](https://hive.blog/radiator/@inertia/radiator-v0-4-0-steem-ruby-api-client-appbase-update) - [Radiator v0.3.0 - Now With Failover Support](https://hive.blog/radiator/@inertia/radiator-v0-3-0-steem-ruby-api-client-update-now-with-failover-support) #### Github https://github.com/inertia186 See: Radiator v0.4.8 - Hive Ruby API Client: Eclipse Update by @inertia</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://i.imgur.com/1r9bHwF.png" /><media:content medium="image" url="https://i.imgur.com/1r9bHwF.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">My new contributions to the Hive Condenser</title><link href="https://hivedocs.info/news/nodejs/condenser/2020/11/09/29vxd3-my-new-contributions-to-the-hive-condenser.html" rel="alternate" type="text/html" title="My new contributions to the Hive Condenser" /><published>2020-11-09T02:30:06-08:00</published><updated>2020-11-09T02:30:06-08:00</updated><id>https://hivedocs.info/news/nodejs/condenser/2020/11/09/29vxd3-my-new-contributions-to-the-hive-condenser</id><content type="html" xml:base="https://hivedocs.info/news/nodejs/condenser/2020/11/09/29vxd3-my-new-contributions-to-the-hive-condenser.html">&lt;div id=&quot;content-quochuy-29vxd3-my-new-contributions-to-the-hive-condenser&quot;&gt;## Updates to the Badges and Achievements
The recent addition of Peakd and Hivebuzz social and achievement badges stirred some controversy, some people loved it, some hated it and requested for its removal or at least for a way to opt-out.

I initially thought of refactoring the look and feel of the badges bar on the user profile header and add a new user preferences but after discussing with other members of the dev team we agreed on implementing @guiltyparties' suggestion:
 - rename &quot;Communities&quot; tab to &quot;Social&quot; as it was pretty empty.
 - move the badges from the header into the &quot;Social&quot; tab.

Merge request on GitLab:
https://gitlab.syncad.com/hive/condenser/-/merge_requests/148

![Badges and Achievements in the Social tab](https://gitlab.syncad.com/hive/condenser/uploads/ced62e0623456f39a1247e76d79ed0e1/Screen_Shot_2020-11-06_at_11.10.51_pm.png)

## Bandcamp and Archive.org embedded players
I think I forgot to mention in previous update that there is a pending merge request for embedded players for Bandcamp and Archive.org.

Bandcamp embedded player:
![Bandcamp embedded player](https://gitlab.syncad.com/hive/condenser/uploads/1e835b654231f31706e89a638e703442/Screen_Shot_2020-10-28_at_9.38.59_pm.png)

Archive.org embedded player:
![Archive.org embedded player](https://gitlab.syncad.com/hive/condenser/uploads/3c2b233d98a50c52b6be6877d8413a08/Screen_Shot_2020-10-28_at_9.40.03_pm.png)

Merge request on GitLab: https://gitlab.syncad.com/hive/condenser/-/merge_requests/137

## Notes
- Both features are still pending review, tests and deployment from the dev team.
- As for now, it is decided to slow down on addition of new embedded players since we have covered main ones already and would like to focus on other more important features and bug fixes.

---

**Vote for my witness**
[![Support @quochuy Witness.jpg](https://images.hive.blog/DQmecYTZemY8SwU6rrg7awhpNRBsehUp7ivk9RGyZsUUpVw/quochuy-hive-witness.jpg)](https://hivesigner.com/sign/account-witness-vote?witness=quochuy&amp;amp;approve=1)
On Hive, Witnesses are playing the important role of providing a performant and safe network for all of us. You have the power to choose 30 trusty witnesses to package transactions and sign the blocks that will go in the Hive blockchain. [Vote for me via HiveSigner](https://hivesigner.com/sign/account-witness-vote?witness=quochuy&amp;amp;approve=1) to support my work for the community.&lt;/div&gt;
&lt;script crossorigin=&quot;anonymous&quot; integrity=&quot;sha256-4+XzXVhsDmqanXGHaHvgh1gMQKX40OUvDEBTu8JcmNs=&quot; src=&quot;https://code.jquery.com/jquery-3.5.1.slim.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://unpkg.com/steem-content-renderer&quot;&gt;&lt;/script&gt;

&lt;script&gt;
  $(document).ready(function() {
    try {
      const renderer = new SteemContentRenderer.DefaultRenderer({
        baseUrl: &quot;https://hive.blog/&quot;,
        breaks: true,
        skipSanitization: false,
        allowInsecureScriptTags: false,
        addNofollowToLinks: true,
        doNotShowImages: false,
        ipfsPrefix: &quot;&quot;,
        assetsWidth: 640,
        assetsHeight: 480,
        imageProxyFn: (url) =&gt; url,
        usertagUrlFn: (account) =&gt; &quot;/@quochuy&quot;,
        hashtagUrlFn: (hashtag) =&gt; &quot;/29vxd3-my-new-contributions-to-the-hive-condenser&quot;,
        isLinkSafeFn: (url) =&gt; true,
      });
      
      const inputElem = $('#content-quochuy-29vxd3-my-new-contributions-to-the-hive-condenser').html();
      const outputElem = $('#content-quochuy-29vxd3-my-new-contributions-to-the-hive-condenser');
      const output = renderer.render(inputElem);
      
      outputElem.html(output);
    } catch(e) {
      console.log(e);
    }
  });
&lt;/script&gt;

&lt;style&gt;
  #content-quochuy-29vxd3-my-new-contributions-to-the-hive-condenser {
    padding: 0 3rem;
    color: #444444;
    font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Helvetica, Arial, sans-serif;
    font-size: 16px;
    line-height: 1.8;
    text-shadow: 0 1px 0 #ffffff;
    padding: 0.5rem;
  }
  #content-quochuy-29vxd3-my-new-contributions-to-the-hive-condenser code {
    background: white;
  }
  #content-quochuy-29vxd3-my-new-contributions-to-the-hive-condenser a {
    border-bottom: 1px solid #444444; color: #444444; text-decoration: none;
  }
  #content-quochuy-29vxd3-my-new-contributions-to-the-hive-condenser a:hover {
    border-bottom: 0;
  }
  #content-quochuy-29vxd3-my-new-contributions-to-the-hive-condenser h1 {
    font-size: 2.2em;
  }
  #content-quochuy-29vxd3-my-new-contributions-to-the-hive-condenser h2, h3, h4, h5 {
    margin-bottom: 0;
  }
  #content-quochuy-29vxd3-my-new-contributions-to-the-hive-condenser header small {
    color: #999;
    font-size: 50%;
  }
  #content-quochuy-29vxd3-my-new-contributions-to-the-hive-condenser img {
    max-width: 100%;
  }
&lt;/style&gt;

&lt;hr /&gt;

&lt;p&gt;
  See: &lt;a href=&quot;https://hive.blog/hive-139531/@quochuy/29vxd3-my-new-contributions-to-the-hive-condenser&quot;&gt;My new contributions to the Hive Condenser&lt;/a&gt;
  by
  &lt;a href=&quot;https://hive.blog/@quochuy&quot;&gt;@quochuy&lt;/a&gt;
&lt;/p&gt;</content><author><name>quochuy</name></author><summary type="html">## Updates to the Badges and Achievements The recent addition of Peakd and Hivebuzz social and achievement badges stirred some controversy, some people loved it, some hated it and requested for its removal or at least for a way to opt-out. I initially thought of refactoring the look and feel of the badges bar on the user profile header and add a new user preferences but after discussing with other members of the dev team we agreed on implementing @guiltyparties' suggestion: - rename &quot;Communities&quot; tab to &quot;Social&quot; as it was pretty empty. - move the badges from the header into the &quot;Social&quot; tab. Merge request on GitLab: https://gitlab.syncad.com/hive/condenser/-/merge_requests/148 ![Badges and Achievements in the Social tab](https://gitlab.syncad.com/hive/condenser/uploads/ced62e0623456f39a1247e76d79ed0e1/Screen_Shot_2020-11-06_at_11.10.51_pm.png) ## Bandcamp and Archive.org embedded players I think I forgot to mention in previous update that there is a pending merge request for embedded players for Bandcamp and Archive.org. Bandcamp embedded player: ![Bandcamp embedded player](https://gitlab.syncad.com/hive/condenser/uploads/1e835b654231f31706e89a638e703442/Screen_Shot_2020-10-28_at_9.38.59_pm.png) Archive.org embedded player: ![Archive.org embedded player](https://gitlab.syncad.com/hive/condenser/uploads/3c2b233d98a50c52b6be6877d8413a08/Screen_Shot_2020-10-28_at_9.40.03_pm.png) Merge request on GitLab: https://gitlab.syncad.com/hive/condenser/-/merge_requests/137 ## Notes - Both features are still pending review, tests and deployment from the dev team. - As for now, it is decided to slow down on addition of new embedded players since we have covered main ones already and would like to focus on other more important features and bug fixes. --- **Vote for my witness** [![Support @quochuy Witness.jpg](https://images.hive.blog/DQmecYTZemY8SwU6rrg7awhpNRBsehUp7ivk9RGyZsUUpVw/quochuy-hive-witness.jpg)](https://hivesigner.com/sign/account-witness-vote?witness=quochuy&amp;amp;approve=1) On Hive, Witnesses are playing the important role of providing a performant and safe network for all of us. You have the power to choose 30 trusty witnesses to package transactions and sign the blocks that will go in the Hive blockchain. [Vote for me via HiveSigner](https://hivesigner.com/sign/account-witness-vote?witness=quochuy&amp;amp;approve=1) to support my work for the community. See: My new contributions to the Hive Condenser by @quochuy</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://gitlab.syncad.com/hive/condenser/uploads/ced62e0623456f39a1247e76d79ed0e1/Screen_Shot_2020-11-06_at_11.10.51_pm.png" /><media:content medium="image" url="https://gitlab.syncad.com/hive/condenser/uploads/ced62e0623456f39a1247e76d79ed0e1/Screen_Shot_2020-11-06_at_11.10.51_pm.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Hive Keychain Development Proposal #2</title><link href="https://hivedocs.info/news/nodejs/hive-keychain/2020/11/08/hive-keychain-development-proposal-2.html" rel="alternate" type="text/html" title="Hive Keychain Development Proposal #2" /><published>2020-11-08T23:10:54-08:00</published><updated>2020-11-08T23:10:54-08:00</updated><id>https://hivedocs.info/news/nodejs/hive-keychain/2020/11/08/hive-keychain-development-proposal-2</id><content type="html" xml:base="https://hivedocs.info/news/nodejs/hive-keychain/2020/11/08/hive-keychain-development-proposal-2.html">&lt;div id=&quot;content-keychain-hive-keychain-development-proposal-2&quot;&gt;![](https://files.peakd.com/file/peakd-hive/keychain/xnmVXGi6-social_keychain-for-hive.jpg)

A lot has happened on Hive these past 6 months and I you followed the @keychain account weekly posts, you know that we've never stop building features, on our extension (now available for Chrome, Firefox, Opera and Brave) and on our mobile App (built for Android and iOS).

The current proposal is coming to an end soon but there's still so much we want to do to help the Hive ecosystem thrive, hence this new proposal.

## Hive Keychain DHF 2

This new proposal will start on November 15th, date at which the current one will expire, there will be no overlap between the two proposals.

Just as the past proposal, this one will mainly focus on two different axis : 
- Maintain and improve the existing browser extension
- Continue developing the Keychain mobile App

The upcoming work regarding these two projects will be discussed on the paragraphs below.

### Hive Keychain Extension

A lot has been done on the extension side. You can check our weekly updates to see the complete list of updates but here are some noticeable changes:
- Improved onboarding through a new `requestAddAccount` that let Keychain import keys from an external request
- Buy HIVE/HBD options
- Update to Keychainify to let dApp owners integrate more Keychain features via a Hivesigner link
- Improved documentation and automating it using `documentation.js`
- Improved nodes management, failover, and keeping the RPC nodes list up to date
- HBD conversion (with automatic id)
- New requests usable by dApps such as `requestSendToken` and changes with existing ones (`requestEncodeMemo` now works with posting and active keys)
- Protection against phishing/blacklisted accounts during transfers, and against sending transfers to exchanges without memos
- Updated our APIs to v2 with some new features (i.e. more detailed token price info)
- Automatic rewards claiming
- Automatic free account claiming 
- Updated the code to work through and after the Eclipse HF
- Export accounts to mobile via QR Code
- Several UI adjustments
- Code refactoring
- Brave browser support 
- Users and dApp developers support

Towards the end of the current proposal, and on the upcoming one, we are switching to spend more time on the mobile side since the extension is now pretty mature. That being said, there are still some features we want to work on such as : 

- Go further with onboarding by letting users create accounts directly from Keychain using one of the onboarding services
- No-key extension. We want to make it possible to use the extension without any key if you are on an unsafe computer. This will be implemented when the mobile App is mature enough and will allow to link the extension to the mobile phone via QR code and send the requests to that phone, on which they can be confirmed
- Include settings to the export files, to really make it seamless to import keychain to a new device using a .kc file
- Ledger integration as soon as the Hive application is approved by Ledger
- HE tokens operations integration (only transfers are supported so far)
- Information about proposals
- Reorganization of the settings
- Preparation of new features integration ahead of time when introduced via a HF
- Maintaining extension across all supported browsers through future HFs
- Users / Devs support



### Hive Keychain Mobile

There is a ton of features we want to provide to make Keychain a great mobile App that would help the whole Hive mobile ecosystem thrive. As such, our focus shifted more and more to work on this project.

The first part of this mobile App is the wallet and its currently undergoing tests before an Alpha release this month. Here is what we've done so far: 

- Secure key storage via biometrics using `react-native-keychain` package 
- Accounts import via private key or master key (not saved)
- Accounts import via QR code (from extension)
- Account balances
- Account value
- Voting Power and RC indicators
- Transaction history
- Wallet operations : Transfers, Power Up, Power Down, Delegations
- Incoming and outgoing delegations information
- Hive Engine balances, value and transactions history
- Hive balance operations : Transfers only (so far) 
- Key and accounts management

Here are some screenshots that I hope will make you excited about what's to come : 

https://images.hive.blog/1000x500/https://files.peakd.com/file/peakd-hive/keychain/ITL1Y13A-Screenshot_20201109-143355_mobileKeychain.jpg https://images.hive.blog/1000x500/https://files.peakd.com/file/peakd-hive/keychain/RIibY7sf-Screenshot_20201109-143407_mobileKeychain.jpg https://images.hive.blog/1000x500/https://files.peakd.com/file/peakd-hive/keychain/QMSQLd5K-124146064_785358812010920_2770059880192079036_n.jpg  https://images.hive.blog/1000x500/https://files.peakd.com/file/peakd-hive/keychain/2gFrZmeX-Screenshot_20201109-132058_mobileKeychain.jpg https://images.hive.blog/1000x500/https://files.peakd.com/file/peakd-hive/keychain/SGWrqqX3-Screenshot_20201109-132112_mobileKeychain.jpg https://images.hive.blog/1000x500/https://files.peakd.com/file/peakd-hive/keychain/stWBNmOX-Screenshot_20201109-143223_mobileKeychain.jpg https://images.hive.blog/1000x500/https://files.peakd.com/file/peakd-hive/keychain/eqdrmwdU-Screenshot_20201109-143305_mobileKeychain.jpg https://images.hive.blog/1000x500/https://files.peakd.com/file/peakd-hive/keychain/Bvx0AEdN-Screenshot_20201109-143008_mobileKeychain.jpg https://images.hive.blog/1000x500/https://files.peakd.com/file/peakd-hive/keychain/6yDEcikm-Screenshot_20201109-143315_mobileKeychain.jpg 


What we plan to do during the future 6 months : 
- Iterate on the wallet part according to the issues received by the Alpha users. We are expecting the main challenge will be coming from the biometrics authentication, as it is a device-dependent and OS-dependent matter. User reports will help us make sure it's working correctly independently on the devices.
- Add features to the wallet  (i.e. HBD conversion, Buying HIVE/HBD, witness votes, proposals)
- In-App browser bridging your favorite dApps with your keys securely stored in mobile Keychain. All the Keychain requests currently working on dApps using the extension will be implemented.
- Launch the Open Beta
- Start working on App to App communication, allowing other mobile Apps to request transactions directly to Keychain without ever seeing the keys.


### Budget

As for the previous proposal, we will keep working on a daily budget of 200 HBD for a period of 6 months.

### Commitments

- We commit to keep all the code produced through this funding opensource. You can find [Hive Keychain](https://github.com/stoodkev/hive-keychain) and [Keychain mobile](https://github.com/stoodkev/hive-keychain-mobile) on their respective Github repositories.
- We commit to post weekly on the progress made during the previous week. We have held this promise all along the first DHF and we hope you enjoyed following our development updates.


## Team

@stoodkev : Lead Developer - Witness
@nateaguila : UI/UX
@yabapmatt : Founder - Witness
@aggroed : Founder - Witness

---

### Support Hive Keychain development by voting for this proposal on [PeakD](https://peakd.com/me/proposals/140),  or with [HiveSigner](https://hivesigner.com/sign/update-proposal-votes?proposal_ids=%5B140%5D&amp;amp;approve=true).
*100% of payout is redirected to the DHF*&lt;/div&gt;
&lt;script crossorigin=&quot;anonymous&quot; integrity=&quot;sha256-4+XzXVhsDmqanXGHaHvgh1gMQKX40OUvDEBTu8JcmNs=&quot; src=&quot;https://code.jquery.com/jquery-3.5.1.slim.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://unpkg.com/steem-content-renderer&quot;&gt;&lt;/script&gt;

&lt;script&gt;
  $(document).ready(function() {
    try {
      const renderer = new SteemContentRenderer.DefaultRenderer({
        baseUrl: &quot;https://hive.blog/&quot;,
        breaks: true,
        skipSanitization: false,
        allowInsecureScriptTags: false,
        addNofollowToLinks: true,
        doNotShowImages: false,
        ipfsPrefix: &quot;&quot;,
        assetsWidth: 640,
        assetsHeight: 480,
        imageProxyFn: (url) =&gt; url,
        usertagUrlFn: (account) =&gt; &quot;/@keychain&quot;,
        hashtagUrlFn: (hashtag) =&gt; &quot;/hive-keychain-development-proposal-2&quot;,
        isLinkSafeFn: (url) =&gt; true,
      });
      
      const inputElem = $('#content-keychain-hive-keychain-development-proposal-2').html();
      const outputElem = $('#content-keychain-hive-keychain-development-proposal-2');
      const output = renderer.render(inputElem);
      
      outputElem.html(output);
    } catch(e) {
      console.log(e);
    }
  });
&lt;/script&gt;

&lt;style&gt;
  #content-keychain-hive-keychain-development-proposal-2 {
    padding: 0 3rem;
    color: #444444;
    font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Helvetica, Arial, sans-serif;
    font-size: 16px;
    line-height: 1.8;
    text-shadow: 0 1px 0 #ffffff;
    padding: 0.5rem;
  }
  #content-keychain-hive-keychain-development-proposal-2 code {
    background: white;
  }
  #content-keychain-hive-keychain-development-proposal-2 a {
    border-bottom: 1px solid #444444; color: #444444; text-decoration: none;
  }
  #content-keychain-hive-keychain-development-proposal-2 a:hover {
    border-bottom: 0;
  }
  #content-keychain-hive-keychain-development-proposal-2 h1 {
    font-size: 2.2em;
  }
  #content-keychain-hive-keychain-development-proposal-2 h2, h3, h4, h5 {
    margin-bottom: 0;
  }
  #content-keychain-hive-keychain-development-proposal-2 header small {
    color: #999;
    font-size: 50%;
  }
  #content-keychain-hive-keychain-development-proposal-2 img {
    max-width: 100%;
  }
&lt;/style&gt;

&lt;hr /&gt;

&lt;p&gt;
  See: &lt;a href=&quot;https://peakd.com/hive/@keychain/hive-keychain-development-proposal-2&quot;&gt;Hive Keychain Development Proposal #2&lt;/a&gt;
  by
  &lt;a href=&quot;https://hive.blog/@keychain&quot;&gt;@keychain&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/nodejs&quot;&gt;More About Node.js&lt;/a&gt;&lt;/p&gt;</content><author><name>keychain</name></author><summary type="html">![](https://files.peakd.com/file/peakd-hive/keychain/xnmVXGi6-social_keychain-for-hive.jpg) A lot has happened on Hive these past 6 months and I you followed the @keychain account weekly posts, you know that we've never stop building features, on our extension (now available for Chrome, Firefox, Opera and Brave) and on our mobile App (built for Android and iOS). The current proposal is coming to an end soon but there's still so much we want to do to help the Hive ecosystem thrive, hence this new proposal. ## Hive Keychain DHF 2 This new proposal will start on November 15th, date at which the current one will expire, there will be no overlap between the two proposals. Just as the past proposal, this one will mainly focus on two different axis : - Maintain and improve the existing browser extension - Continue developing the Keychain mobile App The upcoming work regarding these two projects will be discussed on the paragraphs below. ### Hive Keychain Extension A lot has been done on the extension side. You can check our weekly updates to see the complete list of updates but here are some noticeable changes: - Improved onboarding through a new `requestAddAccount` that let Keychain import keys from an external request - Buy HIVE/HBD options - Update to Keychainify to let dApp owners integrate more Keychain features via a Hivesigner link - Improved documentation and automating it using `documentation.js` - Improved nodes management, failover, and keeping the RPC nodes list up to date - HBD conversion (with automatic id) - New requests usable by dApps such as `requestSendToken` and changes with existing ones (`requestEncodeMemo` now works with posting and active keys) - Protection against phishing/blacklisted accounts during transfers, and against sending transfers to exchanges without memos - Updated our APIs to v2 with some new features (i.e. more detailed token price info) - Automatic rewards claiming - Automatic free account claiming - Updated the code to work through and after the Eclipse HF - Export accounts to mobile via QR Code - Several UI adjustments - Code refactoring - Brave browser support - Users and dApp developers support Towards the end of the current proposal, and on the upcoming one, we are switching to spend more time on the mobile side since the extension is now pretty mature. That being said, there are still some features we want to work on such as : - Go further with onboarding by letting users create accounts directly from Keychain using one of the onboarding services - No-key extension. We want to make it possible to use the extension without any key if you are on an unsafe computer. This will be implemented when the mobile App is mature enough and will allow to link the extension to the mobile phone via QR code and send the requests to that phone, on which they can be confirmed - Include settings to the export files, to really make it seamless to import keychain to a new device using a .kc file - Ledger integration as soon as the Hive application is approved by Ledger - HE tokens operations integration (only transfers are supported so far) - Information about proposals - Reorganization of the settings - Preparation of new features integration ahead of time when introduced via a HF - Maintaining extension across all supported browsers through future HFs - Users / Devs support ### Hive Keychain Mobile There is a ton of features we want to provide to make Keychain a great mobile App that would help the whole Hive mobile ecosystem thrive. As such, our focus shifted more and more to work on this project. The first part of this mobile App is the wallet and its currently undergoing tests before an Alpha release this month. Here is what we've done so far: - Secure key storage via biometrics using `react-native-keychain` package - Accounts import via private key or master key (not saved) - Accounts import via QR code (from extension) - Account balances - Account value - Voting Power and RC indicators - Transaction history - Wallet operations : Transfers, Power Up, Power Down, Delegations - Incoming and outgoing delegations information - Hive Engine balances, value and transactions history - Hive balance operations : Transfers only (so far) - Key and accounts management Here are some screenshots that I hope will make you excited about what's to come : https://images.hive.blog/1000x500/https://files.peakd.com/file/peakd-hive/keychain/ITL1Y13A-Screenshot_20201109-143355_mobileKeychain.jpg https://images.hive.blog/1000x500/https://files.peakd.com/file/peakd-hive/keychain/RIibY7sf-Screenshot_20201109-143407_mobileKeychain.jpg https://images.hive.blog/1000x500/https://files.peakd.com/file/peakd-hive/keychain/QMSQLd5K-124146064_785358812010920_2770059880192079036_n.jpg https://images.hive.blog/1000x500/https://files.peakd.com/file/peakd-hive/keychain/2gFrZmeX-Screenshot_20201109-132058_mobileKeychain.jpg https://images.hive.blog/1000x500/https://files.peakd.com/file/peakd-hive/keychain/SGWrqqX3-Screenshot_20201109-132112_mobileKeychain.jpg https://images.hive.blog/1000x500/https://files.peakd.com/file/peakd-hive/keychain/stWBNmOX-Screenshot_20201109-143223_mobileKeychain.jpg https://images.hive.blog/1000x500/https://files.peakd.com/file/peakd-hive/keychain/eqdrmwdU-Screenshot_20201109-143305_mobileKeychain.jpg https://images.hive.blog/1000x500/https://files.peakd.com/file/peakd-hive/keychain/Bvx0AEdN-Screenshot_20201109-143008_mobileKeychain.jpg https://images.hive.blog/1000x500/https://files.peakd.com/file/peakd-hive/keychain/6yDEcikm-Screenshot_20201109-143315_mobileKeychain.jpg What we plan to do during the future 6 months : - Iterate on the wallet part according to the issues received by the Alpha users. We are expecting the main challenge will be coming from the biometrics authentication, as it is a device-dependent and OS-dependent matter. User reports will help us make sure it's working correctly independently on the devices. - Add features to the wallet (i.e. HBD conversion, Buying HIVE/HBD, witness votes, proposals) - In-App browser bridging your favorite dApps with your keys securely stored in mobile Keychain. All the Keychain requests currently working on dApps using the extension will be implemented. - Launch the Open Beta - Start working on App to App communication, allowing other mobile Apps to request transactions directly to Keychain without ever seeing the keys. ### Budget As for the previous proposal, we will keep working on a daily budget of 200 HBD for a period of 6 months. ### Commitments - We commit to keep all the code produced through this funding opensource. You can find [Hive Keychain](https://github.com/stoodkev/hive-keychain) and [Keychain mobile](https://github.com/stoodkev/hive-keychain-mobile) on their respective Github repositories. - We commit to post weekly on the progress made during the previous week. We have held this promise all along the first DHF and we hope you enjoyed following our development updates. ## Team @stoodkev : Lead Developer - Witness @nateaguila : UI/UX @yabapmatt : Founder - Witness @aggroed : Founder - Witness --- ### Support Hive Keychain development by voting for this proposal on [PeakD](https://peakd.com/me/proposals/140), or with [HiveSigner](https://hivesigner.com/sign/update-proposal-votes?proposal_ids=%5B140%5D&amp;amp;approve=true). *100% of payout is redirected to the DHF* See: Hive Keychain Development Proposal #2 by @keychain</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://files.peakd.com/file/peakd-hive/keychain/xnmVXGi6-social_keychain-for-hive.jpg" /><media:content medium="image" url="https://files.peakd.com/file/peakd-hive/keychain/xnmVXGi6-social_keychain-for-hive.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Update for beem: improved account history handling</title><link href="https://hivedocs.info/news/python/account-history/2020/11/06/update-for-beem-improved-account-history-handling.html" rel="alternate" type="text/html" title="Update for beem: improved account history handling" /><published>2020-11-06T15:29:39-08:00</published><updated>2020-11-06T15:29:39-08:00</updated><id>https://hivedocs.info/news/python/account-history/2020/11/06/update-for-beem-improved-account-history-handling</id><content type="html" xml:base="https://hivedocs.info/news/python/account-history/2020/11/06/update-for-beem-improved-account-history-handling.html">&lt;div id=&quot;content-holger80-update-for-beem-improved-account-history-handling&quot;&gt;


## Repository

https://github.com/holgern/beem&lt;center&gt;
![beem-logo](https://cdn.steemitimages.com/DQmcRrwLPSywSYMierfP6um6mejeMNGjN9Rxw7audJqTDgb/beem-logo)
&lt;/center&gt;

[beem](https://github.com/holgern/beem) is a python library and command line tool for HIVE.  The current version is 0.24.18.

There is also a discord channel for beem: https://discord.gg/4HM592V

The newest beem version can be installed by:

```
pip install -U beem
```

Check that you are using hive nodes. The following command 

```
beempy updatenodes --hive
```

updates the nodelist and uses only hive nodes. After setting hive as default_chain, `beempy updatenodes` can be used.

The list of nodes can be checked with

```
beempy config
```

and

```
beempy currentnode
```

shows the currently connected node.

## Changelog for 0.24.18
* Adapt account history on api changes and fixes issue #267
* Speed up history call, when limit is below 1000
* Improve unit tests for account history
* Fix estimate_virtual_op_num, when get_account_history returns an empty entry for an index
* Implement _get_operation_filter and use filter operations in history and history_reverse on the https://api.hive.blog api node

## Changelog for 0.24.17
* Fixed a bug when using skip_account_check=True
* Refactor code in Account
* Add more unit tests

## Changelog for 0.24.16
* Fix bug in bytes representation of an Amount which prevents sending certain amounts (e.g. 8.19 HIVE)
* Added unit tests to check if 8.190 is correctly working

## Fixing rounding errors in transfers
In version 0.24.16, a rounding bug was fixed which prevents sending 8.19 HIVE. This bug leads to a wrong signature, which then prevents broadcasting the transfer op. This is now fixed.

## Improved error handling in account history
The account history and history_reverse functions have now a better error handling.
The returned index is now checked, which prevents that account history elements were added twice to the output.

## New filtered account history
Currently the new filter parameter are only implemented at &quot;https://api.hive.blog&quot; API node.

On this node, the get_account_history call has two more parameters: operation_filter_low and operation_filter_high.
These parameters are a bitmask of all possible operation names.
They can be obtained with the `_get_operation_filter` function:
```
operation_filter_low, operation_filter_high = account._get_operation_filter(only_ops=[&quot;transfer&quot;, &quot;vote&quot;])
```
which results in operation_filter_low=5 and operation_filter_high=0.

The `history` and `history_reverse` function from beem will now use the operation_filter when 
&quot;https://api.hive.blog&quot; is set as node. This speeds up receiving account history data up to 100 %.


### History reverse with operation_filter
```
from beem.account import Account
from beem import Hive
import time
hive = Hive(&quot;https://api.hive.blog&quot;)
acc = Account(&quot;holger80&quot;, blockchain_instance=hive)
start_time = time.time()
n_op = acc.virtual_op_count()
transfer_ops = list(acc.history_reverse(only_ops=[&quot;transfer&quot;]))
print(&quot;Time needed to search all transfers in %d history elements: %.2f s&quot; % (n_op, (time.time() - start_time)))
print(&quot;%d transfer op have been found&quot; % (len(transfer_ops)))
```

returns
```
Time needed to search all transfers in 283514 history elements: 145.66 s
4666 transfer op have been found
```

### History with operation_filter
```
from beem.account import Account
from beem import Hive
import time
hive = Hive(&quot;https://api.hive.blog&quot;)
acc = Account(&quot;holger80&quot;, blockchain_instance=hive)
start_time = time.time()
n_op = acc.virtual_op_count()
transfer_ops = list(acc.history(only_ops=[&quot;transfer&quot;]))
print(&quot;Time needed to search all transfers in %d history elements: %.2f s&quot; % (n_op, (time.time() - start_time)))
print(&quot;%d transfer op have been found&quot; % (len(transfer_ops)))
```
returns
```
Time needed to search all transfers in 283517 history elements: 144.55 s
4666 transfer op have been found
```

### History without operation filter
Now we do the same without filtering:
```
from beem.account import Account
from beem import Hive
import time
hive = Hive(&quot;https://api.hive.blog&quot;)
acc = Account(&quot;holger80&quot;, blockchain_instance=hive)
start_time = time.time()
n_op = acc.virtual_op_count()
transfer_ops = []
for op in acc.history():
    if op[&quot;type&quot;] == &quot;transfer&quot;:
        transfer_ops.append(op)
print(&quot;Time needed to search all transfers in %d history elements: %.2f s&quot; % (n_op, (time.time() - start_time)))
print(&quot;%d transfer op have been found&quot; % (len(transfer_ops)))
```
returns
```
Time needed to search all transfers in 283518 history elements: 261.63 s
4666 transfer op have been found
```


___

*If you like what I do, consider casting a vote for me as witness on [Hivesigner](https://hivesigner.com/sign/account-witness-vote?witness=holger80&amp;amp;approve=1) or on [PeakD](https://peakd.com/witnesses)*&lt;/div&gt;
&lt;script crossorigin=&quot;anonymous&quot; integrity=&quot;sha256-4+XzXVhsDmqanXGHaHvgh1gMQKX40OUvDEBTu8JcmNs=&quot; src=&quot;https://code.jquery.com/jquery-3.5.1.slim.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://unpkg.com/steem-content-renderer&quot;&gt;&lt;/script&gt;

&lt;script&gt;
  $(document).ready(function() {
    try {
      const renderer = new SteemContentRenderer.DefaultRenderer({
        baseUrl: &quot;https://hive.blog/&quot;,
        breaks: true,
        skipSanitization: false,
        allowInsecureScriptTags: false,
        addNofollowToLinks: true,
        doNotShowImages: false,
        ipfsPrefix: &quot;&quot;,
        assetsWidth: 640,
        assetsHeight: 480,
        imageProxyFn: (url) =&gt; url,
        usertagUrlFn: (account) =&gt; &quot;/@holger80&quot;,
        hashtagUrlFn: (hashtag) =&gt; &quot;/update-for-beem-improved-account-history-handling&quot;,
        isLinkSafeFn: (url) =&gt; true,
      });
      
      const inputElem = $('#content-holger80-update-for-beem-improved-account-history-handling').html();
      const outputElem = $('#content-holger80-update-for-beem-improved-account-history-handling');
      const output = renderer.render(inputElem);
      
      outputElem.html(output);
    } catch(e) {
      console.log(e);
    }
  });
&lt;/script&gt;

&lt;style&gt;
  #content-holger80-update-for-beem-improved-account-history-handling {
    padding: 0 3rem;
    color: #444444;
    font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Helvetica, Arial, sans-serif;
    font-size: 16px;
    line-height: 1.8;
    text-shadow: 0 1px 0 #ffffff;
    padding: 0.5rem;
  }
  #content-holger80-update-for-beem-improved-account-history-handling code {
    background: white;
  }
  #content-holger80-update-for-beem-improved-account-history-handling a {
    border-bottom: 1px solid #444444; color: #444444; text-decoration: none;
  }
  #content-holger80-update-for-beem-improved-account-history-handling a:hover {
    border-bottom: 0;
  }
  #content-holger80-update-for-beem-improved-account-history-handling h1 {
    font-size: 2.2em;
  }
  #content-holger80-update-for-beem-improved-account-history-handling h2, h3, h4, h5 {
    margin-bottom: 0;
  }
  #content-holger80-update-for-beem-improved-account-history-handling header small {
    color: #999;
    font-size: 50%;
  }
  #content-holger80-update-for-beem-improved-account-history-handling img {
    max-width: 100%;
  }
&lt;/style&gt;

&lt;hr /&gt;

&lt;p&gt;
  See: &lt;a href=&quot;https://hive.blog/hive-139531/@holger80/update-for-beem-improved-account-history-handling&quot;&gt;Update for beem: improved account history handling&lt;/a&gt;
  by
  &lt;a href=&quot;https://hive.blog/@holger80&quot;&gt;@holger80&lt;/a&gt;
&lt;/p&gt;</content><author><name>holger80</name></author><summary type="html">## Repository https://github.com/holgern/beem ![beem-logo](https://cdn.steemitimages.com/DQmcRrwLPSywSYMierfP6um6mejeMNGjN9Rxw7audJqTDgb/beem-logo) [beem](https://github.com/holgern/beem) is a python library and command line tool for HIVE. The current version is 0.24.18. There is also a discord channel for beem: https://discord.gg/4HM592V The newest beem version can be installed by: ``` pip install -U beem ``` Check that you are using hive nodes. The following command ``` beempy updatenodes --hive ``` updates the nodelist and uses only hive nodes. After setting hive as default_chain, `beempy updatenodes` can be used. The list of nodes can be checked with ``` beempy config ``` and ``` beempy currentnode ``` shows the currently connected node. ## Changelog for 0.24.18 * Adapt account history on api changes and fixes issue #267 * Speed up history call, when limit is below 1000 * Improve unit tests for account history * Fix estimate_virtual_op_num, when get_account_history returns an empty entry for an index * Implement _get_operation_filter and use filter operations in history and history_reverse on the https://api.hive.blog api node ## Changelog for 0.24.17 * Fixed a bug when using skip_account_check=True * Refactor code in Account * Add more unit tests ## Changelog for 0.24.16 * Fix bug in bytes representation of an Amount which prevents sending certain amounts (e.g. 8.19 HIVE) * Added unit tests to check if 8.190 is correctly working ## Fixing rounding errors in transfers In version 0.24.16, a rounding bug was fixed which prevents sending 8.19 HIVE. This bug leads to a wrong signature, which then prevents broadcasting the transfer op. This is now fixed. ## Improved error handling in account history The account history and history_reverse functions have now a better error handling. The returned index is now checked, which prevents that account history elements were added twice to the output. ## New filtered account history Currently the new filter parameter are only implemented at &quot;https://api.hive.blog&quot; API node. On this node, the get_account_history call has two more parameters: operation_filter_low and operation_filter_high. These parameters are a bitmask of all possible operation names. They can be obtained with the `_get_operation_filter` function: ``` operation_filter_low, operation_filter_high = account._get_operation_filter(only_ops=[&quot;transfer&quot;, &quot;vote&quot;]) ``` which results in operation_filter_low=5 and operation_filter_high=0. The `history` and `history_reverse` function from beem will now use the operation_filter when &quot;https://api.hive.blog&quot; is set as node. This speeds up receiving account history data up to 100 %. ### History reverse with operation_filter ``` from beem.account import Account from beem import Hive import time hive = Hive(&quot;https://api.hive.blog&quot;) acc = Account(&quot;holger80&quot;, blockchain_instance=hive) start_time = time.time() n_op = acc.virtual_op_count() transfer_ops = list(acc.history_reverse(only_ops=[&quot;transfer&quot;])) print(&quot;Time needed to search all transfers in %d history elements: %.2f s&quot; % (n_op, (time.time() - start_time))) print(&quot;%d transfer op have been found&quot; % (len(transfer_ops))) ``` returns ``` Time needed to search all transfers in 283514 history elements: 145.66 s 4666 transfer op have been found ``` ### History with operation_filter ``` from beem.account import Account from beem import Hive import time hive = Hive(&quot;https://api.hive.blog&quot;) acc = Account(&quot;holger80&quot;, blockchain_instance=hive) start_time = time.time() n_op = acc.virtual_op_count() transfer_ops = list(acc.history(only_ops=[&quot;transfer&quot;])) print(&quot;Time needed to search all transfers in %d history elements: %.2f s&quot; % (n_op, (time.time() - start_time))) print(&quot;%d transfer op have been found&quot; % (len(transfer_ops))) ``` returns ``` Time needed to search all transfers in 283517 history elements: 144.55 s 4666 transfer op have been found ``` ### History without operation filter Now we do the same without filtering: ``` from beem.account import Account from beem import Hive import time hive = Hive(&quot;https://api.hive.blog&quot;) acc = Account(&quot;holger80&quot;, blockchain_instance=hive) start_time = time.time() n_op = acc.virtual_op_count() transfer_ops = [] for op in acc.history(): if op[&quot;type&quot;] == &quot;transfer&quot;: transfer_ops.append(op) print(&quot;Time needed to search all transfers in %d history elements: %.2f s&quot; % (n_op, (time.time() - start_time))) print(&quot;%d transfer op have been found&quot; % (len(transfer_ops))) ``` returns ``` Time needed to search all transfers in 283518 history elements: 261.63 s 4666 transfer op have been found ``` ___ *If you like what I do, consider casting a vote for me as witness on [Hivesigner](https://hivesigner.com/sign/account-witness-vote?witness=holger80&amp;amp;approve=1) or on [PeakD](https://peakd.com/witnesses)* See: Update for beem: improved account history handling by @holger80</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://cdn.steemitimages.com/DQmcRrwLPSywSYMierfP6um6mejeMNGjN9Rxw7audJqTDgb/beem-logo" /><media:content medium="image" url="https://cdn.steemitimages.com/DQmcRrwLPSywSYMierfP6um6mejeMNGjN9Rxw7audJqTDgb/beem-logo" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Tin Toy Update - Eclipse HF</title><link href="https://hivedocs.info/tools/docker/testnet/2020/11/04/tin-toy-update-eclipse-hf.html" rel="alternate" type="text/html" title="Tin Toy Update - Eclipse HF" /><published>2020-11-04T21:11:24-08:00</published><updated>2020-11-04T21:11:24-08:00</updated><id>https://hivedocs.info/tools/docker/testnet/2020/11/04/tin-toy-update-eclipse-hf</id><content type="html" xml:base="https://hivedocs.info/tools/docker/testnet/2020/11/04/tin-toy-update-eclipse-hf.html">&lt;div id=&quot;content-inertia-tin-toy-update-eclipse-hf&quot;&gt;&lt;div class=&quot;pull-right&quot;&gt;
&lt;img src=&quot;https://i.imgur.com/FkZIVUu.jpg&quot; /&gt;
&lt;/div&gt;

Using one command, you can deploy Tin Toy and play around with a tiny toy version of the Hive blockchain:

```bash
docker run -d -p 8091:8091 inertia/tintoy:latest
```

This is handy for developers who want to test their applications without having to use the mainnet.  It's also nice because you don't need to rely on anyone to run a public testnet.  It only takes a few minutes to get up and running.

Once you have your testnet up and running, you can check exactly which version you're on using:

```bash
curl -s --data '{
  &quot;jsonrpc&quot;:&quot;2.0&quot;,
  &quot;method&quot;:&quot;database_api.get_version&quot;,
  &quot;params&quot;:{},
  &quot;id&quot;:1
}' http://localhost:8091 | jq
```

This will return something like:

```json
{
  &quot;jsonrpc&quot;: &quot;2.0&quot;,
  &quot;result&quot;: {
    &quot;blockchain_version&quot;: &quot;1.25.0&quot;,
    &quot;hive_revision&quot;: &quot;21ca61a2253a01aeca5debdcdb202ff89feae27c&quot;,
    &quot;fc_revision&quot;: &quot;21ca61a2253a01aeca5debdcdb202ff89feae27c&quot;,
    &quot;chain_id&quot;: &quot;18dcf0a285365fc58b71f18b3d3fec954aa0c141c44e4e5cb4cf777b9eab274e&quot;
  },
  &quot;id&quot;: 1
}
```

Also see: [related gist](https://gist.github.com/inertia186/b88e7bfff8862858e54c59392e2bce20)

---

To do this *without* docker, see:

https://developers.hive.io/tutorials-recipes/setting-up-a-testnet.html

I originally announced Tin Toy a couple of years ago:

https://hive.blog/@inertia/tin-toy

There are also some extra things you can do with it if you're doing blockchain development or you want to build from a local branch of `hived` (though this is a slightly dated article):

https://hive.blog/@inertia/how-to-do-iterative-steemd-development-on-a-local-testnet
&lt;/div&gt;
&lt;script crossorigin=&quot;anonymous&quot; integrity=&quot;sha256-4+XzXVhsDmqanXGHaHvgh1gMQKX40OUvDEBTu8JcmNs=&quot; src=&quot;https://code.jquery.com/jquery-3.5.1.slim.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://unpkg.com/steem-content-renderer&quot;&gt;&lt;/script&gt;

&lt;script&gt;
  $(document).ready(function() {
    try {
      const renderer = new SteemContentRenderer.DefaultRenderer({
        baseUrl: &quot;https://hive.blog/&quot;,
        breaks: true,
        skipSanitization: false,
        allowInsecureScriptTags: false,
        addNofollowToLinks: true,
        doNotShowImages: false,
        ipfsPrefix: &quot;&quot;,
        assetsWidth: 640,
        assetsHeight: 480,
        imageProxyFn: (url) =&gt; url,
        usertagUrlFn: (account) =&gt; &quot;/@inertia&quot;,
        hashtagUrlFn: (hashtag) =&gt; &quot;/tin-toy-update-eclipse-hf&quot;,
        isLinkSafeFn: (url) =&gt; true,
      });
      
      const inputElem = $('#content-inertia-tin-toy-update-eclipse-hf').html();
      const outputElem = $('#content-inertia-tin-toy-update-eclipse-hf');
      const output = renderer.render(inputElem);
      
      outputElem.html(output);
    } catch(e) {
      console.log(e);
    }
  });
&lt;/script&gt;

&lt;style&gt;
  #content-inertia-tin-toy-update-eclipse-hf {
    padding: 0 3rem;
    color: #444444;
    font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Helvetica, Arial, sans-serif;
    font-size: 16px;
    line-height: 1.8;
    text-shadow: 0 1px 0 #ffffff;
    padding: 0.5rem;
  }
  #content-inertia-tin-toy-update-eclipse-hf code {
    background: white;
  }
  #content-inertia-tin-toy-update-eclipse-hf a {
    border-bottom: 1px solid #444444; color: #444444; text-decoration: none;
  }
  #content-inertia-tin-toy-update-eclipse-hf a:hover {
    border-bottom: 0;
  }
  #content-inertia-tin-toy-update-eclipse-hf h1 {
    font-size: 2.2em;
  }
  #content-inertia-tin-toy-update-eclipse-hf h2, h3, h4, h5 {
    margin-bottom: 0;
  }
  #content-inertia-tin-toy-update-eclipse-hf header small {
    color: #999;
    font-size: 50%;
  }
  #content-inertia-tin-toy-update-eclipse-hf img {
    max-width: 100%;
  }
&lt;/style&gt;

&lt;hr /&gt;

&lt;p&gt;
  See: &lt;a href=&quot;https://peakd.com/hive-139531/@inertia/tin-toy-update-eclipse-hf&quot;&gt;Tin Toy Update - Eclipse HF&lt;/a&gt;
  by
  &lt;a href=&quot;https://hive.blog/@inertia&quot;&gt;@inertia&lt;/a&gt;
&lt;/p&gt;</content><author><name>inertia</name></author><summary type="html">Using one command, you can deploy Tin Toy and play around with a tiny toy version of the Hive blockchain: ```bash docker run -d -p 8091:8091 inertia/tintoy:latest ``` This is handy for developers who want to test their applications without having to use the mainnet. It's also nice because you don't need to rely on anyone to run a public testnet. It only takes a few minutes to get up and running. Once you have your testnet up and running, you can check exactly which version you're on using: ```bash curl -s --data '{ &quot;jsonrpc&quot;:&quot;2.0&quot;, &quot;method&quot;:&quot;database_api.get_version&quot;, &quot;params&quot;:{}, &quot;id&quot;:1 }' http://localhost:8091 | jq ``` This will return something like: ```json { &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;result&quot;: { &quot;blockchain_version&quot;: &quot;1.25.0&quot;, &quot;hive_revision&quot;: &quot;21ca61a2253a01aeca5debdcdb202ff89feae27c&quot;, &quot;fc_revision&quot;: &quot;21ca61a2253a01aeca5debdcdb202ff89feae27c&quot;, &quot;chain_id&quot;: &quot;18dcf0a285365fc58b71f18b3d3fec954aa0c141c44e4e5cb4cf777b9eab274e&quot; }, &quot;id&quot;: 1 } ``` Also see: [related gist](https://gist.github.com/inertia186/b88e7bfff8862858e54c59392e2bce20) --- To do this *without* docker, see: https://developers.hive.io/tutorials-recipes/setting-up-a-testnet.html I originally announced Tin Toy a couple of years ago: https://hive.blog/@inertia/tin-toy There are also some extra things you can do with it if you're doing blockchain development or you want to build from a local branch of `hived` (though this is a slightly dated article): https://hive.blog/@inertia/how-to-do-iterative-steemd-development-on-a-local-testnet See: Tin Toy Update - Eclipse HF by @inertia</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://i.imgur.com/FkZIVUu.jpg" /><media:content medium="image" url="https://i.imgur.com/FkZIVUu.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">BlockTrades update on Hive development work</title><link href="https://hivedocs.info/news/core/development/2020/11/02/blocktrades-update-on-hive-development-work.html" rel="alternate" type="text/html" title="BlockTrades update on Hive development work" /><published>2020-11-02T16:20:21-08:00</published><updated>2020-11-02T16:20:21-08:00</updated><id>https://hivedocs.info/news/core/development/2020/11/02/blocktrades-update-on-hive-development-work</id><content type="html" xml:base="https://hivedocs.info/news/core/development/2020/11/02/blocktrades-update-on-hive-development-work.html">&lt;div id=&quot;content-blocktrades-blocktrades-update-on-hive-development-work&quot;&gt;Last week we continued work on post-HF24 optimizations. Below is a summary of the work done last week and our plans for the upcoming week.

# Hived work (blockchain node software)

We added reporting of some virtual ops related to hive fund for better accounting by a block explorer (done in conjunction with @howo):
https://gitlab.syncad.com/hive/hive/-/merge_requests/144
https://gitlab.syncad.com/hive/hive/-/merge_requests/135

We made fixes to filtering of get_account_history functionality and a fix to the legacy get_account_history plugin (it used a 1-based indexing of operation history instead of a 0-based indexing like the get_account_history_rocksdb plugin, now they both use 0-based indexing):
https://gitlab.syncad.com/hive/hive/-/merge_requests/145
https://gitlab.syncad.com/hive/hive/-/merge_requests/146
https://gitlab.syncad.com/hive/hive/-/merge_requests/148

Fixes to hived API tests:
https://gitlab.syncad.com/hive/hive/-/merge_requests/141

Miscellaneous:
https://gitlab.syncad.com/hive/hive/-/merge_requests/147 (set reported version to 1.24.6)

We’re currently working on a major optimization to the get_block_api plugin that should likely provide a big boost in performance for the get_block API call (this will likely enable us to speed up the hivemind “full sync” process as well). The old implementation used an overly pessimistic mutex locking scheme that severely degraded potential performance under loading.

## Hived status

We completed all tests on changes made in the previous week and this week and there are no known outstanding issues with hived operation (other than the known longstanding issue with servicing of API requests during startup of a hived node).

We plan to tag v1.24.7 as soon as we complete the optimizations to the get_block_api plugin. V1.24.7 will be a recommended upgrade for API node operators, but it doesn’t contain changes needed by witness nodes or exchanges.

# Hivemind

We made numerous optimizations and bug fixes in hivemind this past week:
https://gitlab.syncad.com/hive/hivemind/-/merge_requests/332
https://gitlab.syncad.com/hive/hivemind/-/merge_requests/333
https://gitlab.syncad.com/hive/hivemind/-/merge_requests/330
https://gitlab.syncad.com/hive/hivemind/-/merge_requests/334
https://gitlab.syncad.com/hive/hivemind/-/merge_requests/228
https://gitlab.syncad.com/hive/hivemind/-/merge_requests/335
https://gitlab.syncad.com/hive/hivemind/-/merge_requests/211
https://gitlab.syncad.com/hive/hivemind/-/merge_requests/338
https://gitlab.syncad.com/hive/hivemind/-/merge_requests/341
https://gitlab.syncad.com/hive/hivemind/-/merge_requests/342
https://gitlab.syncad.com/hive/hivemind/-/merge_requests/343
https://gitlab.syncad.com/hive/hivemind/-/merge_requests/344
https://gitlab.syncad.com/hive/hivemind/-/merge_requests/345
One of the more visible fixes is the comment counts are correctly reported now for posts.

Due to the rapid pace with which changes are being made to hivemind, we also started upgrading our automated build-and-test (CI) system to support building on multiple gitlab runners so that our devs could get faster feedback on changes they make. 

The primary challenge was to setup more than one system configured for performing a hivemind sync and to allow troubleshooting in the case of test fails). For speed reasons, hivemind’s CI system is configured to only sync to the 5 millionth block, but we’re adding an option to do testing with a full sync as well (via a manual trigger, as this test is much more time-consuming).
https://gitlab.syncad.com/hive/hivemind/-/merge_requests/327
https://gitlab.syncad.com/hive/hivemind/-/merge_requests/340

We also introduced mock data providers to allow testing of operations that didn’t occur by the 5 millionth block:
https://gitlab.syncad.com/hive/hivemind/-/merge_requests/336


## Hivemind status (2nd layer social media microservice)

We deployed all the above changes to hived and hivemind to our production node, api.hive.blog, and they’re working well. We still have a few optimizations to make (mostly importantly, further speedups to unread_notifications which averages around 1.5 seconds to complete right now).

We created a data dump of our hivemind database and several other API node operators have used that data dump to update their node and begin serving data with the latest code.

# Condenser + Condenser wallet (open-source code for **hive.blog**)

The most visible change that BlockTrades made to condenser last week will likely be deployed tomorrow. This change will update the vote information for a post 9 seconds after the user does an upvote or a downovte on the post:
https://gitlab.syncad.com/hive/condenser/-/merge_requests/136


# What’s the plan for next week?

We’ll be finishing up a few more optimizations to hived and hivemind. In addition to speeding up API calls for both, we’re also going to look at speeding up the hivemind full sync time (currently it takes 4 days). And we’ll continue filling out the test cases in the automated testing suites for both projects.

I’d hope to begin analysis of future features for Hive (both for hardfork 25 and for 2nd layer apps support), but most of our time last week was consumed with optimization of the current system. We did make a little headway on this issue in the Hive developers meeting we had earlier today, though. 

I’ll make a post later this week in the Hive improvements community on some of the features we’re considering both for HF25 and for 2nd layer features (all the hardfork features are ones that have been previously discussed many times by the Hive community and have met general approval). 

One of the nice things about the architecture we’re moving Hive towards is that we can now add more capabilities to Hive without requiring a hardfork to do so. We will still need to do a hardfork when we make governance improvements, of course, but for many of our future features, these features can be released as they become ready, without having to coordinate their release with other features and with exchanges.&lt;/div&gt;
&lt;script crossorigin=&quot;anonymous&quot; integrity=&quot;sha256-4+XzXVhsDmqanXGHaHvgh1gMQKX40OUvDEBTu8JcmNs=&quot; src=&quot;https://code.jquery.com/jquery-3.5.1.slim.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://unpkg.com/steem-content-renderer&quot;&gt;&lt;/script&gt;

&lt;script&gt;
  $(document).ready(function() {
    try {
      const renderer = new SteemContentRenderer.DefaultRenderer({
        baseUrl: &quot;https://hive.blog/&quot;,
        breaks: true,
        skipSanitization: false,
        allowInsecureScriptTags: false,
        addNofollowToLinks: true,
        doNotShowImages: false,
        ipfsPrefix: &quot;&quot;,
        assetsWidth: 640,
        assetsHeight: 480,
        imageProxyFn: (url) =&gt; url,
        usertagUrlFn: (account) =&gt; &quot;/@blocktrades&quot;,
        hashtagUrlFn: (hashtag) =&gt; &quot;/blocktrades-update-on-hive-development-work&quot;,
        isLinkSafeFn: (url) =&gt; true,
      });
      
      const inputElem = $('#content-blocktrades-blocktrades-update-on-hive-development-work').html();
      const outputElem = $('#content-blocktrades-blocktrades-update-on-hive-development-work');
      const output = renderer.render(inputElem);
      
      outputElem.html(output);
    } catch(e) {
      console.log(e);
    }
  });
&lt;/script&gt;

&lt;style&gt;
  #content-blocktrades-blocktrades-update-on-hive-development-work {
    padding: 0 3rem;
    color: #444444;
    font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Helvetica, Arial, sans-serif;
    font-size: 16px;
    line-height: 1.8;
    text-shadow: 0 1px 0 #ffffff;
    padding: 0.5rem;
  }
  #content-blocktrades-blocktrades-update-on-hive-development-work code {
    background: white;
  }
  #content-blocktrades-blocktrades-update-on-hive-development-work a {
    border-bottom: 1px solid #444444; color: #444444; text-decoration: none;
  }
  #content-blocktrades-blocktrades-update-on-hive-development-work a:hover {
    border-bottom: 0;
  }
  #content-blocktrades-blocktrades-update-on-hive-development-work h1 {
    font-size: 2.2em;
  }
  #content-blocktrades-blocktrades-update-on-hive-development-work h2, h3, h4, h5 {
    margin-bottom: 0;
  }
  #content-blocktrades-blocktrades-update-on-hive-development-work header small {
    color: #999;
    font-size: 50%;
  }
  #content-blocktrades-blocktrades-update-on-hive-development-work img {
    max-width: 100%;
  }
&lt;/style&gt;

&lt;hr /&gt;

&lt;p&gt;
  See: &lt;a href=&quot;https://hive.blog/hive-139531/@blocktrades/blocktrades-update-on-hive-development-work&quot;&gt;BlockTrades update on Hive development work&lt;/a&gt;
  by
  &lt;a href=&quot;https://hive.blog/@blocktrades&quot;&gt;@blocktrades&lt;/a&gt;
&lt;/p&gt;</content><author><name>blocktrades</name></author><summary type="html">Last week we continued work on post-HF24 optimizations. Below is a summary of the work done last week and our plans for the upcoming week. # Hived work (blockchain node software) We added reporting of some virtual ops related to hive fund for better accounting by a block explorer (done in conjunction with @howo): https://gitlab.syncad.com/hive/hive/-/merge_requests/144 https://gitlab.syncad.com/hive/hive/-/merge_requests/135 We made fixes to filtering of get_account_history functionality and a fix to the legacy get_account_history plugin (it used a 1-based indexing of operation history instead of a 0-based indexing like the get_account_history_rocksdb plugin, now they both use 0-based indexing): https://gitlab.syncad.com/hive/hive/-/merge_requests/145 https://gitlab.syncad.com/hive/hive/-/merge_requests/146 https://gitlab.syncad.com/hive/hive/-/merge_requests/148 Fixes to hived API tests: https://gitlab.syncad.com/hive/hive/-/merge_requests/141 Miscellaneous: https://gitlab.syncad.com/hive/hive/-/merge_requests/147 (set reported version to 1.24.6) We’re currently working on a major optimization to the get_block_api plugin that should likely provide a big boost in performance for the get_block API call (this will likely enable us to speed up the hivemind “full sync” process as well). The old implementation used an overly pessimistic mutex locking scheme that severely degraded potential performance under loading. ## Hived status We completed all tests on changes made in the previous week and this week and there are no known outstanding issues with hived operation (other than the known longstanding issue with servicing of API requests during startup of a hived node). We plan to tag v1.24.7 as soon as we complete the optimizations to the get_block_api plugin. V1.24.7 will be a recommended upgrade for API node operators, but it doesn’t contain changes needed by witness nodes or exchanges. # Hivemind We made numerous optimizations and bug fixes in hivemind this past week: https://gitlab.syncad.com/hive/hivemind/-/merge_requests/332 https://gitlab.syncad.com/hive/hivemind/-/merge_requests/333 https://gitlab.syncad.com/hive/hivemind/-/merge_requests/330 https://gitlab.syncad.com/hive/hivemind/-/merge_requests/334 https://gitlab.syncad.com/hive/hivemind/-/merge_requests/228 https://gitlab.syncad.com/hive/hivemind/-/merge_requests/335 https://gitlab.syncad.com/hive/hivemind/-/merge_requests/211 https://gitlab.syncad.com/hive/hivemind/-/merge_requests/338 https://gitlab.syncad.com/hive/hivemind/-/merge_requests/341 https://gitlab.syncad.com/hive/hivemind/-/merge_requests/342 https://gitlab.syncad.com/hive/hivemind/-/merge_requests/343 https://gitlab.syncad.com/hive/hivemind/-/merge_requests/344 https://gitlab.syncad.com/hive/hivemind/-/merge_requests/345 One of the more visible fixes is the comment counts are correctly reported now for posts. Due to the rapid pace with which changes are being made to hivemind, we also started upgrading our automated build-and-test (CI) system to support building on multiple gitlab runners so that our devs could get faster feedback on changes they make. The primary challenge was to setup more than one system configured for performing a hivemind sync and to allow troubleshooting in the case of test fails). For speed reasons, hivemind’s CI system is configured to only sync to the 5 millionth block, but we’re adding an option to do testing with a full sync as well (via a manual trigger, as this test is much more time-consuming). https://gitlab.syncad.com/hive/hivemind/-/merge_requests/327 https://gitlab.syncad.com/hive/hivemind/-/merge_requests/340 We also introduced mock data providers to allow testing of operations that didn’t occur by the 5 millionth block: https://gitlab.syncad.com/hive/hivemind/-/merge_requests/336 ## Hivemind status (2nd layer social media microservice) We deployed all the above changes to hived and hivemind to our production node, api.hive.blog, and they’re working well. We still have a few optimizations to make (mostly importantly, further speedups to unread_notifications which averages around 1.5 seconds to complete right now). We created a data dump of our hivemind database and several other API node operators have used that data dump to update their node and begin serving data with the latest code. # Condenser + Condenser wallet (open-source code for **hive.blog**) The most visible change that BlockTrades made to condenser last week will likely be deployed tomorrow. This change will update the vote information for a post 9 seconds after the user does an upvote or a downovte on the post: https://gitlab.syncad.com/hive/condenser/-/merge_requests/136 # What’s the plan for next week? We’ll be finishing up a few more optimizations to hived and hivemind. In addition to speeding up API calls for both, we’re also going to look at speeding up the hivemind full sync time (currently it takes 4 days). And we’ll continue filling out the test cases in the automated testing suites for both projects. I’d hope to begin analysis of future features for Hive (both for hardfork 25 and for 2nd layer apps support), but most of our time last week was consumed with optimization of the current system. We did make a little headway on this issue in the Hive developers meeting we had earlier today, though. I’ll make a post later this week in the Hive improvements community on some of the features we’re considering both for HF25 and for 2nd layer features (all the hardfork features are ones that have been previously discussed many times by the Hive community and have met general approval). One of the nice things about the architecture we’re moving Hive towards is that we can now add more capabilities to Hive without requiring a hardfork to do so. We will still need to do a hardfork when we make governance improvements, of course, but for many of our future features, these features can be released as they become ready, without having to coordinate their release with other features and with exchanges. See: BlockTrades update on Hive development work by @blocktrades</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://hivedocs.info/assets/images/favicon.png" /><media:content medium="image" url="https://hivedocs.info/assets/images/favicon.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Hive developer meeting #12</title><link href="https://hivedocs.info/news/core/development/2020/11/02/hive-developer-meeting-12.html" rel="alternate" type="text/html" title="Hive developer meeting #12" /><published>2020-11-02T14:31:57-08:00</published><updated>2020-11-02T14:31:57-08:00</updated><id>https://hivedocs.info/news/core/development/2020/11/02/hive-developer-meeting-12</id><content type="html" xml:base="https://hivedocs.info/news/core/development/2020/11/02/hive-developer-meeting-12.html">&lt;div id=&quot;content-howo-hive-developer-meeting-12&quot;&gt;https://www.youtube.com/watch?v=w5JnzVP67vo	

Subjects touched upon: 

* Dev sync
* hivemind status
* Documentation
* Hard fork 25 direction
* Initial smart contract thoughts


meeting tl;dr: 

The beginning is a lot of tech talk from @blocktrades and I. We mostly talk about what we've been up to. Regarding documentation, I'll make a post to outline my vision for it regarding a potential structure for it.

Regarding hivemind, I know @imwatsi was interested in contributing, we touch upon that a bit, basically hivemind needs more tests. So this is a great way to get involved. 

Regarding hard fork 25 and its direction we agreed that it should still be &quot;small&quot; (code wise) changes like governance / economy and rc delegations.

And then we dwell on how he envisions smart contracts as a layer 2 engine running on hive and how that would affect SMTs

&lt;/div&gt;
&lt;script crossorigin=&quot;anonymous&quot; integrity=&quot;sha256-4+XzXVhsDmqanXGHaHvgh1gMQKX40OUvDEBTu8JcmNs=&quot; src=&quot;https://code.jquery.com/jquery-3.5.1.slim.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://unpkg.com/steem-content-renderer&quot;&gt;&lt;/script&gt;

&lt;script&gt;
  $(document).ready(function() {
    try {
      const renderer = new SteemContentRenderer.DefaultRenderer({
        baseUrl: &quot;https://hive.blog/&quot;,
        breaks: true,
        skipSanitization: false,
        allowInsecureScriptTags: false,
        addNofollowToLinks: true,
        doNotShowImages: false,
        ipfsPrefix: &quot;&quot;,
        assetsWidth: 640,
        assetsHeight: 480,
        imageProxyFn: (url) =&gt; url,
        usertagUrlFn: (account) =&gt; &quot;/@howo&quot;,
        hashtagUrlFn: (hashtag) =&gt; &quot;/hive-developer-meeting-12&quot;,
        isLinkSafeFn: (url) =&gt; true,
      });
      
      const inputElem = $('#content-howo-hive-developer-meeting-12').html();
      const outputElem = $('#content-howo-hive-developer-meeting-12');
      const output = renderer.render(inputElem);
      
      outputElem.html(output);
    } catch(e) {
      console.log(e);
    }
  });
&lt;/script&gt;

&lt;style&gt;
  #content-howo-hive-developer-meeting-12 {
    padding: 0 3rem;
    color: #444444;
    font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Helvetica, Arial, sans-serif;
    font-size: 16px;
    line-height: 1.8;
    text-shadow: 0 1px 0 #ffffff;
    padding: 0.5rem;
  }
  #content-howo-hive-developer-meeting-12 code {
    background: white;
  }
  #content-howo-hive-developer-meeting-12 a {
    border-bottom: 1px solid #444444; color: #444444; text-decoration: none;
  }
  #content-howo-hive-developer-meeting-12 a:hover {
    border-bottom: 0;
  }
  #content-howo-hive-developer-meeting-12 h1 {
    font-size: 2.2em;
  }
  #content-howo-hive-developer-meeting-12 h2, h3, h4, h5 {
    margin-bottom: 0;
  }
  #content-howo-hive-developer-meeting-12 header small {
    color: #999;
    font-size: 50%;
  }
  #content-howo-hive-developer-meeting-12 img {
    max-width: 100%;
  }
&lt;/style&gt;

&lt;hr /&gt;

&lt;p&gt;
  See: &lt;a href=&quot;https://peakd.com/hive/@howo/hive-developer-meeting-12&quot;&gt;Hive developer meeting #12&lt;/a&gt;
  by
  &lt;a href=&quot;https://hive.blog/@howo&quot;&gt;@howo&lt;/a&gt;
&lt;/p&gt;</content><author><name>howo</name></author><summary type="html">https://www.youtube.com/watch?v=w5JnzVP67vo Subjects touched upon: * Dev sync * hivemind status * Documentation * Hard fork 25 direction * Initial smart contract thoughts meeting tl;dr: The beginning is a lot of tech talk from @blocktrades and I. We mostly talk about what we've been up to. Regarding documentation, I'll make a post to outline my vision for it regarding a potential structure for it. Regarding hivemind, I know @imwatsi was interested in contributing, we touch upon that a bit, basically hivemind needs more tests. So this is a great way to get involved. Regarding hard fork 25 and its direction we agreed that it should still be &quot;small&quot; (code wise) changes like governance / economy and rc delegations. And then we dwell on how he envisions smart contracts as a layer 2 engine running on hive and how that would affect SMTs See: Hive developer meeting #12 by @howo</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://hivedocs.info/assets/images/favicon.png" /><media:content medium="image" url="https://hivedocs.info/assets/images/favicon.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Announcing the Hive Node Beacon project</title><link href="https://hivedocs.info/news/devops/api/2020/10/30/announcing-the-hive-node-beacon-project.html" rel="alternate" type="text/html" title="Announcing the Hive Node Beacon project" /><published>2020-10-30T14:48:03-07:00</published><updated>2020-10-30T14:48:03-07:00</updated><id>https://hivedocs.info/news/devops/api/2020/10/30/announcing-the-hive-node-beacon-project</id><content type="html" xml:base="https://hivedocs.info/news/devops/api/2020/10/30/announcing-the-hive-node-beacon-project.html">&lt;div id=&quot;content-peakd-announcing-the-hive-node-beacon-project&quot;&gt;Today we are happy to announce a new tool created to improve the experience of PeakD (and Hive) users.

&lt;center&gt;&lt;h5&gt;Check it out on https://beacon.peakd.com&lt;/h5&gt;&lt;/center&gt;

![beacon_cover_v1.jpg](https://files.peakd.com/file/peakd-hive/peakd/9RKDLN5s-beacon_cover_v1.jpg)

This new tool is already integrated into PeakD itself and allow users to automatically switch the API node to the best one available.

Also this is the first project released as [open source](https://github.com/peak-projects/peakd-node-beacon) so others can benefit from the work we do on PeakD.
We are planning to release more tools and libraries as open source in the near future, so hopefully this is only the first post of the list :)


#### Current status for the API nodes

You can check this on the website itself, but sharing here for a quick look

![image.png](https://files.peakd.com/file/peakd-hive/peakd/Xi1xPui8-image.png)

As you can see there are no nodes at the moment fully working. Please keep in mind that nodes are working perfectly fine on the chain level, just the social part powered by Hivemind still have some things to be fixed after the last HF. 


#### API checks

To understand how the above scores are computed you can check the list of the tests performed for each node (clicking on the magnifying glass).

![image.png](https://files.peakd.com/file/peakd-hive/peakd/1RoII1j0-image.png)

To get a better understanding of each check you can hover with the mouse on the (?) icon.

![image.png](https://files.peakd.com/file/peakd-hive/peakd/R5NKk1hz-image.png)


#### Future plans and improvements

The tool is up and running and free to use right now, but we already have some ideas to make it better and to integrate more with [peakd.com](https://peakd.com) itself:
- Integrate in the [Node Benchmark](https://peakd.com/me/tools/benchmark) page
- Allow users to perform a speed test from Beacon itself
- Integrate in the [Status](https://status.peakd.com) page
- Allow users to select multiple nodes in their Settings with a specified order preference.

---


## Support the @peakd project

Now is probably a nice time to remind you of the ways you can support the development of @peakd.

![Selection_298.png](https://files.peakd.com/file/peakd-hive/peakd/w36DQpO7-Selection_298.png)

We have a proposal on the Decentralized Hive Fund. You can review the proposal [here](/proposals/52).
If you agree to the proposal and you think the points mentioned add value to the Hive Blockchain consider supporting it using the above links or directly with **[this link](https://hivesigner.com/sign/update-proposal-votes?proposal_ids=[52]&amp;amp;approve=true)**.

--- 

We also run a witness server to help produce the blocks for the Hive Blockchain. You can vote for our witness so we are in a position to process more of them.

Vote on the witness page: https://peakd.com/witnesses

- Using Keychain: You just have to click and approve the transaction
- Using HiveSigner: You'll need access to confirm the transaction with your Active Key at least

---

###### *The PeakD Team*
_About us: https://peakd.com/about_
_Join us on Discord: https://discord.gg/Fy3bca5_&lt;/div&gt;
&lt;script crossorigin=&quot;anonymous&quot; integrity=&quot;sha256-4+XzXVhsDmqanXGHaHvgh1gMQKX40OUvDEBTu8JcmNs=&quot; src=&quot;https://code.jquery.com/jquery-3.5.1.slim.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://unpkg.com/steem-content-renderer&quot;&gt;&lt;/script&gt;

&lt;script&gt;
  $(document).ready(function() {
    try {
      const renderer = new SteemContentRenderer.DefaultRenderer({
        baseUrl: &quot;https://hive.blog/&quot;,
        breaks: true,
        skipSanitization: false,
        allowInsecureScriptTags: false,
        addNofollowToLinks: true,
        doNotShowImages: false,
        ipfsPrefix: &quot;&quot;,
        assetsWidth: 640,
        assetsHeight: 480,
        imageProxyFn: (url) =&gt; url,
        usertagUrlFn: (account) =&gt; &quot;/@peakd&quot;,
        hashtagUrlFn: (hashtag) =&gt; &quot;/announcing-the-hive-node-beacon-project&quot;,
        isLinkSafeFn: (url) =&gt; true,
      });
      
      const inputElem = $('#content-peakd-announcing-the-hive-node-beacon-project').html();
      const outputElem = $('#content-peakd-announcing-the-hive-node-beacon-project');
      const output = renderer.render(inputElem);
      
      outputElem.html(output);
    } catch(e) {
      console.log(e);
    }
  });
&lt;/script&gt;

&lt;style&gt;
  #content-peakd-announcing-the-hive-node-beacon-project {
    padding: 0 3rem;
    color: #444444;
    font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Helvetica, Arial, sans-serif;
    font-size: 16px;
    line-height: 1.8;
    text-shadow: 0 1px 0 #ffffff;
    padding: 0.5rem;
  }
  #content-peakd-announcing-the-hive-node-beacon-project code {
    background: white;
  }
  #content-peakd-announcing-the-hive-node-beacon-project a {
    border-bottom: 1px solid #444444; color: #444444; text-decoration: none;
  }
  #content-peakd-announcing-the-hive-node-beacon-project a:hover {
    border-bottom: 0;
  }
  #content-peakd-announcing-the-hive-node-beacon-project h1 {
    font-size: 2.2em;
  }
  #content-peakd-announcing-the-hive-node-beacon-project h2, h3, h4, h5 {
    margin-bottom: 0;
  }
  #content-peakd-announcing-the-hive-node-beacon-project header small {
    color: #999;
    font-size: 50%;
  }
  #content-peakd-announcing-the-hive-node-beacon-project img {
    max-width: 100%;
  }
&lt;/style&gt;

&lt;hr /&gt;

&lt;p&gt;
  See: &lt;a href=&quot;https://peakd.com/hive-139531/@peakd/announcing-the-hive-node-beacon-project&quot;&gt;Announcing the Hive Node Beacon project&lt;/a&gt;
  by
  &lt;a href=&quot;https://hive.blog/@peakd&quot;&gt;@peakd&lt;/a&gt;
&lt;/p&gt;</content><author><name>peakd</name></author><summary type="html">Today we are happy to announce a new tool created to improve the experience of PeakD (and Hive) users. Check it out on https://beacon.peakd.com ![beacon_cover_v1.jpg](https://files.peakd.com/file/peakd-hive/peakd/9RKDLN5s-beacon_cover_v1.jpg) This new tool is already integrated into PeakD itself and allow users to automatically switch the API node to the best one available. Also this is the first project released as [open source](https://github.com/peak-projects/peakd-node-beacon) so others can benefit from the work we do on PeakD. We are planning to release more tools and libraries as open source in the near future, so hopefully this is only the first post of the list :) #### Current status for the API nodes You can check this on the website itself, but sharing here for a quick look ![image.png](https://files.peakd.com/file/peakd-hive/peakd/Xi1xPui8-image.png) As you can see there are no nodes at the moment fully working. Please keep in mind that nodes are working perfectly fine on the chain level, just the social part powered by Hivemind still have some things to be fixed after the last HF. #### API checks To understand how the above scores are computed you can check the list of the tests performed for each node (clicking on the magnifying glass). ![image.png](https://files.peakd.com/file/peakd-hive/peakd/1RoII1j0-image.png) To get a better understanding of each check you can hover with the mouse on the (?) icon. ![image.png](https://files.peakd.com/file/peakd-hive/peakd/R5NKk1hz-image.png) #### Future plans and improvements The tool is up and running and free to use right now, but we already have some ideas to make it better and to integrate more with [peakd.com](https://peakd.com) itself: - Integrate in the [Node Benchmark](https://peakd.com/me/tools/benchmark) page - Allow users to perform a speed test from Beacon itself - Integrate in the [Status](https://status.peakd.com) page - Allow users to select multiple nodes in their Settings with a specified order preference. --- ## Support the @peakd project Now is probably a nice time to remind you of the ways you can support the development of @peakd. ![Selection_298.png](https://files.peakd.com/file/peakd-hive/peakd/w36DQpO7-Selection_298.png) We have a proposal on the Decentralized Hive Fund. You can review the proposal [here](/proposals/52). If you agree to the proposal and you think the points mentioned add value to the Hive Blockchain consider supporting it using the above links or directly with **[this link](https://hivesigner.com/sign/update-proposal-votes?proposal_ids=[52]&amp;amp;approve=true)**. --- We also run a witness server to help produce the blocks for the Hive Blockchain. You can vote for our witness so we are in a position to process more of them. Vote on the witness page: https://peakd.com/witnesses - Using Keychain: You just have to click and approve the transaction - Using HiveSigner: You'll need access to confirm the transaction with your Active Key at least --- ###### *The PeakD Team* _About us: https://peakd.com/about_ _Join us on Discord: https://discord.gg/Fy3bca5_ See: Announcing the Hive Node Beacon project by @peakd</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://files.peakd.com/file/peakd-hive/peakd/9RKDLN5s-beacon_cover_v1.jpg" /><media:content medium="image" url="https://files.peakd.com/file/peakd-hive/peakd/9RKDLN5s-beacon_cover_v1.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">My new contributions to the Hive Condenser</title><link href="https://hivedocs.info/news/nodejs/condenser/2020/10/27/6h8fgn-my-new-contributions-to-the-hive-condenser.html" rel="alternate" type="text/html" title="My new contributions to the Hive Condenser" /><published>2020-10-27T04:16:06-07:00</published><updated>2020-10-27T04:16:06-07:00</updated><id>https://hivedocs.info/news/nodejs/condenser/2020/10/27/6h8fgn-my-new-contributions-to-the-hive-condenser</id><content type="html" xml:base="https://hivedocs.info/news/nodejs/condenser/2020/10/27/6h8fgn-my-new-contributions-to-the-hive-condenser.html">&lt;div id=&quot;content-quochuy-6h8fgn-my-new-contributions-to-the-hive-condenser&quot;&gt;## Recent contributions since last update
### Added support for Spotify podcast shows
https://gitlab.syncad.com/hive/condenser/-/merge_requests/132
https://open.spotify.com/show/6C1Q7ITJKvZVosOdC9M1RM

### Added support for Spotify podcast episodes
https://gitlab.syncad.com/hive/condenser/-/merge_requests/132
https://open.spotify.com/episode/523CYPCmCXdv8uBME5yzZ7?si=l2uwhVjERe21N86grg3ZEg

### Fix invalid iframe HTML tag crashing the page + Fix Youtube player not loading
https://gitlab.syncad.com/hive/condenser/-/merge_requests/133
https://gitlab.syncad.com/hive/condenser/-/merge_requests/134 (thank you @mahdiyari for the tests and contributions)

## Payout beneficiaries
I've added @mahdiyari as beneficiary on this post for helping me with the iframe issue.

---

**Vote for my witness**
[![Support @quochuy Witness.jpg](https://images.hive.blog/DQmecYTZemY8SwU6rrg7awhpNRBsehUp7ivk9RGyZsUUpVw/quochuy-hive-witness.jpg)](https://hivesigner.com/sign/account-witness-vote?witness=quochuy&amp;amp;approve=1)
On Hive, Witnesses are playing the important role of providing a performant and safe network for all of us. You have the power to choose 30 trusty witnesses to package transactions and sign the blocks that will go in the Hive blockchain. [Vote for me via HiveSigner](https://hivesigner.com/sign/account-witness-vote?witness=quochuy&amp;amp;approve=1) to support my work for the community.&lt;/div&gt;
&lt;script crossorigin=&quot;anonymous&quot; integrity=&quot;sha256-4+XzXVhsDmqanXGHaHvgh1gMQKX40OUvDEBTu8JcmNs=&quot; src=&quot;https://code.jquery.com/jquery-3.5.1.slim.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://unpkg.com/steem-content-renderer&quot;&gt;&lt;/script&gt;

&lt;script&gt;
  $(document).ready(function() {
    try {
      const renderer = new SteemContentRenderer.DefaultRenderer({
        baseUrl: &quot;https://hive.blog/&quot;,
        breaks: true,
        skipSanitization: false,
        allowInsecureScriptTags: false,
        addNofollowToLinks: true,
        doNotShowImages: false,
        ipfsPrefix: &quot;&quot;,
        assetsWidth: 640,
        assetsHeight: 480,
        imageProxyFn: (url) =&gt; url,
        usertagUrlFn: (account) =&gt; &quot;/@quochuy&quot;,
        hashtagUrlFn: (hashtag) =&gt; &quot;/6h8fgn-my-new-contributions-to-the-hive-condenser&quot;,
        isLinkSafeFn: (url) =&gt; true,
      });
      
      const inputElem = $('#content-quochuy-6h8fgn-my-new-contributions-to-the-hive-condenser').html();
      const outputElem = $('#content-quochuy-6h8fgn-my-new-contributions-to-the-hive-condenser');
      const output = renderer.render(inputElem);
      
      outputElem.html(output);
    } catch(e) {
      console.log(e);
    }
  });
&lt;/script&gt;

&lt;style&gt;
  #content-quochuy-6h8fgn-my-new-contributions-to-the-hive-condenser {
    padding: 0 3rem;
    color: #444444;
    font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Helvetica, Arial, sans-serif;
    font-size: 16px;
    line-height: 1.8;
    text-shadow: 0 1px 0 #ffffff;
    padding: 0.5rem;
  }
  #content-quochuy-6h8fgn-my-new-contributions-to-the-hive-condenser code {
    background: white;
  }
  #content-quochuy-6h8fgn-my-new-contributions-to-the-hive-condenser a {
    border-bottom: 1px solid #444444; color: #444444; text-decoration: none;
  }
  #content-quochuy-6h8fgn-my-new-contributions-to-the-hive-condenser a:hover {
    border-bottom: 0;
  }
  #content-quochuy-6h8fgn-my-new-contributions-to-the-hive-condenser h1 {
    font-size: 2.2em;
  }
  #content-quochuy-6h8fgn-my-new-contributions-to-the-hive-condenser h2, h3, h4, h5 {
    margin-bottom: 0;
  }
  #content-quochuy-6h8fgn-my-new-contributions-to-the-hive-condenser header small {
    color: #999;
    font-size: 50%;
  }
  #content-quochuy-6h8fgn-my-new-contributions-to-the-hive-condenser img {
    max-width: 100%;
  }
&lt;/style&gt;

&lt;hr /&gt;

&lt;p&gt;
  See: &lt;a href=&quot;https://hive.blog/hive-139531/@quochuy/6h8fgn-my-new-contributions-to-the-hive-condenser&quot;&gt;My new contributions to the Hive Condenser&lt;/a&gt;
  by
  &lt;a href=&quot;https://hive.blog/@quochuy&quot;&gt;@quochuy&lt;/a&gt;
&lt;/p&gt;</content><author><name>quochuy</name></author><summary type="html">## Recent contributions since last update ### Added support for Spotify podcast shows https://gitlab.syncad.com/hive/condenser/-/merge_requests/132 https://open.spotify.com/show/6C1Q7ITJKvZVosOdC9M1RM ### Added support for Spotify podcast episodes https://gitlab.syncad.com/hive/condenser/-/merge_requests/132 https://open.spotify.com/episode/523CYPCmCXdv8uBME5yzZ7?si=l2uwhVjERe21N86grg3ZEg ### Fix invalid iframe HTML tag crashing the page + Fix Youtube player not loading https://gitlab.syncad.com/hive/condenser/-/merge_requests/133 https://gitlab.syncad.com/hive/condenser/-/merge_requests/134 (thank you @mahdiyari for the tests and contributions) ## Payout beneficiaries I've added @mahdiyari as beneficiary on this post for helping me with the iframe issue. --- **Vote for my witness** [![Support @quochuy Witness.jpg](https://images.hive.blog/DQmecYTZemY8SwU6rrg7awhpNRBsehUp7ivk9RGyZsUUpVw/quochuy-hive-witness.jpg)](https://hivesigner.com/sign/account-witness-vote?witness=quochuy&amp;amp;approve=1) On Hive, Witnesses are playing the important role of providing a performant and safe network for all of us. You have the power to choose 30 trusty witnesses to package transactions and sign the blocks that will go in the Hive blockchain. [Vote for me via HiveSigner](https://hivesigner.com/sign/account-witness-vote?witness=quochuy&amp;amp;approve=1) to support my work for the community. See: My new contributions to the Hive Condenser by @quochuy</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://images.hive.blog/DQmecYTZemY8SwU6rrg7awhpNRBsehUp7ivk9RGyZsUUpVw/quochuy-hive-witness.jpg" /><media:content medium="image" url="https://images.hive.blog/DQmecYTZemY8SwU6rrg7awhpNRBsehUp7ivk9RGyZsUUpVw/quochuy-hive-witness.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>