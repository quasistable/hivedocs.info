<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://hivedocs.info/feed.xml" rel="self" type="application/atom+xml" /><link href="https://hivedocs.info/" rel="alternate" type="text/html" /><updated>2021-05-11T09:41:31-07:00</updated><id>https://hivedocs.info/feed.xml</id><title type="html">Hive Chain Documentation</title><subtitle>Your resource for various levels of Hive Documentation.</subtitle><author><name>site curated by: @inertia</name></author><entry><title type="html">HiveSQL Upate - Database maintenance and new Account Recovery Tables</title><link href="https://hivedocs.info/news/sql/database/2021/05/11/hivesql-update-20210511.html" rel="alternate" type="text/html" title="HiveSQL Upate - Database maintenance and new Account Recovery Tables" /><published>2021-05-11T06:48:15-07:00</published><updated>2021-05-11T06:48:15-07:00</updated><id>https://hivedocs.info/news/sql/database/2021/05/11/hivesql-update-20210511</id><content type="html" xml:base="https://hivedocs.info/news/sql/database/2021/05/11/hivesql-update-20210511.html">&lt;div id=&quot;content-arcange-hivesql-update-20210511&quot;&gt;![](https://i.imgur.com/E2xbX8S.png)

As you know, the account recovery process is something I have [worked](/hive-139531/@arcange/hive-account-recovery-major-update-and-new-user-interface) on and [written](/hive-139531/@arcange/account-recovery-about-trusting-and-not-being-trusted) a lot about recently. 

This allowed me to better understand the related transactions recorded in the blockchain. I also noticed that the related tables in HiveSQL were not that well organized (some early days errors)

So I took advantage of the HiveSQL reorganization work that I am currently carrying out to make some modifications.

### What changed?

* The table `TxAccountChangeRecovers` has been renamed to `TxAccountRecoveryChanges`
* The content of the table `TxAccountRecovers` has been split into `TxAccountRecoveryRequests` and `TxAccountRecoveryConfirms`.

Therefore, we now have three new tables available:

**TxAccountRecoveryChanges**

This table contains operations broadcasted to the blockchain when users want to change their Recovery Account.

|Column|Description|
|-|-|
|account_to_recover|the account that wants to change its Recovery Account|
|new_recovery_account|the new Recovery Account|

**TxAccountRecoveryRequests**

This operation is broadcasted to the blockchain by the Account Recovery of an account that has been hacked to initiate the recovery process

|Column|Description|
|-|-|
|recovery_account|username of the Recovery Account|
|account_to_recover|username of the account to recover|
|new_owner_authority|new public owner key provided by the account to recover to the recovery account|

**TxAccountRecoveryConfirms**

This table contains operations broadcasted to the blockchain by the hacked account's owner to confirm the account recovery request sent by its Recovery Account.

|Column|Description|
|-|-|
|account_to_recover|username of the account to recover|
|new_owner_authority|new public owner key provided by the account to recover to the recovery account|
|recent_owner_authority|a public owner key of the account to recover before it was last changed|

## What's next?

This first change should make it easier to find information relating to the account recovery process. 

As indicated at the beginning of this post, I have embarked on a work of reorganizing and improving the database. So expect to see more posts on this subject in the coming days.

## Support

If you have any questions or remarks, support is provided on the [HiveSQL Discord Channel](https://discord.gg/kyEFDfT).

Thank you for reading.

---
**Let's keep HiveSQL free to use - Support its proposals**!
|HiveSQL|HiveBuzz|
|-|-|
|[Vote for the proposal on PeakD](https://peakd.com/me/proposals/138)&lt;br /&gt;[Vote for the proposal on Ecency](https://ecency.com/proposals/138)&lt;br /&gt;[Vote for the proposal using HiveSigner](https://hivesigner.com/sign/update_proposal_votes?proposal_ids=%5B%22138%22%5D&amp;amp;approve=true)|[Vote for the proposal on PeakD](https://peakd.com/me/proposals/147)&lt;br /&gt;[Vote for the proposal on Ecency](https://ecency.com/proposals/147)&lt;br /&gt;[Vote for the proposal using HiveSigner](https://hivesigner.com/sign/update_proposal_votes?proposal_ids=%5B%22147%22%5D&amp;amp;approve=true)|

---
&lt;center&gt;

### Check out my apps and services
&lt;a href=&quot;/hive/@hive.engage/stay-connected-with-your-hive-audience-and-catch-attention&quot;&gt;&lt;img src=&quot;https://i.imgur.com/GiNJqlm.png&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;/@hivebuzz&quot;&gt;&lt;img src=&quot;https://i.imgur.com/B4UTun2.png&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;/@hivesql&quot;&gt;&lt;img src=&quot;https://i.imgur.com/EPN8RW6.png&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;/hive/@arcange/introducing-hive-account-recovery&quot;&gt;&lt;img src=&quot;https://i.imgur.com/6TWeW7V.png&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;/@hive.autoclaim&quot;&gt;&lt;img src=&quot;https://i.imgur.com/ih2pEOw.png&quot; /&gt;&lt;/a&gt;&lt;/center&gt;
&lt;center&gt;

### [Vote for me as a witness ![](https://i.imgur.com/2bi4SnT.png)](https://hivesigner.com/sign/account-witness-vote?witness=arcange&amp;amp;approve=1)
&lt;/center&gt;&lt;/div&gt;
&lt;script crossorigin=&quot;anonymous&quot; integrity=&quot;sha256-4+XzXVhsDmqanXGHaHvgh1gMQKX40OUvDEBTu8JcmNs=&quot; src=&quot;https://code.jquery.com/jquery-3.5.1.slim.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://unpkg.com/steem-content-renderer&quot;&gt;&lt;/script&gt;

&lt;!-- &lt;script src=&quot;https://cdn.jsdelivr.net/npm/hive-content-renderer/dist/hive-content-renderer.min.js&quot;&gt;&lt;/script&gt; --&gt;
&lt;script&gt;
  $(document).ready(function() {
    try {
      const renderer = new SteemContentRenderer.DefaultRenderer({
      // const renderer = new HiveContentRenderer({
        baseUrl: &quot;https://hive.blog/&quot;,
        breaks: true,
        skipSanitization: false,
        allowInsecureScriptTags: false,
        addNofollowToLinks: true,
        doNotShowImages: false,
        ipfsPrefix: &quot;&quot;,
        assetsWidth: 640,
        assetsHeight: 480,
        imageProxyFn: (url) =&gt; url,
        usertagUrlFn: (account) =&gt; &quot;/@arcange&quot;,
        hashtagUrlFn: (hashtag) =&gt; &quot;/hivesql-update-20210511&quot;,
        isLinkSafeFn: (url) =&gt; true,
      });
      
      const inputElem = $('#content-arcange-hivesql-update-20210511').html();
      const outputElem = $('#content-arcange-hivesql-update-20210511');
      const output = renderer.render(inputElem);
      
      outputElem.html(output);
    } catch(e) {
      console.log(e);
    }
  });
&lt;/script&gt;

&lt;style&gt;
  #content-arcange-hivesql-update-20210511 {
    padding: 0 3rem;
    color: #444444;
    font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Helvetica, Arial, sans-serif;
    font-size: 16px;
    line-height: 1.8;
    text-shadow: 0 1px 0 #ffffff;
    padding: 0.5rem;
  }
  #content-arcange-hivesql-update-20210511 code {
    background: white;
  }
  #content-arcange-hivesql-update-20210511 a {
    border-bottom: 1px solid #444444; color: #444444; text-decoration: none;
  }
  #content-arcange-hivesql-update-20210511 a:hover {
    border-bottom: 0;
  }
  #content-arcange-hivesql-update-20210511 h1 {
    font-size: 2.2em;
  }
  #content-arcange-hivesql-update-20210511 h2, h3, h4, h5 {
    margin-bottom: 0;
  }
  #content-arcange-hivesql-update-20210511 header small {
    color: #999;
    font-size: 50%;
  }
  #content-arcange-hivesql-update-20210511 img {
    max-width: 100%;
  }
&lt;/style&gt;

&lt;hr /&gt;

&lt;p&gt;
  See: &lt;a href=&quot;https://peakd.com/hive-139531/@arcange/hivesql-update-20210511&quot;&gt;HiveSQL Upate - Database maintenance and new Account Recovery Tables&lt;/a&gt;
  by
  &lt;a href=&quot;https://hive.blog/@arcange&quot;&gt;@arcange&lt;/a&gt;
&lt;/p&gt;</content><author><name>arcange</name></author><category term="news" /><category term="sql" /><category term="database" /><summary type="html">![](https://i.imgur.com/E2xbX8S.png) As you know, the account recovery process is something I have [worked](/hive-139531/@arcange/hive-account-recovery-major-update-and-new-user-interface) on and [written](/hive-139531/@arcange/account-recovery-about-trusting-and-not-being-trusted) a lot about recently. This allowed me to better understand the related transactions recorded in the blockchain. I also noticed that the related tables in HiveSQL were not that well organized (some early days errors) So I took advantage of the HiveSQL reorganization work that I am currently carrying out to make some modifications. ### What changed? * The table `TxAccountChangeRecovers` has been renamed to `TxAccountRecoveryChanges` * The content of the table `TxAccountRecovers` has been split into `TxAccountRecoveryRequests` and `TxAccountRecoveryConfirms`. Therefore, we now have three new tables available: **TxAccountRecoveryChanges** This table contains operations broadcasted to the blockchain when users want to change their Recovery Account. |Column|Description| |-|-| |account_to_recover|the account that wants to change its Recovery Account| |new_recovery_account|the new Recovery Account| **TxAccountRecoveryRequests** This operation is broadcasted to the blockchain by the Account Recovery of an account that has been hacked to initiate the recovery process |Column|Description| |-|-| |recovery_account|username of the Recovery Account| |account_to_recover|username of the account to recover| |new_owner_authority|new public owner key provided by the account to recover to the recovery account| **TxAccountRecoveryConfirms** This table contains operations broadcasted to the blockchain by the hacked account's owner to confirm the account recovery request sent by its Recovery Account. |Column|Description| |-|-| |account_to_recover|username of the account to recover| |new_owner_authority|new public owner key provided by the account to recover to the recovery account| |recent_owner_authority|a public owner key of the account to recover before it was last changed| ## What's next? This first change should make it easier to find information relating to the account recovery process. As indicated at the beginning of this post, I have embarked on a work of reorganizing and improving the database. So expect to see more posts on this subject in the coming days. ## Support If you have any questions or remarks, support is provided on the [HiveSQL Discord Channel](https://discord.gg/kyEFDfT). Thank you for reading. --- **Let's keep HiveSQL free to use - Support its proposals**! |HiveSQL|HiveBuzz| |-|-| |[Vote for the proposal on PeakD](https://peakd.com/me/proposals/138)[Vote for the proposal on Ecency](https://ecency.com/proposals/138)[Vote for the proposal using HiveSigner](https://hivesigner.com/sign/update_proposal_votes?proposal_ids=%5B%22138%22%5D&amp;amp;approve=true)|[Vote for the proposal on PeakD](https://peakd.com/me/proposals/147)[Vote for the proposal on Ecency](https://ecency.com/proposals/147)[Vote for the proposal using HiveSigner](https://hivesigner.com/sign/update_proposal_votes?proposal_ids=%5B%22147%22%5D&amp;amp;approve=true)| --- ### Check out my apps and services ### [Vote for me as a witness ![](https://i.imgur.com/2bi4SnT.png)](https://hivesigner.com/sign/account-witness-vote?witness=arcange&amp;amp;approve=1) See: HiveSQL Upate - Database maintenance and new Account Recovery Tables by @arcange</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://i.imgur.com/E2xbX8S.png" /><media:content medium="image" url="https://i.imgur.com/E2xbX8S.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">11th update of 2021 on BlockTrades work on Hive software</title><link href="https://hivedocs.info/news/core/development/2021/05/10/11th-update-of-2021-on-blocktrades-work-on-hive-software.html" rel="alternate" type="text/html" title="11th update of 2021 on BlockTrades work on Hive software" /><published>2021-05-10T14:27:30-07:00</published><updated>2021-05-10T14:27:30-07:00</updated><id>https://hivedocs.info/news/core/development/2021/05/10/11th-update-of-2021-on-blocktrades-work-on-hive-software</id><content type="html" xml:base="https://hivedocs.info/news/core/development/2021/05/10/11th-update-of-2021-on-blocktrades-work-on-hive-software.html">&lt;div id=&quot;content-blocktrades-11th-update-of-2021-on-blocktrades-work-on-hive-software&quot;&gt;![blocktrades update.png](https://images.hive.blog/DQmSihw8Kz4U7TuCQa98DDdCzqbqPFRumuVWAbareiYZW1Z/blocktrades%20update.png)

Below is a list of Hive-related programming issues worked on by the BlockTrades team during the last week:

# Hived work (blockchain node software)

Last week we’ve been focused on testing hived in preparation for a final feature freeze and fixing bugs as we find them. So far most of the bugs we’ve found are very old bugs that have been around for many years.

We fixed two bugs we found and discussed in last weeks report:
1. Better warnings and less cpu-loading when node gets no peers at startup
https://gitlab.syncad.com/hive/hive/-/merge_requests/220
2. Fix to beem to fix update_proposals test
https://gitlab.syncad.com/hive/beem/-/merge_requests/6

During benchmarking of hivemind sync on two similarly configured systems, we found one system was syncing much slower than the other one. After a fair amount of debugging effort, we ultimately were able to trace this back to intermittent errors on one of the disks in the raid array where hived stored it’s data, but more interestingly, this also exposed an error that was introduced over 5 years ago (ie. when this code was in the BitShares graphene repo).

This bug caused incoming blocks that are not yet linkable to the node’s head block to be discarded instead of being kept for future usage, once intervening blocks were received.

On normally functioning hardware, this was no big deal, but in the case where disk IO performance was strained (in this case due to intermittent disk errors), this error led to the node often dropping peers and generally straining to keep in sync with the rest of the p2p network. 

Note that this is a practical real world problem, not just a theoretical one, as we believe this problem led to one commonly used exchange having problems maintaining their Hive wallet open for deposits. At the time, the problem was resolved by convincing the exchange to move their Hive wallet to another computer, but it’s obviously better to have Hive nodes more resistant to such issues.

We fixed this bug in these two merge requests:
https://gitlab.syncad.com/hive/hive/-/merge_requests/226
https://gitlab.syncad.com/hive/hive/-/merge_requests/227

As part of the above work, we had to dive pretty deep into profiling the performance of hived when processing transactions and blocks, and we identified several places where we would like to improve performance in the future, after the hard fork is completed. The majority of such changes can be released at any time, as they don’t require consensus changes.

To facilitate our profiling work, we also made changes to how timestamps are represented in hived logs. By default, timestamps are now stored as UTC times with milliseconds resolution in files and seconds resolution on the console, with the option to store the timestamps with microseconds resolution when needed for profiling: https://gitlab.syncad.com/hive/hive/-/merge_requests/229

We added a script that automatically code-generates the get_config api call, so that when new parameters are added to the blockchain, these parameters are automatically added to the output of this call. This script is executed by CMAKE at build time. https://gitlab.syncad.com/hive/hive/-/merge_requests/211

We fixed several longstanding errors with the account history plugin:
Under rare circumstances, the account history plugin could include duplicate records of an operation in an account’s history as a result of microforks because the notification of last irreversible block was sent to the plugin too early:
https://gitlab.syncad.com/hive/hive/-/merge_requests/205
The wrong number of operations could be returned by get_account_history because of miscounting of effective_comment_vote_operation:
https://gitlab.syncad.com/hive/hive/-/merge_requests/225

We also reviewed and merged in @howo’s changes for recurrent transfers today:
https://gitlab.syncad.com/hive/hive/-/merge_requests/150

Finally, we reviewed and approved @howo’s proposed implementation for resource credit (RC) delegations: https://gitlab.syncad.com/hive/hive/-/issues/152 We will be able to incorporate this change after the hardfork, as it doesn’t require any consensus changes.

# Hivemind (2nd layer applications + social media middleware)

Our work in hivemind last week has also revolved around testing performance and fixing bugs.

We ran full hivemind syncs to test the new code that deep cleans the dictionaries to cut a few gigabytes of memory from hivemind’s memory footprint. The new code worked well, and without any apparent performance problems, but we’ll need to repeat the tests again to obtain final performance numbers, as we got distracted by the hived performance issue we found during this testing (discussed earlier in hived section of this post).

We made several fixes to hivemind:
https://gitlab.syncad.com/hive/hivemind/-/merge_requests/493
https://gitlab.syncad.com/hive/hivemind/-/merge_requests/494
https://gitlab.syncad.com/hive/hivemind/-/merge_requests/496

We found another issue with hivemind that is still under investigation, so we’re not quite ready to make a new release candidate for hivemind yet, but I’m hopeful we’ll still be able to do so by the end of this week as originally planned. The timeframe will be tight, as we still need to merge in several of the above changes to the develop branch and do real-world performance testing on api.hive.blog.

# Modular hivemind (framework for hive applications)

During documentation and discussion of the fork resolution code for hive using SQL shadow tables, some concerns were raised about issues where a modular-Hive based application could hold a transaction open, preventing the fork-resolving code from swapping to a new fork, so we’re looking at various ways to manage this issue.

We didn’t have time to make the changes for the sql serializer last week due to the time spent fixing the various issues discussed in this post, but we will likely complete that work in the coming week. Then we’ll be able to do a full performance test of the sql serializer in combination with a full sync of hivemind.

# Condenser (code base for https://hive.blog)

We incorporated several fixes to condenser and deployed them on hive.blog:
Search fix by @quochuy: https://gitlab.syncad.com/hive/condenser/-/merge_requests/246
Iframe fix by @mahdiyari: https://gitlab.syncad.com/hive/condenser/-/merge_requests/249
Fix for 3speak.tv domain by @jes2850: https://gitlab.syncad.com/hive/condenser/-/merge_requests/251
Api node selection fix by @jes2850: https://gitlab.syncad.com/hive/condenser/-/merge_requests/254

# Hived testnet

We’re planning to launch an updated testnet on Wednesday with the latest fixes to hived discussed above. We’ll be tagging this version of hived as an official release candidate.

That will be followed by the launch of an API node configured to draw data from the testnet (probably on Thursday). This API node will allow Hive applications to begin adding code changes to support new features added by the hardfork, such as vote expiration reporting.

# Planned date for hardfork 25

Based on our testing experience so far, I’m currently projecting the hardfork will be in the latter part of June (about a week or so past my earlier “best case” projection).

Assuming no major problems are discovered in the coming week with the release candidate, we’ll next begin notifying exchanges in order to give them 30 days notice which should be plenty of time to update their wallets before the hardfork.&lt;/div&gt;
&lt;script crossorigin=&quot;anonymous&quot; integrity=&quot;sha256-4+XzXVhsDmqanXGHaHvgh1gMQKX40OUvDEBTu8JcmNs=&quot; src=&quot;https://code.jquery.com/jquery-3.5.1.slim.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://unpkg.com/steem-content-renderer&quot;&gt;&lt;/script&gt;

&lt;!-- &lt;script src=&quot;https://cdn.jsdelivr.net/npm/hive-content-renderer/dist/hive-content-renderer.min.js&quot;&gt;&lt;/script&gt; --&gt;
&lt;script&gt;
  $(document).ready(function() {
    try {
      const renderer = new SteemContentRenderer.DefaultRenderer({
      // const renderer = new HiveContentRenderer({
        baseUrl: &quot;https://hive.blog/&quot;,
        breaks: true,
        skipSanitization: false,
        allowInsecureScriptTags: false,
        addNofollowToLinks: true,
        doNotShowImages: false,
        ipfsPrefix: &quot;&quot;,
        assetsWidth: 640,
        assetsHeight: 480,
        imageProxyFn: (url) =&gt; url,
        usertagUrlFn: (account) =&gt; &quot;/@blocktrades&quot;,
        hashtagUrlFn: (hashtag) =&gt; &quot;/11th-update-of-2021-on-blocktrades-work-on-hive-software&quot;,
        isLinkSafeFn: (url) =&gt; true,
      });
      
      const inputElem = $('#content-blocktrades-11th-update-of-2021-on-blocktrades-work-on-hive-software').html();
      const outputElem = $('#content-blocktrades-11th-update-of-2021-on-blocktrades-work-on-hive-software');
      const output = renderer.render(inputElem);
      
      outputElem.html(output);
    } catch(e) {
      console.log(e);
    }
  });
&lt;/script&gt;

&lt;style&gt;
  #content-blocktrades-11th-update-of-2021-on-blocktrades-work-on-hive-software {
    padding: 0 3rem;
    color: #444444;
    font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Helvetica, Arial, sans-serif;
    font-size: 16px;
    line-height: 1.8;
    text-shadow: 0 1px 0 #ffffff;
    padding: 0.5rem;
  }
  #content-blocktrades-11th-update-of-2021-on-blocktrades-work-on-hive-software code {
    background: white;
  }
  #content-blocktrades-11th-update-of-2021-on-blocktrades-work-on-hive-software a {
    border-bottom: 1px solid #444444; color: #444444; text-decoration: none;
  }
  #content-blocktrades-11th-update-of-2021-on-blocktrades-work-on-hive-software a:hover {
    border-bottom: 0;
  }
  #content-blocktrades-11th-update-of-2021-on-blocktrades-work-on-hive-software h1 {
    font-size: 2.2em;
  }
  #content-blocktrades-11th-update-of-2021-on-blocktrades-work-on-hive-software h2, h3, h4, h5 {
    margin-bottom: 0;
  }
  #content-blocktrades-11th-update-of-2021-on-blocktrades-work-on-hive-software header small {
    color: #999;
    font-size: 50%;
  }
  #content-blocktrades-11th-update-of-2021-on-blocktrades-work-on-hive-software img {
    max-width: 100%;
  }
&lt;/style&gt;

&lt;hr /&gt;

&lt;p&gt;
  See: &lt;a href=&quot;https://hive.blog/hive-139531/@blocktrades/11th-update-of-2021-on-blocktrades-work-on-hive-software&quot;&gt;11th update of 2021 on BlockTrades work on Hive software&lt;/a&gt;
  by
  &lt;a href=&quot;https://hive.blog/@blocktrades&quot;&gt;@blocktrades&lt;/a&gt;
&lt;/p&gt;</content><author><name>blocktrades</name></author><category term="news" /><category term="core" /><category term="development" /><summary type="html">![blocktrades update.png](https://images.hive.blog/DQmSihw8Kz4U7TuCQa98DDdCzqbqPFRumuVWAbareiYZW1Z/blocktrades%20update.png) Below is a list of Hive-related programming issues worked on by the BlockTrades team during the last week: # Hived work (blockchain node software) Last week we’ve been focused on testing hived in preparation for a final feature freeze and fixing bugs as we find them. So far most of the bugs we’ve found are very old bugs that have been around for many years. We fixed two bugs we found and discussed in last weeks report: 1. Better warnings and less cpu-loading when node gets no peers at startup https://gitlab.syncad.com/hive/hive/-/merge_requests/220 2. Fix to beem to fix update_proposals test https://gitlab.syncad.com/hive/beem/-/merge_requests/6 During benchmarking of hivemind sync on two similarly configured systems, we found one system was syncing much slower than the other one. After a fair amount of debugging effort, we ultimately were able to trace this back to intermittent errors on one of the disks in the raid array where hived stored it’s data, but more interestingly, this also exposed an error that was introduced over 5 years ago (ie. when this code was in the BitShares graphene repo). This bug caused incoming blocks that are not yet linkable to the node’s head block to be discarded instead of being kept for future usage, once intervening blocks were received. On normally functioning hardware, this was no big deal, but in the case where disk IO performance was strained (in this case due to intermittent disk errors), this error led to the node often dropping peers and generally straining to keep in sync with the rest of the p2p network. Note that this is a practical real world problem, not just a theoretical one, as we believe this problem led to one commonly used exchange having problems maintaining their Hive wallet open for deposits. At the time, the problem was resolved by convincing the exchange to move their Hive wallet to another computer, but it’s obviously better to have Hive nodes more resistant to such issues. We fixed this bug in these two merge requests: https://gitlab.syncad.com/hive/hive/-/merge_requests/226 https://gitlab.syncad.com/hive/hive/-/merge_requests/227 As part of the above work, we had to dive pretty deep into profiling the performance of hived when processing transactions and blocks, and we identified several places where we would like to improve performance in the future, after the hard fork is completed. The majority of such changes can be released at any time, as they don’t require consensus changes. To facilitate our profiling work, we also made changes to how timestamps are represented in hived logs. By default, timestamps are now stored as UTC times with milliseconds resolution in files and seconds resolution on the console, with the option to store the timestamps with microseconds resolution when needed for profiling: https://gitlab.syncad.com/hive/hive/-/merge_requests/229 We added a script that automatically code-generates the get_config api call, so that when new parameters are added to the blockchain, these parameters are automatically added to the output of this call. This script is executed by CMAKE at build time. https://gitlab.syncad.com/hive/hive/-/merge_requests/211 We fixed several longstanding errors with the account history plugin: Under rare circumstances, the account history plugin could include duplicate records of an operation in an account’s history as a result of microforks because the notification of last irreversible block was sent to the plugin too early: https://gitlab.syncad.com/hive/hive/-/merge_requests/205 The wrong number of operations could be returned by get_account_history because of miscounting of effective_comment_vote_operation: https://gitlab.syncad.com/hive/hive/-/merge_requests/225 We also reviewed and merged in @howo’s changes for recurrent transfers today: https://gitlab.syncad.com/hive/hive/-/merge_requests/150 Finally, we reviewed and approved @howo’s proposed implementation for resource credit (RC) delegations: https://gitlab.syncad.com/hive/hive/-/issues/152 We will be able to incorporate this change after the hardfork, as it doesn’t require any consensus changes. # Hivemind (2nd layer applications + social media middleware) Our work in hivemind last week has also revolved around testing performance and fixing bugs. We ran full hivemind syncs to test the new code that deep cleans the dictionaries to cut a few gigabytes of memory from hivemind’s memory footprint. The new code worked well, and without any apparent performance problems, but we’ll need to repeat the tests again to obtain final performance numbers, as we got distracted by the hived performance issue we found during this testing (discussed earlier in hived section of this post). We made several fixes to hivemind: https://gitlab.syncad.com/hive/hivemind/-/merge_requests/493 https://gitlab.syncad.com/hive/hivemind/-/merge_requests/494 https://gitlab.syncad.com/hive/hivemind/-/merge_requests/496 We found another issue with hivemind that is still under investigation, so we’re not quite ready to make a new release candidate for hivemind yet, but I’m hopeful we’ll still be able to do so by the end of this week as originally planned. The timeframe will be tight, as we still need to merge in several of the above changes to the develop branch and do real-world performance testing on api.hive.blog. # Modular hivemind (framework for hive applications) During documentation and discussion of the fork resolution code for hive using SQL shadow tables, some concerns were raised about issues where a modular-Hive based application could hold a transaction open, preventing the fork-resolving code from swapping to a new fork, so we’re looking at various ways to manage this issue. We didn’t have time to make the changes for the sql serializer last week due to the time spent fixing the various issues discussed in this post, but we will likely complete that work in the coming week. Then we’ll be able to do a full performance test of the sql serializer in combination with a full sync of hivemind. # Condenser (code base for https://hive.blog) We incorporated several fixes to condenser and deployed them on hive.blog: Search fix by @quochuy: https://gitlab.syncad.com/hive/condenser/-/merge_requests/246 Iframe fix by @mahdiyari: https://gitlab.syncad.com/hive/condenser/-/merge_requests/249 Fix for 3speak.tv domain by @jes2850: https://gitlab.syncad.com/hive/condenser/-/merge_requests/251 Api node selection fix by @jes2850: https://gitlab.syncad.com/hive/condenser/-/merge_requests/254 # Hived testnet We’re planning to launch an updated testnet on Wednesday with the latest fixes to hived discussed above. We’ll be tagging this version of hived as an official release candidate. That will be followed by the launch of an API node configured to draw data from the testnet (probably on Thursday). This API node will allow Hive applications to begin adding code changes to support new features added by the hardfork, such as vote expiration reporting. # Planned date for hardfork 25 Based on our testing experience so far, I’m currently projecting the hardfork will be in the latter part of June (about a week or so past my earlier “best case” projection). Assuming no major problems are discovered in the coming week with the release candidate, we’ll next begin notifying exchanges in order to give them 30 days notice which should be plenty of time to update their wallets before the hardfork. See: 11th update of 2021 on BlockTrades work on Hive software by @blocktrades</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://images.hive.blog/DQmSihw8Kz4U7TuCQa98DDdCzqbqPFRumuVWAbareiYZW1Z/blocktrades%20update.png" /><media:content medium="image" url="https://images.hive.blog/DQmSihw8Kz4U7TuCQa98DDdCzqbqPFRumuVWAbareiYZW1Z/blocktrades%20update.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Hive core developer meeting #23</title><link href="https://hivedocs.info/news/core/development/2021/05/10/hive-core-developer-meeting-23.html" rel="alternate" type="text/html" title="Hive core developer meeting #23" /><published>2021-05-10T11:39:12-07:00</published><updated>2021-05-10T11:39:12-07:00</updated><id>https://hivedocs.info/news/core/development/2021/05/10/hive-core-developer-meeting-23</id><content type="html" xml:base="https://hivedocs.info/news/core/development/2021/05/10/hive-core-developer-meeting-23.html">&lt;div id=&quot;content-howo-hive-core-developer-meeting-23&quot;&gt;https://www.youtube.com/watch?v=KS4yRaZtejE

If you're listening to the whole thing, please post timestamps as a comment, the first one to do so (and correctly) will get a 100% upvote from me :)

meeting points:

### Dev sync:

as usual listen to this part

### testnet-based testing (involvement of Hive apps as testers)

We are finally done with all the changes and expect to code freeze and launch the final testnet by wednesday

### API v2, coinbase's rosetta api as a new api plugin or as a separate service ? (https://www.rosetta-api.org)

Some discussion regarding whether we should implement this as a plugin in hived or as a wrapper around it, we are leaning towards a wrapper service.

### Big feature contribution process for independent devs (review an Hive improvement proposal before starting to code, assess performance impacts etc, goal being to reduce re-doing the work and reduce the amount of review 

I proposed a format where devs write a hive improvement proposal with specs (similar to this: https://gitlab.syncad.com/hive/hive/-/issues/152) before starting to work in order to reduce the amount of back and forth and fixes needed when for instance the spec is not fully agreed upon at the beginning.

the conversation then derives into basically how we would need to get a &quot;how to contribute&quot; guide with the expectations in regards to the tests, the performance etc.

### Direct RC delegation spec (hive#152) and RC pools or maybe a mix of the two:

We have decided to implement direct RC delegations using a posting auth, if you don't know what I'm talking about you can get more infos in this post: https://peakd.com/rc/@howo/direct-rc-delegations-vs-rc-pools-and-tentative-direct-rc-delegations-spec

### from @arcange some discussions on the implementation on the api v2

Quite a few discussions but ultimately it's deemed too early to work on it. It's something that will have to wait 1/2 months when we are past hf25.


&lt;/div&gt;
&lt;script crossorigin=&quot;anonymous&quot; integrity=&quot;sha256-4+XzXVhsDmqanXGHaHvgh1gMQKX40OUvDEBTu8JcmNs=&quot; src=&quot;https://code.jquery.com/jquery-3.5.1.slim.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://unpkg.com/steem-content-renderer&quot;&gt;&lt;/script&gt;

&lt;!-- &lt;script src=&quot;https://cdn.jsdelivr.net/npm/hive-content-renderer/dist/hive-content-renderer.min.js&quot;&gt;&lt;/script&gt; --&gt;
&lt;script&gt;
  $(document).ready(function() {
    try {
      const renderer = new SteemContentRenderer.DefaultRenderer({
      // const renderer = new HiveContentRenderer({
        baseUrl: &quot;https://hive.blog/&quot;,
        breaks: true,
        skipSanitization: false,
        allowInsecureScriptTags: false,
        addNofollowToLinks: true,
        doNotShowImages: false,
        ipfsPrefix: &quot;&quot;,
        assetsWidth: 640,
        assetsHeight: 480,
        imageProxyFn: (url) =&gt; url,
        usertagUrlFn: (account) =&gt; &quot;/@howo&quot;,
        hashtagUrlFn: (hashtag) =&gt; &quot;/hive-core-developer-meeting-23&quot;,
        isLinkSafeFn: (url) =&gt; true,
      });
      
      const inputElem = $('#content-howo-hive-core-developer-meeting-23').html();
      const outputElem = $('#content-howo-hive-core-developer-meeting-23');
      const output = renderer.render(inputElem);
      
      outputElem.html(output);
    } catch(e) {
      console.log(e);
    }
  });
&lt;/script&gt;

&lt;style&gt;
  #content-howo-hive-core-developer-meeting-23 {
    padding: 0 3rem;
    color: #444444;
    font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Helvetica, Arial, sans-serif;
    font-size: 16px;
    line-height: 1.8;
    text-shadow: 0 1px 0 #ffffff;
    padding: 0.5rem;
  }
  #content-howo-hive-core-developer-meeting-23 code {
    background: white;
  }
  #content-howo-hive-core-developer-meeting-23 a {
    border-bottom: 1px solid #444444; color: #444444; text-decoration: none;
  }
  #content-howo-hive-core-developer-meeting-23 a:hover {
    border-bottom: 0;
  }
  #content-howo-hive-core-developer-meeting-23 h1 {
    font-size: 2.2em;
  }
  #content-howo-hive-core-developer-meeting-23 h2, h3, h4, h5 {
    margin-bottom: 0;
  }
  #content-howo-hive-core-developer-meeting-23 header small {
    color: #999;
    font-size: 50%;
  }
  #content-howo-hive-core-developer-meeting-23 img {
    max-width: 100%;
  }
&lt;/style&gt;

&lt;hr /&gt;

&lt;p&gt;
  See: &lt;a href=&quot;https://peakd.com/meeting/@howo/hive-core-developer-meeting-23&quot;&gt;Hive core developer meeting #23&lt;/a&gt;
  by
  &lt;a href=&quot;https://hive.blog/@howo&quot;&gt;@howo&lt;/a&gt;
&lt;/p&gt;</content><author><name>howo</name></author><category term="news" /><category term="core" /><category term="development" /><summary type="html">https://www.youtube.com/watch?v=KS4yRaZtejE If you're listening to the whole thing, please post timestamps as a comment, the first one to do so (and correctly) will get a 100% upvote from me :) meeting points: ### Dev sync: as usual listen to this part ### testnet-based testing (involvement of Hive apps as testers) We are finally done with all the changes and expect to code freeze and launch the final testnet by wednesday ### API v2, coinbase's rosetta api as a new api plugin or as a separate service ? (https://www.rosetta-api.org) Some discussion regarding whether we should implement this as a plugin in hived or as a wrapper around it, we are leaning towards a wrapper service. ### Big feature contribution process for independent devs (review an Hive improvement proposal before starting to code, assess performance impacts etc, goal being to reduce re-doing the work and reduce the amount of review I proposed a format where devs write a hive improvement proposal with specs (similar to this: https://gitlab.syncad.com/hive/hive/-/issues/152) before starting to work in order to reduce the amount of back and forth and fixes needed when for instance the spec is not fully agreed upon at the beginning. the conversation then derives into basically how we would need to get a &quot;how to contribute&quot; guide with the expectations in regards to the tests, the performance etc. ### Direct RC delegation spec (hive#152) and RC pools or maybe a mix of the two: We have decided to implement direct RC delegations using a posting auth, if you don't know what I'm talking about you can get more infos in this post: https://peakd.com/rc/@howo/direct-rc-delegations-vs-rc-pools-and-tentative-direct-rc-delegations-spec ### from @arcange some discussions on the implementation on the api v2 Quite a few discussions but ultimately it's deemed too early to work on it. It's something that will have to wait 1/2 months when we are past hf25. See: Hive core developer meeting #23 by @howo</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://hivedocs.info/assets/images/favicon.png" /><media:content medium="image" url="https://hivedocs.info/assets/images/favicon.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">HiveSQL Upate - New Blacklists and Mutes tables</title><link href="https://hivedocs.info/news/sql/database/2021/05/08/hivesql-upate-20210508.html" rel="alternate" type="text/html" title="HiveSQL Upate - New Blacklists and Mutes tables" /><published>2021-05-08T05:20:33-07:00</published><updated>2021-05-08T05:20:33-07:00</updated><id>https://hivedocs.info/news/sql/database/2021/05/08/hivesql-upate-20210508</id><content type="html" xml:base="https://hivedocs.info/news/sql/database/2021/05/08/hivesql-upate-20210508.html">&lt;div id=&quot;content-arcange-hivesql-upate-20210508&quot;&gt;![](https://i.imgur.com/FE9D32t.png)

The concept of [decentralized blacklists and mutes lists](/hive-102930/@blocktrades/hive-improvement-proposal-decentralize-blacklists-on-hive) was introduced by @blocktrades some time ago. These lists are recorded in the blockchain as `custom_json` operations, which makes them hard to track given the large number of such operations issued each day.

Therefore, I created additional tables to make life easier for those who would be interested in such information.

### What's new?

Four new &quot;state&quot; tables have been added to the database. State tables do not store transactions but reflect the result of operations recorded in the blockchain.

**Blacklists**

Blacklists allow anyone to construct a set of blacklisted users and allow each user to use one or more blacklists created by others.

Blacklisting an account implies the blacklister thinks the account is doing something wrong, and is intended to be used as a way to warn others that he thinks they should be careful when dealing with that account.

|Column|Description|
|-|-|
|blacklister|account owning the blacklist|
|blasklisted|account being blacklisted|

**BlacklistsFollows**

This table contains a list of accounts following other account's blacklist.

|Column|Description|
|-|-|
|account|account following a blacklist|
|blacklist|account who created a blacklist|

**Mutes**

Mutes lists allow anyone to construct a set of users and allow each user to use one or more mute lists created by others.

Muting an account means one doesn’t want to see the account’s posts and comments. Most frontends honor muting by preventing those posts from being displayed when its users view the site.

|Column|Description|
|-|-|
|muter|account owning the mutes list|
|muted|account being muted|

**MutesFollows**

This table contains a list of account following other account's mutes list

|Column|Description|
|-|-|
|account|account following a mutes list|
|mutelist|account who created a mutes list|

### What else?

**Support for reblogs deletion**

Hivemind has recently added support for undoing Reblogs.

This allows users to remove old reblogs they don't want to appear on their feed or posts they mistakenly reblogged.

HiveSQL will also manage such operations and remove related entries from its `Reblogs` state table.

## Support

If you have any questions or remarks, support is provided on the [HiveSQL Discord Channel](https://discord.gg/kyEFDfT).

Thank you for reading.

---
**Let's keep HiveSQL free to use - Support its proposals**!
|HiveSQL|HiveBuzz|
|-|-|
|[Vote for the proposal on PeakD](https://peakd.com/me/proposals/138)&lt;br /&gt;[Vote for the proposal on Ecency](https://ecency.com/proposals/138)&lt;br /&gt;[Vote for the proposal using HiveSigner](https://hivesigner.com/sign/update_proposal_votes?proposal_ids=%5B%22138%22%5D&amp;amp;approve=true)|[Vote for the proposal on PeakD](https://peakd.com/me/proposals/147)&lt;br /&gt;[Vote for the proposal on Ecency](https://ecency.com/proposals/147)&lt;br /&gt;[Vote for the proposal using HiveSigner](https://hivesigner.com/sign/update_proposal_votes?proposal_ids=%5B%22147%22%5D&amp;amp;approve=true)|

---
&lt;center&gt;

### Check out my apps and services
&lt;a href=&quot;/hive/@hive.engage/stay-connected-with-your-hive-audience-and-catch-attention&quot;&gt;&lt;img src=&quot;https://i.imgur.com/GiNJqlm.png&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;/@hivebuzz&quot;&gt;&lt;img src=&quot;https://i.imgur.com/B4UTun2.png&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;/@hivesql&quot;&gt;&lt;img src=&quot;https://i.imgur.com/EPN8RW6.png&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;/hive/@arcange/introducing-hive-account-recovery&quot;&gt;&lt;img src=&quot;https://i.imgur.com/6TWeW7V.png&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;/@hive.autoclaim&quot;&gt;&lt;img src=&quot;https://i.imgur.com/ih2pEOw.png&quot; /&gt;&lt;/a&gt;&lt;/center&gt;
&lt;center&gt;

### [Vote for me as a witness ![](https://i.imgur.com/2bi4SnT.png)](https://hivesigner.com/sign/account-witness-vote?witness=arcange&amp;amp;approve=1)&amp;lt;/div&amp;gt;
&lt;script crossorigin=&quot;anonymous&quot; integrity=&quot;sha256-4+XzXVhsDmqanXGHaHvgh1gMQKX40OUvDEBTu8JcmNs=&quot; src=&quot;https://code.jquery.com/jquery-3.5.1.slim.min.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;https://unpkg.com/steem-content-renderer&quot;&gt;&lt;/script&gt;
&lt;!-- &lt;script src=&quot;https://cdn.jsdelivr.net/npm/hive-content-renderer/dist/hive-content-renderer.min.js&quot;&gt;&lt;/script&gt; --&gt;
&lt;script&gt;
  $(document).ready(function() {
    try {
      const renderer = new SteemContentRenderer.DefaultRenderer({
      // const renderer = new HiveContentRenderer({
        baseUrl: &quot;https://hive.blog/&quot;,
        breaks: true,
        skipSanitization: false,
        allowInsecureScriptTags: false,
        addNofollowToLinks: true,
        doNotShowImages: false,
        ipfsPrefix: &quot;&quot;,
        assetsWidth: 640,
        assetsHeight: 480,
        imageProxyFn: (url) =&gt; url,
        usertagUrlFn: (account) =&gt; &quot;/@arcange&quot;,
        hashtagUrlFn: (hashtag) =&gt; &quot;/hivesql-upate-20210508&quot;,
        isLinkSafeFn: (url) =&gt; true,
      });
      
      const inputElem = $('#content-arcange-hivesql-upate-20210508').html();
      const outputElem = $('#content-arcange-hivesql-upate-20210508');
      const output = renderer.render(inputElem);
      
      outputElem.html(output);
    } catch(e) {
      console.log(e);
    }
  });
&lt;/script&gt;
&lt;style&gt;
  #content-arcange-hivesql-upate-20210508 {
    padding: 0 3rem;
    color: #444444;
    font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Helvetica, Arial, sans-serif;
    font-size: 16px;
    line-height: 1.8;
    text-shadow: 0 1px 0 #ffffff;
    padding: 0.5rem;
  }
  #content-arcange-hivesql-upate-20210508 code {
    background: white;
  }
  #content-arcange-hivesql-upate-20210508 a {
    border-bottom: 1px solid #444444; color: #444444; text-decoration: none;
  }
  #content-arcange-hivesql-upate-20210508 a:hover {
    border-bottom: 0;
  }
  #content-arcange-hivesql-upate-20210508 h1 {
    font-size: 2.2em;
  }
  #content-arcange-hivesql-upate-20210508 h2, h3, h4, h5 {
    margin-bottom: 0;
  }
  #content-arcange-hivesql-upate-20210508 header small {
    color: #999;
    font-size: 50%;
  }
  #content-arcange-hivesql-upate-20210508 img {
    max-width: 100%;
  }
&lt;/style&gt;

&lt;hr /&gt;
&lt;p&gt;
  See: &lt;a href=&quot;https://peakd.com/hive-139531/@arcange/hivesql-upate-20210508&quot;&gt;HiveSQL Upate - New Blacklists and Mutes tables&lt;/a&gt;
  by
  &lt;a href=&quot;https://hive.blog/@arcange&quot;&gt;@arcange&lt;/a&gt;
&lt;/p&gt;

&lt;/center&gt;&lt;/div&gt;</content><author><name>arcange</name></author><category term="news" /><category term="sql" /><category term="database" /><summary type="html">![](https://i.imgur.com/FE9D32t.png) The concept of [decentralized blacklists and mutes lists](/hive-102930/@blocktrades/hive-improvement-proposal-decentralize-blacklists-on-hive) was introduced by @blocktrades some time ago. These lists are recorded in the blockchain as `custom_json` operations, which makes them hard to track given the large number of such operations issued each day. Therefore, I created additional tables to make life easier for those who would be interested in such information. ### What's new? Four new &quot;state&quot; tables have been added to the database. State tables do not store transactions but reflect the result of operations recorded in the blockchain. **Blacklists** Blacklists allow anyone to construct a set of blacklisted users and allow each user to use one or more blacklists created by others. Blacklisting an account implies the blacklister thinks the account is doing something wrong, and is intended to be used as a way to warn others that he thinks they should be careful when dealing with that account. |Column|Description| |-|-| |blacklister|account owning the blacklist| |blasklisted|account being blacklisted| **BlacklistsFollows** This table contains a list of accounts following other account's blacklist. |Column|Description| |-|-| |account|account following a blacklist| |blacklist|account who created a blacklist| **Mutes** Mutes lists allow anyone to construct a set of users and allow each user to use one or more mute lists created by others. Muting an account means one doesn’t want to see the account’s posts and comments. Most frontends honor muting by preventing those posts from being displayed when its users view the site. |Column|Description| |-|-| |muter|account owning the mutes list| |muted|account being muted| **MutesFollows** This table contains a list of account following other account's mutes list |Column|Description| |-|-| |account|account following a mutes list| |mutelist|account who created a mutes list| ### What else? **Support for reblogs deletion** Hivemind has recently added support for undoing Reblogs. This allows users to remove old reblogs they don't want to appear on their feed or posts they mistakenly reblogged. HiveSQL will also manage such operations and remove related entries from its `Reblogs` state table. ## Support If you have any questions or remarks, support is provided on the [HiveSQL Discord Channel](https://discord.gg/kyEFDfT). Thank you for reading. --- **Let's keep HiveSQL free to use - Support its proposals**! |HiveSQL|HiveBuzz| |-|-| |[Vote for the proposal on PeakD](https://peakd.com/me/proposals/138)[Vote for the proposal on Ecency](https://ecency.com/proposals/138)[Vote for the proposal using HiveSigner](https://hivesigner.com/sign/update_proposal_votes?proposal_ids=%5B%22138%22%5D&amp;amp;approve=true)|[Vote for the proposal on PeakD](https://peakd.com/me/proposals/147)[Vote for the proposal on Ecency](https://ecency.com/proposals/147)[Vote for the proposal using HiveSigner](https://hivesigner.com/sign/update_proposal_votes?proposal_ids=%5B%22147%22%5D&amp;amp;approve=true)| --- ### Check out my apps and services ### [Vote for me as a witness ![](https://i.imgur.com/2bi4SnT.png)](https://hivesigner.com/sign/account-witness-vote?witness=arcange&amp;amp;approve=1)&amp;lt;/div&amp;gt; See: HiveSQL Upate - New Blacklists and Mutes tables by @arcange</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://i.imgur.com/FE9D32t.png" /><media:content medium="image" url="https://i.imgur.com/FE9D32t.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">HiveSQL Update - New Status Page</title><link href="https://hivedocs.info/news/sql/database/2021/05/06/hivesql-status.html" rel="alternate" type="text/html" title="HiveSQL Update - New Status Page" /><published>2021-05-06T05:32:57-07:00</published><updated>2021-05-06T05:32:57-07:00</updated><id>https://hivedocs.info/news/sql/database/2021/05/06/hivesql-status</id><content type="html" xml:base="https://hivedocs.info/news/sql/database/2021/05/06/hivesql-status.html">&lt;div id=&quot;content-arcange-hivesql-status&quot;&gt;![](https://i.imgur.com/HbmjGRG.png)

Every day, HiveSQL provides its services to dozens of users and (d)Apps that hammer the server with thousands of queries. At the same time, it also has to process all the new blocks, split the data into different tables, update indexes, update non-transactional tables, etc…

**HiveSQL is close to real-time synced with the blockchain** for transactional tables. But with all this work to do and the ever-growing number of transactions per day, it sometimes happens that it struggles a bit to sustain the pace, especially when it has to process some resource-intensive queries at peak time.

So, it can sometimes happen that HiveSQL is a little late by a few seconds on the blockchain.

### How to check if HiveSQL in sync with the blockchain?

To enable users to monitor HiveSQL, I created a new [HiveSQL status page](https://hivesql/status).
The page is available from [HiveSQL website](https://hivesql.io) or using the following link:

**https://hivesql.io/status**

The page will display the following information:

![](https://i.imgur.com/PyJqK0W.png)

* The status of the server:
***Online:*** the server is running and available for users to issue queries
***Offline:*** the server has been shut down for maintenance
* The last irreversible block number from the blockchain
* The last block number in the database
* The sync difference between the blockchain and the database

### Detailed tables information 

The status page will also display some information for each table into the database:

* the name of the table
* the number of rows into the table
* the size of the table (data + indexes)

This will give you a good idea of the amount of data HiveSQL has to manage (more than 2TB as of today) and how many rows each table contains.

As you will see, some tables contain several hundred million records. The `Transactions` table even contains **over 1.365 billion rows**!

This is why it is important to carefully write your SQL queries and optimize them. It is a subject on which I will come back later.

Meantime, enjoy this new monitoring tool.

## Support

If you have any questions or remarks, support is provided on the [HiveSQL Discord Channel](https://discord.gg/kyEFDfT).

Thank you for reading.

---
**Let's keep HiveSQL free to use - Support its proposals**!
|HiveSQL|HiveBuzz|
|-|-|
|[Vote for the proposal on PeakD](https://peakd.com/me/proposals/138)&lt;br /&gt;[Vote for the proposal on Ecency](https://ecency.com/proposals/138)&lt;br /&gt;[Vote for the proposal using HiveSigner](https://hivesigner.com/sign/update_proposal_votes?proposal_ids=%5B%22138%22%5D&amp;amp;approve=true)|[Vote for the proposal on PeakD](https://peakd.com/me/proposals/147)&lt;br /&gt;[Vote for the proposal on Ecency](https://ecency.com/proposals/147)&lt;br /&gt;[Vote for the proposal using HiveSigner](https://hivesigner.com/sign/update_proposal_votes?proposal_ids=%5B%22147%22%5D&amp;amp;approve=true)|

---
&lt;center&gt;

### Check out my apps and services
&lt;a href=&quot;/hive/@hive.engage/stay-connected-with-your-hive-audience-and-catch-attention&quot;&gt;&lt;img src=&quot;https://i.imgur.com/GiNJqlm.png&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;/@hivebuzz&quot;&gt;&lt;img src=&quot;https://i.imgur.com/B4UTun2.png&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;/@hivesql&quot;&gt;&lt;img src=&quot;https://i.imgur.com/EPN8RW6.png&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;/hive/@arcange/introducing-hive-account-recovery&quot;&gt;&lt;img src=&quot;https://i.imgur.com/6TWeW7V.png&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;/@hive.autoclaim&quot;&gt;&lt;img src=&quot;https://i.imgur.com/ih2pEOw.png&quot; /&gt;&lt;/a&gt;&lt;/center&gt;
&lt;center&gt;

### [Vote for me as a witness ![](https://i.imgur.com/2bi4SnT.png)](https://hivesigner.com/sign/account-witness-vote?witness=arcange&amp;amp;approve=1)&amp;lt;/div&amp;gt;
&lt;script crossorigin=&quot;anonymous&quot; integrity=&quot;sha256-4+XzXVhsDmqanXGHaHvgh1gMQKX40OUvDEBTu8JcmNs=&quot; src=&quot;https://code.jquery.com/jquery-3.5.1.slim.min.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;https://unpkg.com/steem-content-renderer&quot;&gt;&lt;/script&gt;
&lt;!-- &lt;script src=&quot;https://cdn.jsdelivr.net/npm/hive-content-renderer/dist/hive-content-renderer.min.js&quot;&gt;&lt;/script&gt; --&gt;
&lt;script&gt;
  $(document).ready(function() {
    try {
      const renderer = new SteemContentRenderer.DefaultRenderer({
      // const renderer = new HiveContentRenderer({
        baseUrl: &quot;https://hive.blog/&quot;,
        breaks: true,
        skipSanitization: false,
        allowInsecureScriptTags: false,
        addNofollowToLinks: true,
        doNotShowImages: false,
        ipfsPrefix: &quot;&quot;,
        assetsWidth: 640,
        assetsHeight: 480,
        imageProxyFn: (url) =&gt; url,
        usertagUrlFn: (account) =&gt; &quot;/@arcange&quot;,
        hashtagUrlFn: (hashtag) =&gt; &quot;/hivesql-status&quot;,
        isLinkSafeFn: (url) =&gt; true,
      });
      
      const inputElem = $('#content-arcange-hivesql-status').html();
      const outputElem = $('#content-arcange-hivesql-status');
      const output = renderer.render(inputElem);
      
      outputElem.html(output);
    } catch(e) {
      console.log(e);
    }
  });
&lt;/script&gt;
&lt;style&gt;
  #content-arcange-hivesql-status {
    padding: 0 3rem;
    color: #444444;
    font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Helvetica, Arial, sans-serif;
    font-size: 16px;
    line-height: 1.8;
    text-shadow: 0 1px 0 #ffffff;
    padding: 0.5rem;
  }
  #content-arcange-hivesql-status code {
    background: white;
  }
  #content-arcange-hivesql-status a {
    border-bottom: 1px solid #444444; color: #444444; text-decoration: none;
  }
  #content-arcange-hivesql-status a:hover {
    border-bottom: 0;
  }
  #content-arcange-hivesql-status h1 {
    font-size: 2.2em;
  }
  #content-arcange-hivesql-status h2, h3, h4, h5 {
    margin-bottom: 0;
  }
  #content-arcange-hivesql-status header small {
    color: #999;
    font-size: 50%;
  }
  #content-arcange-hivesql-status img {
    max-width: 100%;
  }
&lt;/style&gt;

&lt;hr /&gt;
&lt;p&gt;
  See: &lt;a href=&quot;https://peakd.com/hive-139531/@arcange/hivesql-status&quot;&gt;HiveSQL Update - New Status Page&lt;/a&gt;
  by
  &lt;a href=&quot;https://hive.blog/@arcange&quot;&gt;@arcange&lt;/a&gt;
&lt;/p&gt;

&lt;/center&gt;&lt;/div&gt;</content><author><name>arcange</name></author><category term="news" /><category term="sql" /><category term="database" /><summary type="html">![](https://i.imgur.com/HbmjGRG.png) Every day, HiveSQL provides its services to dozens of users and (d)Apps that hammer the server with thousands of queries. At the same time, it also has to process all the new blocks, split the data into different tables, update indexes, update non-transactional tables, etc… **HiveSQL is close to real-time synced with the blockchain** for transactional tables. But with all this work to do and the ever-growing number of transactions per day, it sometimes happens that it struggles a bit to sustain the pace, especially when it has to process some resource-intensive queries at peak time. So, it can sometimes happen that HiveSQL is a little late by a few seconds on the blockchain. ### How to check if HiveSQL in sync with the blockchain? To enable users to monitor HiveSQL, I created a new [HiveSQL status page](https://hivesql/status). The page is available from [HiveSQL website](https://hivesql.io) or using the following link: **https://hivesql.io/status** The page will display the following information: ![](https://i.imgur.com/PyJqK0W.png) * The status of the server: ***Online:*** the server is running and available for users to issue queries ***Offline:*** the server has been shut down for maintenance * The last irreversible block number from the blockchain * The last block number in the database * The sync difference between the blockchain and the database ### Detailed tables information The status page will also display some information for each table into the database: * the name of the table * the number of rows into the table * the size of the table (data + indexes) This will give you a good idea of the amount of data HiveSQL has to manage (more than 2TB as of today) and how many rows each table contains. As you will see, some tables contain several hundred million records. The `Transactions` table even contains **over 1.365 billion rows**! This is why it is important to carefully write your SQL queries and optimize them. It is a subject on which I will come back later. Meantime, enjoy this new monitoring tool. ## Support If you have any questions or remarks, support is provided on the [HiveSQL Discord Channel](https://discord.gg/kyEFDfT). Thank you for reading. --- **Let's keep HiveSQL free to use - Support its proposals**! |HiveSQL|HiveBuzz| |-|-| |[Vote for the proposal on PeakD](https://peakd.com/me/proposals/138)[Vote for the proposal on Ecency](https://ecency.com/proposals/138)[Vote for the proposal using HiveSigner](https://hivesigner.com/sign/update_proposal_votes?proposal_ids=%5B%22138%22%5D&amp;amp;approve=true)|[Vote for the proposal on PeakD](https://peakd.com/me/proposals/147)[Vote for the proposal on Ecency](https://ecency.com/proposals/147)[Vote for the proposal using HiveSigner](https://hivesigner.com/sign/update_proposal_votes?proposal_ids=%5B%22147%22%5D&amp;amp;approve=true)| --- ### Check out my apps and services ### [Vote for me as a witness ![](https://i.imgur.com/2bi4SnT.png)](https://hivesigner.com/sign/account-witness-vote?witness=arcange&amp;amp;approve=1)&amp;lt;/div&amp;gt; See: HiveSQL Update - New Status Page by @arcange</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://i.imgur.com/HbmjGRG.png" /><media:content medium="image" url="https://i.imgur.com/HbmjGRG.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Direct RC delegations vs RC pools and tentative direct rc delegations spec</title><link href="https://hivedocs.info/news/core/development/2021/05/05/direct-rc-delegations-vs-rc-pools-and-tentative-direct-rc-delegations-spec.html" rel="alternate" type="text/html" title="Direct RC delegations vs RC pools and tentative direct rc delegations spec" /><published>2021-05-05T17:02:18-07:00</published><updated>2021-05-05T17:02:18-07:00</updated><id>https://hivedocs.info/news/core/development/2021/05/05/direct-rc-delegations-vs-rc-pools-and-tentative-direct-rc-delegations-spec</id><content type="html" xml:base="https://hivedocs.info/news/core/development/2021/05/05/direct-rc-delegations-vs-rc-pools-and-tentative-direct-rc-delegations-spec.html">&lt;div id=&quot;content-howo-direct-rc-delegations-vs-rc-pools-and-tentative-direct-rc-delegations-spec&quot;&gt;
![image.png](https://files.peakd.com/file/peakd-hive/howo/23xLL8qDDTTeLahePNVpwjjgTxQjQd5spVivJncMvRrCXw5iM6bhLMoTNsSrvbPyeKo2L.png)

Hello, 

First let's settle on the terms, when I say &quot;RC pools&quot;, it refers to the implementation where everyone can delegate to pools and then pools can delegate to users, with more notions like overdelegation (you can delegate more RC than there is available in the pool) etc, we'll get back to it later.
When I say &quot;direct RC delegations&quot;, it's enabling users to delegate RC directly from one to another instead. Which would remove all the compexity of RC pools while retaining most of its features

tl;dr:
Direct RC delegations = user to user RC delegation
RC pool = more feature complete version

In the recent [dev meeting](https://peakd.com/meeting/@howo/hive-core-developer-meeting-22) we discussed RC delegations/pools a bit. Basically there is some concerns from @blocktrades's team regarding the complexity of RC pools, both in terms of complexity (risk of unforseen edge cases or bugs) and performance (could cost too much in processing power/memory to node operators). This also comes from the fact the RC system while functional still has some kinks to be worked out, it could be dangerous to build a complex system on something that is not rock solid.

This post aims to start a discussion and discuss around the fact that maybe we don't need RC pools as simple rc delegations cover most of the use cases. 

## Proposed direct RC delegations feature Set

some more terms:
max rc is the maximum amount of RC that the account can have 
current RC is the amount of RC that the account currently have, current RC regenerates over time to match max RC if not used.

You can see the spec (and discussion from other core devs) here: https://gitlab.syncad.com/hive/hive/-/issues/152 
I very much encourage you to read the link before continuing.

Direct RC delegations are super straightworward, just delegate 50 RC, your account now loses 50 max RC and the user you delegate to has an extra 50 max RC, I say max RC, because RC regenerates, so if the user you delegate to uses the 50 rc, it will come back eventually.

Advantages are:

- Pretty easy to code (writting it from scratch and could be as fast or even faster as finishing RC pools)
- Very simple so very small performance and memory footprint, less bug risks
- Simple UX-wise and easy for front ends to implement 

## RC pools 

if you want to know how RC pools work look here : https://peakd.com/test/@howo/wanna-help-test-rc-delegations-heres-all-you-need-to-know
tl;dr:
With the RC pool implementation, everyone can contribute to a pool, then a pool can delegate to multiple accoutns, there is a notion of &quot;oversubscription&quot; meaning that you delegate &quot;drc&quot; or delegated RC to an user not actual RC, drc basically allow you to spend the RC that is inside of the pool at a 1:1 ratio, but if the pool is empty and you got 50 drc, you can't get any RC. The main advantage of this approach is:

- Multiple users can contribute to the same pool 
- You don't have to guess what the user will consume to distribute RC, you just allows people to use at most, x RC.
- Already coded, lots of tests but need further reviewed and tested in a proper testnet 

disadvantage is obviously added complexity both in the chain and UX-wise (with the slot system, read up on it int he post above) that may not be worth it.

## comparaison of various use cases 

### Account creation 

Probably the biggest use case for direct RC delegations/pools. We create an account and transfer RC to it so it can transact comfortably. Today this is done by delegating hive power, but HP has many problems namely abuse and limitations.

#### Direct RC delegations

Direct RC delegations cover this use case, it would be an almost drop-in replacement for hive power delegation, take how much hp you used to delegate to new users and replace this with RC.

Of course we run into issues when we want to do this more at scale where you have to give the maximum RC an account usually use so if everyone uses 30 RC, but bob uses 100 because he's so excited about the platform, bob would be stuck, although with RC being &quot;free&quot;, bob could ask for a second delegation via an &quot;RC faucet&quot; or something.

The second problem is that this implies that the account creation account has a lot of RC, so if you want to onboard 10k users, you may run into problems, and it would be complicated to coordinate with other whales who might want to help (because direct RC delegations delegations would require active authority, whales probably won't give that auth to allow for automatic direct RC delegations). Delegating delegated RC (a whale could delegate to an account creation service who would redelegate RC) is a no go I think because it creates a ton of new edge cases.

But it wouldn't be too hard to create a system where you &quot;trail&quot; delegations, so if you're a whale and you see a service delegating 30 RC, you can delegate 10 RC too on top of it. It would be pretty easy. But once again not easily automatable since it touches the active authority. 

Ultimately direct RC delegations would cover the use case as well as HP delegations, not the best but still a massive improvement IMHO.

While I'm at it, direct RC delegations could be done using posting auth to make it way easier to manage and automate everything, there is no technical limitations to this, interested to hear your thoughts. The only risk is that someone dapp could then empty the RC in your account and prevent you from transacting.

#### RC pools

RC pools cover this case as well, It doesn't run into the same issues as direct RC delegations you can delegate 100 RC to everyone and just let people use RC as they go, if everyone uses 30 out of their 100 that's fine, and bob won't be restricted. This would allow account creation services to be way less strict in the way they manage RC, they could delegate a lot of RC to make sure newcomers are never running out of RC when doing the first basic things (voting posts/posting etc) as long as the pools are flowing thanks to delegations to the pools themselves.

### Delegate to a user who doesn't have RC left 

This is IMHO, the second biggest use case for direct RC delegations, the user used up all of his RC and we want him to continue to use hive, he could request an RC deleations from any RC faucet (I expect those to pop up once direct RC delegations make it to the chain) or a friend to give him some RC. Right now this is covered by HP delegations but no such faucets really exist for obvious abuse reasons.

#### direct RC delegations

This is a case where direct RC delegations work great, pretty easy to send an extra 500 RC to a user if he asks for it, and then maybe remove it a month later. You still have the same pain points outlined in the account creation use case though:

- you are bound to run out of RC if you delegate too much, so you're forced to be more conservative in your delegations 
- Others can't &quot;fund&quot; you with RC to help you 

#### RC pools

While RC pools can do it and be great at it thank to the delegated RC system, there is an important caveat: with RC pools you cannot get RC from a pool unless you set a slot to point to it first, this means that you can end up in these awkward situations where you can't set a slot to get RC from a pool because you're out of RC and cannot get RC from a pool because you didn't set your slot to point to the pool.
Although this scenario is relatively unlikely because a set_slot operation is a custom_json which costs very little.

## conclusion:

I think both approaches are valid but I think the extra weight and risk on the chain of RC pools make me lean towards implementing direct RC delegations with posting auth (even though I'll have to redo everything haha) along with a tool for people to &quot;trail&quot; other people's delegations. The UX benefits are also non negligible.

What are your thoughts ?&lt;/div&gt;
&lt;script crossorigin=&quot;anonymous&quot; integrity=&quot;sha256-4+XzXVhsDmqanXGHaHvgh1gMQKX40OUvDEBTu8JcmNs=&quot; src=&quot;https://code.jquery.com/jquery-3.5.1.slim.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://unpkg.com/steem-content-renderer&quot;&gt;&lt;/script&gt;

&lt;!-- &lt;script src=&quot;https://cdn.jsdelivr.net/npm/hive-content-renderer/dist/hive-content-renderer.min.js&quot;&gt;&lt;/script&gt; --&gt;
&lt;script&gt;
  $(document).ready(function() {
    try {
      const renderer = new SteemContentRenderer.DefaultRenderer({
      // const renderer = new HiveContentRenderer({
        baseUrl: &quot;https://hive.blog/&quot;,
        breaks: true,
        skipSanitization: false,
        allowInsecureScriptTags: false,
        addNofollowToLinks: true,
        doNotShowImages: false,
        ipfsPrefix: &quot;&quot;,
        assetsWidth: 640,
        assetsHeight: 480,
        imageProxyFn: (url) =&gt; url,
        usertagUrlFn: (account) =&gt; &quot;/@howo&quot;,
        hashtagUrlFn: (hashtag) =&gt; &quot;/direct-rc-delegations-vs-rc-pools-and-tentative-direct-rc-delegations-spec&quot;,
        isLinkSafeFn: (url) =&gt; true,
      });
      
      const inputElem = $('#content-howo-direct-rc-delegations-vs-rc-pools-and-tentative-direct-rc-delegations-spec').html();
      const outputElem = $('#content-howo-direct-rc-delegations-vs-rc-pools-and-tentative-direct-rc-delegations-spec');
      const output = renderer.render(inputElem);
      
      outputElem.html(output);
    } catch(e) {
      console.log(e);
    }
  });
&lt;/script&gt;

&lt;style&gt;
  #content-howo-direct-rc-delegations-vs-rc-pools-and-tentative-direct-rc-delegations-spec {
    padding: 0 3rem;
    color: #444444;
    font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Helvetica, Arial, sans-serif;
    font-size: 16px;
    line-height: 1.8;
    text-shadow: 0 1px 0 #ffffff;
    padding: 0.5rem;
  }
  #content-howo-direct-rc-delegations-vs-rc-pools-and-tentative-direct-rc-delegations-spec code {
    background: white;
  }
  #content-howo-direct-rc-delegations-vs-rc-pools-and-tentative-direct-rc-delegations-spec a {
    border-bottom: 1px solid #444444; color: #444444; text-decoration: none;
  }
  #content-howo-direct-rc-delegations-vs-rc-pools-and-tentative-direct-rc-delegations-spec a:hover {
    border-bottom: 0;
  }
  #content-howo-direct-rc-delegations-vs-rc-pools-and-tentative-direct-rc-delegations-spec h1 {
    font-size: 2.2em;
  }
  #content-howo-direct-rc-delegations-vs-rc-pools-and-tentative-direct-rc-delegations-spec h2, h3, h4, h5 {
    margin-bottom: 0;
  }
  #content-howo-direct-rc-delegations-vs-rc-pools-and-tentative-direct-rc-delegations-spec header small {
    color: #999;
    font-size: 50%;
  }
  #content-howo-direct-rc-delegations-vs-rc-pools-and-tentative-direct-rc-delegations-spec img {
    max-width: 100%;
  }
&lt;/style&gt;

&lt;hr /&gt;

&lt;p&gt;
  See: &lt;a href=&quot;https://peakd.com/rc/@howo/direct-rc-delegations-vs-rc-pools-and-tentative-direct-rc-delegations-spec&quot;&gt;Direct RC delegations vs RC pools and tentative direct rc delegations spec&lt;/a&gt;
  by
  &lt;a href=&quot;https://hive.blog/@howo&quot;&gt;@howo&lt;/a&gt;
&lt;/p&gt;</content><author><name>howo</name></author><category term="news" /><category term="core" /><category term="development" /><summary type="html">![image.png](https://files.peakd.com/file/peakd-hive/howo/23xLL8qDDTTeLahePNVpwjjgTxQjQd5spVivJncMvRrCXw5iM6bhLMoTNsSrvbPyeKo2L.png) Hello, First let's settle on the terms, when I say &quot;RC pools&quot;, it refers to the implementation where everyone can delegate to pools and then pools can delegate to users, with more notions like overdelegation (you can delegate more RC than there is available in the pool) etc, we'll get back to it later. When I say &quot;direct RC delegations&quot;, it's enabling users to delegate RC directly from one to another instead. Which would remove all the compexity of RC pools while retaining most of its features tl;dr: Direct RC delegations = user to user RC delegation RC pool = more feature complete version In the recent [dev meeting](https://peakd.com/meeting/@howo/hive-core-developer-meeting-22) we discussed RC delegations/pools a bit. Basically there is some concerns from @blocktrades's team regarding the complexity of RC pools, both in terms of complexity (risk of unforseen edge cases or bugs) and performance (could cost too much in processing power/memory to node operators). This also comes from the fact the RC system while functional still has some kinks to be worked out, it could be dangerous to build a complex system on something that is not rock solid. This post aims to start a discussion and discuss around the fact that maybe we don't need RC pools as simple rc delegations cover most of the use cases. ## Proposed direct RC delegations feature Set some more terms: max rc is the maximum amount of RC that the account can have current RC is the amount of RC that the account currently have, current RC regenerates over time to match max RC if not used. You can see the spec (and discussion from other core devs) here: https://gitlab.syncad.com/hive/hive/-/issues/152 I very much encourage you to read the link before continuing. Direct RC delegations are super straightworward, just delegate 50 RC, your account now loses 50 max RC and the user you delegate to has an extra 50 max RC, I say max RC, because RC regenerates, so if the user you delegate to uses the 50 rc, it will come back eventually. Advantages are: - Pretty easy to code (writting it from scratch and could be as fast or even faster as finishing RC pools) - Very simple so very small performance and memory footprint, less bug risks - Simple UX-wise and easy for front ends to implement ## RC pools if you want to know how RC pools work look here : https://peakd.com/test/@howo/wanna-help-test-rc-delegations-heres-all-you-need-to-know tl;dr: With the RC pool implementation, everyone can contribute to a pool, then a pool can delegate to multiple accoutns, there is a notion of &quot;oversubscription&quot; meaning that you delegate &quot;drc&quot; or delegated RC to an user not actual RC, drc basically allow you to spend the RC that is inside of the pool at a 1:1 ratio, but if the pool is empty and you got 50 drc, you can't get any RC. The main advantage of this approach is: - Multiple users can contribute to the same pool - You don't have to guess what the user will consume to distribute RC, you just allows people to use at most, x RC. - Already coded, lots of tests but need further reviewed and tested in a proper testnet disadvantage is obviously added complexity both in the chain and UX-wise (with the slot system, read up on it int he post above) that may not be worth it. ## comparaison of various use cases ### Account creation Probably the biggest use case for direct RC delegations/pools. We create an account and transfer RC to it so it can transact comfortably. Today this is done by delegating hive power, but HP has many problems namely abuse and limitations. #### Direct RC delegations Direct RC delegations cover this use case, it would be an almost drop-in replacement for hive power delegation, take how much hp you used to delegate to new users and replace this with RC. Of course we run into issues when we want to do this more at scale where you have to give the maximum RC an account usually use so if everyone uses 30 RC, but bob uses 100 because he's so excited about the platform, bob would be stuck, although with RC being &quot;free&quot;, bob could ask for a second delegation via an &quot;RC faucet&quot; or something. The second problem is that this implies that the account creation account has a lot of RC, so if you want to onboard 10k users, you may run into problems, and it would be complicated to coordinate with other whales who might want to help (because direct RC delegations delegations would require active authority, whales probably won't give that auth to allow for automatic direct RC delegations). Delegating delegated RC (a whale could delegate to an account creation service who would redelegate RC) is a no go I think because it creates a ton of new edge cases. But it wouldn't be too hard to create a system where you &quot;trail&quot; delegations, so if you're a whale and you see a service delegating 30 RC, you can delegate 10 RC too on top of it. It would be pretty easy. But once again not easily automatable since it touches the active authority. Ultimately direct RC delegations would cover the use case as well as HP delegations, not the best but still a massive improvement IMHO. While I'm at it, direct RC delegations could be done using posting auth to make it way easier to manage and automate everything, there is no technical limitations to this, interested to hear your thoughts. The only risk is that someone dapp could then empty the RC in your account and prevent you from transacting. #### RC pools RC pools cover this case as well, It doesn't run into the same issues as direct RC delegations you can delegate 100 RC to everyone and just let people use RC as they go, if everyone uses 30 out of their 100 that's fine, and bob won't be restricted. This would allow account creation services to be way less strict in the way they manage RC, they could delegate a lot of RC to make sure newcomers are never running out of RC when doing the first basic things (voting posts/posting etc) as long as the pools are flowing thanks to delegations to the pools themselves. ### Delegate to a user who doesn't have RC left This is IMHO, the second biggest use case for direct RC delegations, the user used up all of his RC and we want him to continue to use hive, he could request an RC deleations from any RC faucet (I expect those to pop up once direct RC delegations make it to the chain) or a friend to give him some RC. Right now this is covered by HP delegations but no such faucets really exist for obvious abuse reasons. #### direct RC delegations This is a case where direct RC delegations work great, pretty easy to send an extra 500 RC to a user if he asks for it, and then maybe remove it a month later. You still have the same pain points outlined in the account creation use case though: - you are bound to run out of RC if you delegate too much, so you're forced to be more conservative in your delegations - Others can't &quot;fund&quot; you with RC to help you #### RC pools While RC pools can do it and be great at it thank to the delegated RC system, there is an important caveat: with RC pools you cannot get RC from a pool unless you set a slot to point to it first, this means that you can end up in these awkward situations where you can't set a slot to get RC from a pool because you're out of RC and cannot get RC from a pool because you didn't set your slot to point to the pool. Although this scenario is relatively unlikely because a set_slot operation is a custom_json which costs very little. ## conclusion: I think both approaches are valid but I think the extra weight and risk on the chain of RC pools make me lean towards implementing direct RC delegations with posting auth (even though I'll have to redo everything haha) along with a tool for people to &quot;trail&quot; other people's delegations. The UX benefits are also non negligible. What are your thoughts ? See: Direct RC delegations vs RC pools and tentative direct rc delegations spec by @howo</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://files.peakd.com/file/peakd-hive/howo/23xLL8qDDTTeLahePNVpwjjgTxQjQd5spVivJncMvRrCXw5iM6bhLMoTNsSrvbPyeKo2L.png" /><media:content medium="image" url="https://files.peakd.com/file/peakd-hive/howo/23xLL8qDDTTeLahePNVpwjjgTxQjQd5spVivJncMvRrCXw5iM6bhLMoTNsSrvbPyeKo2L.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">RocketChat Webhooks Are Powerful</title><link href="https://hivedocs.info/news/projects/rocketchat/2021/05/05/rocketchat-webhooks-are-powerufl.html" rel="alternate" type="text/html" title="RocketChat Webhooks Are Powerful" /><published>2021-05-05T12:08:54-07:00</published><updated>2021-05-05T12:08:54-07:00</updated><id>https://hivedocs.info/news/projects/rocketchat/2021/05/05/rocketchat-webhooks-are-powerufl</id><content type="html" xml:base="https://hivedocs.info/news/projects/rocketchat/2021/05/05/rocketchat-webhooks-are-powerufl.html">&lt;div id=&quot;content-rishi556-rocketchat-webhooks-are-powerufl&quot;&gt;A little while ago I took a look at Rocketchat's documentation on webhooks for a little something that should be coming out soon™. While I ended up not using it, I found some pretty awesome stuff with it and thought I'd like to share it with you guys. If you have no interaction with rocketchat, it's basically a chat application that you can self host. Hive has one running at http://openhive.chat/ thanks to @gtg. I didn't really use it(other than EARLY ~~steem~~ days, 2016 when it was still steem.chat) but honestly, seeing some of its capabilities, I might run an instance of my own for some of my chats and mostly playing around. 

This is the documentation that I was reading: https://docs.rocket.chat/guides/administrator-guides/administration/integrations-1. I did give it a go and it didn't end up working for my purposes, but I know it can work great for lots of other use cases. 

What I love most about it is that you can have scripts on both incoming and outgoing webhooks(YES 2 WAY WEBHOOKS) run right on the server hosting the chat. This can be used to save a lot of processing or network calls elsewhere. 

&lt;hr /&gt;

Let's take a look at an example with outgoing. A lot of bots have a help menu. That's something static and doesn't change at all between users who use it, and as such, it's something that can be saved right on the server and sent as a response form there.

Here's how a bot on discord would handle a help command(because discord doesn't have 2 way webhooks, only incoming, you'd have to setup a bot account there):
```
User Sends Message -&amp;gt; Discord Server -&amp;gt; Bot Server -&amp;gt; Discord Server -&amp;gt; User's UI
```

We had 4 hops on that one to go from start to finish. Now lets see how we can do it with outgoing scripts on rocketchat:
```
User Sends Message -&amp;gt; Rocketchat Server -&amp;gt; User's UI
```
Look at that, only 2 hops. This really is a benefit of the self hosted aspect of rocketchat, as this wouldn't be something that discord would want to bring(who wants to let anyone run arbitrary code on their server?).

All those little jumps will save a little bit of network time, and while a user probably won't see the difference(unless your bot's server is far far away from everything else) don't we all just love to optimize? Save that tiny bit of milliseconds wherever we can? While this only works for static content(if you want to access a database or something you'd still want to allow the request onto its final destination for processing), it's still a major benefit. The best part is that these scripts are just written in JS so you don't even have to learn a new language.

Outgoing webhooks are awesome in so many ways. It's so much easier to just listen for an incoming request than setup an entire discord bot to look for incoming commands to do certain actions. Plus you can use scripts to handle stuff like routing right when its being sent so you don't even need to worry about that on your backend. 

What I think the best part about rocketchat is the fact that it is open source and so you can customize it how you want. https://github.com/RocketChat/Rocket.Chat Just look at openhive.chat. It uses your hive account to sign in. That's not something that you can get on Discord(which isn't a bad platform, discord still has MANY MANY benefits over rocketchat) and never will be.&lt;/div&gt;
&lt;script crossorigin=&quot;anonymous&quot; integrity=&quot;sha256-4+XzXVhsDmqanXGHaHvgh1gMQKX40OUvDEBTu8JcmNs=&quot; src=&quot;https://code.jquery.com/jquery-3.5.1.slim.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://unpkg.com/steem-content-renderer&quot;&gt;&lt;/script&gt;

&lt;!-- &lt;script src=&quot;https://cdn.jsdelivr.net/npm/hive-content-renderer/dist/hive-content-renderer.min.js&quot;&gt;&lt;/script&gt; --&gt;
&lt;script&gt;
  $(document).ready(function() {
    try {
      const renderer = new SteemContentRenderer.DefaultRenderer({
      // const renderer = new HiveContentRenderer({
        baseUrl: &quot;https://hive.blog/&quot;,
        breaks: true,
        skipSanitization: false,
        allowInsecureScriptTags: false,
        addNofollowToLinks: true,
        doNotShowImages: false,
        ipfsPrefix: &quot;&quot;,
        assetsWidth: 640,
        assetsHeight: 480,
        imageProxyFn: (url) =&gt; url,
        usertagUrlFn: (account) =&gt; &quot;/@rishi556&quot;,
        hashtagUrlFn: (hashtag) =&gt; &quot;/rocketchat-webhooks-are-powerufl&quot;,
        isLinkSafeFn: (url) =&gt; true,
      });
      
      const inputElem = $('#content-rishi556-rocketchat-webhooks-are-powerufl').html();
      const outputElem = $('#content-rishi556-rocketchat-webhooks-are-powerufl');
      const output = renderer.render(inputElem);
      
      outputElem.html(output);
    } catch(e) {
      console.log(e);
    }
  });
&lt;/script&gt;

&lt;style&gt;
  #content-rishi556-rocketchat-webhooks-are-powerufl {
    padding: 0 3rem;
    color: #444444;
    font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Helvetica, Arial, sans-serif;
    font-size: 16px;
    line-height: 1.8;
    text-shadow: 0 1px 0 #ffffff;
    padding: 0.5rem;
  }
  #content-rishi556-rocketchat-webhooks-are-powerufl code {
    background: white;
  }
  #content-rishi556-rocketchat-webhooks-are-powerufl a {
    border-bottom: 1px solid #444444; color: #444444; text-decoration: none;
  }
  #content-rishi556-rocketchat-webhooks-are-powerufl a:hover {
    border-bottom: 0;
  }
  #content-rishi556-rocketchat-webhooks-are-powerufl h1 {
    font-size: 2.2em;
  }
  #content-rishi556-rocketchat-webhooks-are-powerufl h2, h3, h4, h5 {
    margin-bottom: 0;
  }
  #content-rishi556-rocketchat-webhooks-are-powerufl header small {
    color: #999;
    font-size: 50%;
  }
  #content-rishi556-rocketchat-webhooks-are-powerufl img {
    max-width: 100%;
  }
&lt;/style&gt;

&lt;hr /&gt;

&lt;p&gt;
  See: &lt;a href=&quot;https://peakd.com/hive-169321/@rishi556/rocketchat-webhooks-are-powerufl&quot;&gt;RocketChat Webhooks Are Powerful&lt;/a&gt;
  by
  &lt;a href=&quot;https://hive.blog/@rishi556&quot;&gt;@rishi556&lt;/a&gt;
&lt;/p&gt;</content><author><name>rishi556</name></author><category term="news" /><category term="projects" /><category term="rocketchat" /><summary type="html">A little while ago I took a look at Rocketchat's documentation on webhooks for a little something that should be coming out soon™. While I ended up not using it, I found some pretty awesome stuff with it and thought I'd like to share it with you guys. If you have no interaction with rocketchat, it's basically a chat application that you can self host. Hive has one running at http://openhive.chat/ thanks to @gtg. I didn't really use it(other than EARLY ~~steem~~ days, 2016 when it was still steem.chat) but honestly, seeing some of its capabilities, I might run an instance of my own for some of my chats and mostly playing around. This is the documentation that I was reading: https://docs.rocket.chat/guides/administrator-guides/administration/integrations-1. I did give it a go and it didn't end up working for my purposes, but I know it can work great for lots of other use cases. What I love most about it is that you can have scripts on both incoming and outgoing webhooks(YES 2 WAY WEBHOOKS) run right on the server hosting the chat. This can be used to save a lot of processing or network calls elsewhere. Let's take a look at an example with outgoing. A lot of bots have a help menu. That's something static and doesn't change at all between users who use it, and as such, it's something that can be saved right on the server and sent as a response form there. Here's how a bot on discord would handle a help command(because discord doesn't have 2 way webhooks, only incoming, you'd have to setup a bot account there): ``` User Sends Message -&amp;gt; Discord Server -&amp;gt; Bot Server -&amp;gt; Discord Server -&amp;gt; User's UI ``` We had 4 hops on that one to go from start to finish. Now lets see how we can do it with outgoing scripts on rocketchat: ``` User Sends Message -&amp;gt; Rocketchat Server -&amp;gt; User's UI ``` Look at that, only 2 hops. This really is a benefit of the self hosted aspect of rocketchat, as this wouldn't be something that discord would want to bring(who wants to let anyone run arbitrary code on their server?). All those little jumps will save a little bit of network time, and while a user probably won't see the difference(unless your bot's server is far far away from everything else) don't we all just love to optimize? Save that tiny bit of milliseconds wherever we can? While this only works for static content(if you want to access a database or something you'd still want to allow the request onto its final destination for processing), it's still a major benefit. The best part is that these scripts are just written in JS so you don't even have to learn a new language. Outgoing webhooks are awesome in so many ways. It's so much easier to just listen for an incoming request than setup an entire discord bot to look for incoming commands to do certain actions. Plus you can use scripts to handle stuff like routing right when its being sent so you don't even need to worry about that on your backend. What I think the best part about rocketchat is the fact that it is open source and so you can customize it how you want. https://github.com/RocketChat/Rocket.Chat Just look at openhive.chat. It uses your hive account to sign in. That's not something that you can get on Discord(which isn't a bad platform, discord still has MANY MANY benefits over rocketchat) and never will be. See: RocketChat Webhooks Are Powerful by @rishi556</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://hivedocs.info/assets/images/favicon.png" /><media:content medium="image" url="https://hivedocs.info/assets/images/favicon.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">10th update of 2021 on BlockTrades work on Hive software</title><link href="https://hivedocs.info/news/core/development/2021/05/04/10th-update-of-2021-on-blocktrades-work-on-hive-software.html" rel="alternate" type="text/html" title="10th update of 2021 on BlockTrades work on Hive software" /><published>2021-05-04T16:58:30-07:00</published><updated>2021-05-04T16:58:30-07:00</updated><id>https://hivedocs.info/news/core/development/2021/05/04/10th-update-of-2021-on-blocktrades-work-on-hive-software</id><content type="html" xml:base="https://hivedocs.info/news/core/development/2021/05/04/10th-update-of-2021-on-blocktrades-work-on-hive-software.html">&lt;div id=&quot;content-blocktrades-10th-update-of-2021-on-blocktrades-work-on-hive-software&quot;&gt;Below is a list of Hive-related programming issues worked on by BlockTrades team during the last week:

# Hived work (blockchain node software)
We launched the first testnet of hived for hardfork 25 last Wednesday and have been experimenting with configuring tinman for it.

[Tinman](https://gitlab.syncad.com/hive/tinman) is a testnet management tool for hived that can create accounts and inject various forms of test data into a hived node.

During some of our testing, we found a problem with hived where it would eat up 100% CPU of a core if a hived was launched without a valid seed node because the blockchain code was stuck in a tight loop polling for transactions and blocks that never show up (because the node has no peers to get data from). 

Even more problematically, no reasonable diagnostic information was reported in this situation, so it took a little while for us to identify the real problem. We’re currently working on a fix for this issue that lowers the CPU overhead in this case, and also adds warning messages to identify the problem.

We found a problem with beem (the python-based API library for Hive) used for running API tests on hived. @howo provided a quick patch and we’re working on a long term fix now (should be fixed tomorrow).

@howo also made updates to the recurrent transfers function based on specification change requests by our devs, and we are planning a final review of those changes tomorrow, with the plan to merge it into the develop branch for deployment in the next testnet launch.

# Jussi caching optimization
Over the weekend, I observed that our hivemind was loaded much more heavily than normal (this was initially noticeable on hive.blog where it was taking longer to open a post to read). 

Eventually I found that our node is getting hit with a dramatic increase in the number of bridge.get_discussion API calls (these calls are made when you navigate to a user's post on a site like peakd or hive.blog) and this led to a CPU bottleneck in the python code that process API calls.

It turns out there's a new site that allows for browsing Hive posts, but unfortunately it is currently coded to make this call every second or so (I suspect to detect new comments on the post) and this resulted in a large increase in the number of API calls our hivemind had to process.

The ultimate solution was fairly simple: we reconfigured our Jussi process to cache results of this call for 1 second (previous we had no caching configured for this call). 

All API calls first go to Jussi before being passed to hivemind, and if Jussi has cached the answer to a previous API call, then it can just return the previous answer instead of asking hivemind again.

Up till now, we haven't enabled a lot of caching on api.hive.blog other than a few basic things so that we could identify which calls are expensive for hivemind to process, and then optimize the processing of those calls.

But now that optimization work is mostly complete, so we'll be taking a look soon at ways to optimize our Jussi caching to reduce load on hivemind and hived, as this should allow for a substantial scaling increase for our node.

# Hivemind (2nd layer applications + social media middleware)

We isolated the cause of the memory leak in hivemind: it appears to be a case where python isn’t releasing memory from dictionaries when the data in the dictionary is cleared. We’ve added code to do a “deep clean” of those dictionaries. We'll likely have performance measurements late next week on how much memory this saves at the current block height. 

As a side note, I believe current nodes can recover this memory prior to obtaining our fix by stopping and restarting their hivemind instance.

We’ve also been making some changes to hivemind tests based on the change in the way community muting is being implemented, and those changes will probably be merged into the develop branch tomorrow.

We’ve been running full hivemind syncs on several systems to benchmark performance under different hivemind configurations. We found a slowdown on one machine running with one new hivemind command-line option and we’re trying to analyze if it is due to the use of the new command-line option or some other configuration issue on that system (e.g. hardware or database configuration). At this point, we’re trying various experiments to isolate the root problem on that system.

# Modular hivemind (framework for hive applications)
This week, we completed the first pass work on the fork resolution code for modular hivemind using a fully SQL-based solution relying on shadow tables that save changes that need to be undone in the case of a fork switch. 

We’re currently creating an architecture document to describe how the fork resolution code works and how to use it to create a Hive-based application.

# Updating hived testnet
We’re planning to launch an updated testnet on Thursday with the latest fixes to hived discussed above.

That will be followed by a launch of an API node configured to draw data from the testnet (probably on Friday, if all goes well). 

This API node will allow Hive applications to begin adding code changes to support new features added by the hardfork, such as vote expiration reporting.

# New hivemind release planned soon
In the next week we’ll continue testing the latest changes to hivemind: first more performance testing of hivemind sync, then real-world performance testing on api.hive.blog. 

If all that testing goes well, we may be able to release a new version of hivemind to API node operators by the end of next week. This release would contain the various bug fixes and performance optimizations reported in previous posts.

# SQL Account history plugin for hived (requirement for modular hivemind)
We planned to get to this task last week, but unfortunately it was delayed by other tasks. But we hope to complete the changes to the SQL account history plugin that pushes data to postgres (eliminating the need for hivemind to pull the data via RPC calls) in the new couple of days.

After the plugin changes are completed, we’ll run a simultaneous replay of hived with a full sync of hivemind to measure the speedup, and see if it matches our expected improvement in hivemind full sync time (we expect 2 days versus the current 4 days required).

# Anticipated hardfork date
I believe we still need to do more testnet-based testing before notifying exchanges of the new version of the code, and since we want to give them approximately 30 days to update after we have a well-tested code release, I think we're still at least 1.5 months out from a possible hardfork date.&lt;/div&gt;
&lt;script crossorigin=&quot;anonymous&quot; integrity=&quot;sha256-4+XzXVhsDmqanXGHaHvgh1gMQKX40OUvDEBTu8JcmNs=&quot; src=&quot;https://code.jquery.com/jquery-3.5.1.slim.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://unpkg.com/steem-content-renderer&quot;&gt;&lt;/script&gt;

&lt;!-- &lt;script src=&quot;https://cdn.jsdelivr.net/npm/hive-content-renderer/dist/hive-content-renderer.min.js&quot;&gt;&lt;/script&gt; --&gt;
&lt;script&gt;
  $(document).ready(function() {
    try {
      const renderer = new SteemContentRenderer.DefaultRenderer({
      // const renderer = new HiveContentRenderer({
        baseUrl: &quot;https://hive.blog/&quot;,
        breaks: true,
        skipSanitization: false,
        allowInsecureScriptTags: false,
        addNofollowToLinks: true,
        doNotShowImages: false,
        ipfsPrefix: &quot;&quot;,
        assetsWidth: 640,
        assetsHeight: 480,
        imageProxyFn: (url) =&gt; url,
        usertagUrlFn: (account) =&gt; &quot;/@blocktrades&quot;,
        hashtagUrlFn: (hashtag) =&gt; &quot;/10th-update-of-2021-on-blocktrades-work-on-hive-software&quot;,
        isLinkSafeFn: (url) =&gt; true,
      });
      
      const inputElem = $('#content-blocktrades-10th-update-of-2021-on-blocktrades-work-on-hive-software').html();
      const outputElem = $('#content-blocktrades-10th-update-of-2021-on-blocktrades-work-on-hive-software');
      const output = renderer.render(inputElem);
      
      outputElem.html(output);
    } catch(e) {
      console.log(e);
    }
  });
&lt;/script&gt;

&lt;style&gt;
  #content-blocktrades-10th-update-of-2021-on-blocktrades-work-on-hive-software {
    padding: 0 3rem;
    color: #444444;
    font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Helvetica, Arial, sans-serif;
    font-size: 16px;
    line-height: 1.8;
    text-shadow: 0 1px 0 #ffffff;
    padding: 0.5rem;
  }
  #content-blocktrades-10th-update-of-2021-on-blocktrades-work-on-hive-software code {
    background: white;
  }
  #content-blocktrades-10th-update-of-2021-on-blocktrades-work-on-hive-software a {
    border-bottom: 1px solid #444444; color: #444444; text-decoration: none;
  }
  #content-blocktrades-10th-update-of-2021-on-blocktrades-work-on-hive-software a:hover {
    border-bottom: 0;
  }
  #content-blocktrades-10th-update-of-2021-on-blocktrades-work-on-hive-software h1 {
    font-size: 2.2em;
  }
  #content-blocktrades-10th-update-of-2021-on-blocktrades-work-on-hive-software h2, h3, h4, h5 {
    margin-bottom: 0;
  }
  #content-blocktrades-10th-update-of-2021-on-blocktrades-work-on-hive-software header small {
    color: #999;
    font-size: 50%;
  }
  #content-blocktrades-10th-update-of-2021-on-blocktrades-work-on-hive-software img {
    max-width: 100%;
  }
&lt;/style&gt;

&lt;hr /&gt;

&lt;p&gt;
  See: &lt;a href=&quot;https://hive.blog/hive-139531/@blocktrades/10th-update-of-2021-on-blocktrades-work-on-hive-software&quot;&gt;10th update of 2021 on BlockTrades work on Hive software&lt;/a&gt;
  by
  &lt;a href=&quot;https://hive.blog/@blocktrades&quot;&gt;@blocktrades&lt;/a&gt;
&lt;/p&gt;</content><author><name>blocktrades</name></author><category term="news" /><category term="core" /><category term="development" /><summary type="html">Below is a list of Hive-related programming issues worked on by BlockTrades team during the last week: # Hived work (blockchain node software) We launched the first testnet of hived for hardfork 25 last Wednesday and have been experimenting with configuring tinman for it. [Tinman](https://gitlab.syncad.com/hive/tinman) is a testnet management tool for hived that can create accounts and inject various forms of test data into a hived node. During some of our testing, we found a problem with hived where it would eat up 100% CPU of a core if a hived was launched without a valid seed node because the blockchain code was stuck in a tight loop polling for transactions and blocks that never show up (because the node has no peers to get data from). Even more problematically, no reasonable diagnostic information was reported in this situation, so it took a little while for us to identify the real problem. We’re currently working on a fix for this issue that lowers the CPU overhead in this case, and also adds warning messages to identify the problem. We found a problem with beem (the python-based API library for Hive) used for running API tests on hived. @howo provided a quick patch and we’re working on a long term fix now (should be fixed tomorrow). @howo also made updates to the recurrent transfers function based on specification change requests by our devs, and we are planning a final review of those changes tomorrow, with the plan to merge it into the develop branch for deployment in the next testnet launch. # Jussi caching optimization Over the weekend, I observed that our hivemind was loaded much more heavily than normal (this was initially noticeable on hive.blog where it was taking longer to open a post to read). Eventually I found that our node is getting hit with a dramatic increase in the number of bridge.get_discussion API calls (these calls are made when you navigate to a user's post on a site like peakd or hive.blog) and this led to a CPU bottleneck in the python code that process API calls. It turns out there's a new site that allows for browsing Hive posts, but unfortunately it is currently coded to make this call every second or so (I suspect to detect new comments on the post) and this resulted in a large increase in the number of API calls our hivemind had to process. The ultimate solution was fairly simple: we reconfigured our Jussi process to cache results of this call for 1 second (previous we had no caching configured for this call). All API calls first go to Jussi before being passed to hivemind, and if Jussi has cached the answer to a previous API call, then it can just return the previous answer instead of asking hivemind again. Up till now, we haven't enabled a lot of caching on api.hive.blog other than a few basic things so that we could identify which calls are expensive for hivemind to process, and then optimize the processing of those calls. But now that optimization work is mostly complete, so we'll be taking a look soon at ways to optimize our Jussi caching to reduce load on hivemind and hived, as this should allow for a substantial scaling increase for our node. # Hivemind (2nd layer applications + social media middleware) We isolated the cause of the memory leak in hivemind: it appears to be a case where python isn’t releasing memory from dictionaries when the data in the dictionary is cleared. We’ve added code to do a “deep clean” of those dictionaries. We'll likely have performance measurements late next week on how much memory this saves at the current block height. As a side note, I believe current nodes can recover this memory prior to obtaining our fix by stopping and restarting their hivemind instance. We’ve also been making some changes to hivemind tests based on the change in the way community muting is being implemented, and those changes will probably be merged into the develop branch tomorrow. We’ve been running full hivemind syncs on several systems to benchmark performance under different hivemind configurations. We found a slowdown on one machine running with one new hivemind command-line option and we’re trying to analyze if it is due to the use of the new command-line option or some other configuration issue on that system (e.g. hardware or database configuration). At this point, we’re trying various experiments to isolate the root problem on that system. # Modular hivemind (framework for hive applications) This week, we completed the first pass work on the fork resolution code for modular hivemind using a fully SQL-based solution relying on shadow tables that save changes that need to be undone in the case of a fork switch. We’re currently creating an architecture document to describe how the fork resolution code works and how to use it to create a Hive-based application. # Updating hived testnet We’re planning to launch an updated testnet on Thursday with the latest fixes to hived discussed above. That will be followed by a launch of an API node configured to draw data from the testnet (probably on Friday, if all goes well). This API node will allow Hive applications to begin adding code changes to support new features added by the hardfork, such as vote expiration reporting. # New hivemind release planned soon In the next week we’ll continue testing the latest changes to hivemind: first more performance testing of hivemind sync, then real-world performance testing on api.hive.blog. If all that testing goes well, we may be able to release a new version of hivemind to API node operators by the end of next week. This release would contain the various bug fixes and performance optimizations reported in previous posts. # SQL Account history plugin for hived (requirement for modular hivemind) We planned to get to this task last week, but unfortunately it was delayed by other tasks. But we hope to complete the changes to the SQL account history plugin that pushes data to postgres (eliminating the need for hivemind to pull the data via RPC calls) in the new couple of days. After the plugin changes are completed, we’ll run a simultaneous replay of hived with a full sync of hivemind to measure the speedup, and see if it matches our expected improvement in hivemind full sync time (we expect 2 days versus the current 4 days required). # Anticipated hardfork date I believe we still need to do more testnet-based testing before notifying exchanges of the new version of the code, and since we want to give them approximately 30 days to update after we have a well-tested code release, I think we're still at least 1.5 months out from a possible hardfork date. See: 10th update of 2021 on BlockTrades work on Hive software by @blocktrades</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://hivedocs.info/assets/images/favicon.png" /><media:content medium="image" url="https://hivedocs.info/assets/images/favicon.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Curated Content Collections, Hive Engine Wallet Updates and More</title><link href="https://hivedocs.info/news/projects/peakd/2021/04/27/curated-content-collections-hive-engine-wallet-updates-and-more.html" rel="alternate" type="text/html" title="Curated Content Collections, Hive Engine Wallet Updates and More" /><published>2021-04-27T02:40:15-07:00</published><updated>2021-04-27T02:40:15-07:00</updated><id>https://hivedocs.info/news/projects/peakd/2021/04/27/curated-content-collections-hive-engine-wallet-updates-and-more</id><content type="html" xml:base="https://hivedocs.info/news/projects/peakd/2021/04/27/curated-content-collections-hive-engine-wallet-updates-and-more.html">&lt;div id=&quot;content-peakd-curated-content-collections-hive-engine-wallet-updates-and-more&quot;&gt;A new release of [peakd.com](https://peakd.com) is now available. Keep reading to discover the new features and check the full list of improvements ;)

&lt;center&gt;&lt;h4&gt;The new release is now live at https://peakd.com&lt;/h4&gt;&lt;/center&gt;

![release_cover_2021_04_27.jpg](https://files.peakd.com/file/peakd-hive/peakd/23tvCw8qNqAn6wxZKhC1YXDEpoiXGbJskMY4VkvqEDcrF5qLk7ErxxWdMkts9dC7Dzvpc.jpg)


#### 1. Introduce Curated Content Collections (CCC)

Curated Content Collections (CCC shorthand) is by far the biggest feature introduced in this release. This is something we have discussed for quite some time in the past months and finally we have found a way to implement and support this feature in a way we hope you will enjoy.

With CCC you can now share a curated list of posts in a nice and simple way. And you can also add a small comment to each link you add to the collection.
If you are used to write posts on [peakd.com](https://peakd.com) it will be easy to create a new collection. Because collections are fully decentralized and backed by a normal post that you can share in your blog or in a community (we created a community in case you don't know where to post it) and showcase in your profile. To create a collection there is an option directly in the top bar or in the post 'advanced' settings.

If you want to have a look we have created a few collections beforehand:
https://peakd.com/ccc/jarvie/amazing-locations-of-utah
https://peakd.com/ccc/jarvie/hive-hardfork-25


![image.png](https://files.peakd.com/file/peakd-hive/peakd/23wMmD3qYqE1F6XdsaDvkuP8jM7LatkqJ964Dxm3bMavQ6E7qprjUnqz6vEuQu8WvbhwA.png)


But collections are just simple posts so you can also view with the standard layout, but with some new embedded content 😉

![CCC when opened as a post](https://files.peakd.com/file/peakd-hive/asgarth-dev/23tcNhnr57dfCQzTbJ8UXv6XPTzppzH7XRZWqBAM8LrQ1vZcEuwndQHrSSQJyneg6JyLY.png)


Of course those collections can be seen in the user profile on a dedicated page: https://peakd.com/@jarvie/collections


![image.png](https://files.peakd.com/file/peakd-hive/peakd/EoKAEtkkYqsCCNeJKUJY95qeDKwkm21kYukNvMFP5WPSKTjyNkKGMq2iDstqYRuXrbW.png)


And there is a [new badge](https://peakd.com/b/badge-000333) automatically assigned to users (curators) that publish a new collection.

!['Curator' Badge](https://files.peakd.com/file/peakd-hive/peakd/242NetMSjPwg8hsZqF5MQ6BFLDB6vUqVjHWrKd5UcQnWfr4ZRkY6KGBiyjzLzjEQ4p8w6.png)


#### 2. Hive Engine wallet improvements

The second large update in this release is a complete rework of the Hive Engine wallet section to provide more options and more details.

![HE wallet](https://files.peakd.com/file/peakd-hive/asgarth-dev/23uFweCqWKH4K4t4gt6Tm34CwMrYArq3oiVdDQUX2vqkFp2eaLdibV5BrhxAdLYtekqBz.png)

New supported operations:
- Stake
- Unstake
- Delegate
- Undelegate
- View your delegations and update them.

Also we integrated a few different API to provide a clear and complete overview of the value of those tokens on HE market, Diesel Pools and (if available) standard price provided by @coingecko.

#### 3. Accumulated HBD interest in Wallet and option to trigger a 'claim'

The Hive wallet now include an estimation of the HBD interests from the last payment. It's possible to trigger a payment with a small HBD transaction to yourself.

![image.png](https://files.peakd.com/file/peakd-hive/asgarth-dev/23viTUFX1HKoT9rEr83PMcbBxLooq7shLgFrDEr4oqk54sboSrE4oMRAc6ZECYqsA5aHr.png)


#### 4. A Bunch of other improvements worth a mention

A full list of minor updates and fixes is available in the next paragraph, but some of them are worth a small paragraph and explanation.

**Temporary save draft for comments/replies in the browser storage**

When you start writing a comment or reply the text is now temporary saved in your browser cache. This does not work as the drafts for your posts, but should be a convenient way to avoid losing an import or long message by mistake.

**Support 'Truvvl' embeds**

Truvvl is a new app by the @travelfeed team released a few days ago. Embedded content is now supported on [peakd.com](https://peakd.com).

**Support odysee.com (lbry.tv) embeds**

Support for [odysee.com](https://odysee.com) embeds is now available and old [lbry.tv](https://lbry.tv) frames are automatically rewritten. Keep in mind that this only works when embedding the `iframe` directly, and not with a simple link.

#### 5. Some minor improvements and bug fixes

As always some minor improvements, updates and fixes across the website. You can check the full release notes here: **https://peakd.com/about/changelog**.

```
# Improvements and Fixes
------------------------------

[update] Quickly submit comments/replies with CTRL+ENTER
[update] Automatically filter low amount transfers in Wallet transactions
[fix] Power Up/Down pop-ups layout on mobile
[fix] Hive Engine tokens transfer when logged in with Hivesigner
[fix] Fix loading error in Proposals page that prevent proposals from loading
[fix] Rendering issue on un-supported &amp;lt;iframe&amp;gt; embeds
[fix] Avoid autoplay for Theta.Tv embeds in the feed
[fix] Small visual bug with featured community ribbons on top of chat panel
[fix] Opening peakd.com links with query string parameters
```

---

## Support the @peakd project

Now is probably a nice time to remind you of the ways you can support the development of @peakd.

![Selection_298.png](https://files.peakd.com/file/peakd-hive/peakd/w36DQpO7-Selection_298.png)

We have a proposal on the Decentralized Hive Fund. You can review the proposal [here](/proposals/52).
If you agree to the proposal and you think the points mentioned add value to the Hive Blockchain consider supporting it using the above links or directly with **[this link](https://hivesigner.com/sign/update-proposal-votes?proposal_ids=[52]&amp;amp;approve=true)**.

---

We also run a witness server to help produce the blocks for the Hive Blockchain. You can vote for our witness so we are in a position to process more of them.

Vote on the witness page: https://peakd.com/witnesses

- Using Keychain: You just have to click and approve the transaction
- Using HiveSigner: You'll need access to confirm the transaction with your Active Key at least

---

###### *The PeakD Team*
_About us: https://peakd.com/about_
_Join us on Discord: https://discord.gg/Fy3bca5_&lt;/div&gt;
&lt;script crossorigin=&quot;anonymous&quot; integrity=&quot;sha256-4+XzXVhsDmqanXGHaHvgh1gMQKX40OUvDEBTu8JcmNs=&quot; src=&quot;https://code.jquery.com/jquery-3.5.1.slim.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://unpkg.com/steem-content-renderer&quot;&gt;&lt;/script&gt;

&lt;!-- &lt;script src=&quot;https://cdn.jsdelivr.net/npm/hive-content-renderer/dist/hive-content-renderer.min.js&quot;&gt;&lt;/script&gt; --&gt;
&lt;script&gt;
  $(document).ready(function() {
    try {
      const renderer = new SteemContentRenderer.DefaultRenderer({
      // const renderer = new HiveContentRenderer({
        baseUrl: &quot;https://hive.blog/&quot;,
        breaks: true,
        skipSanitization: false,
        allowInsecureScriptTags: false,
        addNofollowToLinks: true,
        doNotShowImages: false,
        ipfsPrefix: &quot;&quot;,
        assetsWidth: 640,
        assetsHeight: 480,
        imageProxyFn: (url) =&gt; url,
        usertagUrlFn: (account) =&gt; &quot;/@peakd&quot;,
        hashtagUrlFn: (hashtag) =&gt; &quot;/curated-content-collections-hive-engine-wallet-updates-and-more&quot;,
        isLinkSafeFn: (url) =&gt; true,
      });
      
      const inputElem = $('#content-peakd-curated-content-collections-hive-engine-wallet-updates-and-more').html();
      const outputElem = $('#content-peakd-curated-content-collections-hive-engine-wallet-updates-and-more');
      const output = renderer.render(inputElem);
      
      outputElem.html(output);
    } catch(e) {
      console.log(e);
    }
  });
&lt;/script&gt;

&lt;style&gt;
  #content-peakd-curated-content-collections-hive-engine-wallet-updates-and-more {
    padding: 0 3rem;
    color: #444444;
    font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Helvetica, Arial, sans-serif;
    font-size: 16px;
    line-height: 1.8;
    text-shadow: 0 1px 0 #ffffff;
    padding: 0.5rem;
  }
  #content-peakd-curated-content-collections-hive-engine-wallet-updates-and-more code {
    background: white;
  }
  #content-peakd-curated-content-collections-hive-engine-wallet-updates-and-more a {
    border-bottom: 1px solid #444444; color: #444444; text-decoration: none;
  }
  #content-peakd-curated-content-collections-hive-engine-wallet-updates-and-more a:hover {
    border-bottom: 0;
  }
  #content-peakd-curated-content-collections-hive-engine-wallet-updates-and-more h1 {
    font-size: 2.2em;
  }
  #content-peakd-curated-content-collections-hive-engine-wallet-updates-and-more h2, h3, h4, h5 {
    margin-bottom: 0;
  }
  #content-peakd-curated-content-collections-hive-engine-wallet-updates-and-more header small {
    color: #999;
    font-size: 50%;
  }
  #content-peakd-curated-content-collections-hive-engine-wallet-updates-and-more img {
    max-width: 100%;
  }
&lt;/style&gt;

&lt;hr /&gt;

&lt;p&gt;
  See: &lt;a href=&quot;https://peakd.com/hive-163399/@peakd/curated-content-collections-hive-engine-wallet-updates-and-more&quot;&gt;Curated Content Collections, Hive Engine Wallet Updates and More&lt;/a&gt;
  by
  &lt;a href=&quot;https://hive.blog/@peakd&quot;&gt;@peakd&lt;/a&gt;
&lt;/p&gt;</content><author><name>peakd</name></author><category term="news" /><category term="projects" /><category term="peakd" /><summary type="html">A new release of [peakd.com](https://peakd.com) is now available. Keep reading to discover the new features and check the full list of improvements ;) The new release is now live at https://peakd.com ![release_cover_2021_04_27.jpg](https://files.peakd.com/file/peakd-hive/peakd/23tvCw8qNqAn6wxZKhC1YXDEpoiXGbJskMY4VkvqEDcrF5qLk7ErxxWdMkts9dC7Dzvpc.jpg) #### 1. Introduce Curated Content Collections (CCC) Curated Content Collections (CCC shorthand) is by far the biggest feature introduced in this release. This is something we have discussed for quite some time in the past months and finally we have found a way to implement and support this feature in a way we hope you will enjoy. With CCC you can now share a curated list of posts in a nice and simple way. And you can also add a small comment to each link you add to the collection. If you are used to write posts on [peakd.com](https://peakd.com) it will be easy to create a new collection. Because collections are fully decentralized and backed by a normal post that you can share in your blog or in a community (we created a community in case you don't know where to post it) and showcase in your profile. To create a collection there is an option directly in the top bar or in the post 'advanced' settings. If you want to have a look we have created a few collections beforehand: https://peakd.com/ccc/jarvie/amazing-locations-of-utah https://peakd.com/ccc/jarvie/hive-hardfork-25 ![image.png](https://files.peakd.com/file/peakd-hive/peakd/23wMmD3qYqE1F6XdsaDvkuP8jM7LatkqJ964Dxm3bMavQ6E7qprjUnqz6vEuQu8WvbhwA.png) But collections are just simple posts so you can also view with the standard layout, but with some new embedded content 😉 ![CCC when opened as a post](https://files.peakd.com/file/peakd-hive/asgarth-dev/23tcNhnr57dfCQzTbJ8UXv6XPTzppzH7XRZWqBAM8LrQ1vZcEuwndQHrSSQJyneg6JyLY.png) Of course those collections can be seen in the user profile on a dedicated page: https://peakd.com/@jarvie/collections ![image.png](https://files.peakd.com/file/peakd-hive/peakd/EoKAEtkkYqsCCNeJKUJY95qeDKwkm21kYukNvMFP5WPSKTjyNkKGMq2iDstqYRuXrbW.png) And there is a [new badge](https://peakd.com/b/badge-000333) automatically assigned to users (curators) that publish a new collection. !['Curator' Badge](https://files.peakd.com/file/peakd-hive/peakd/242NetMSjPwg8hsZqF5MQ6BFLDB6vUqVjHWrKd5UcQnWfr4ZRkY6KGBiyjzLzjEQ4p8w6.png) #### 2. Hive Engine wallet improvements The second large update in this release is a complete rework of the Hive Engine wallet section to provide more options and more details. ![HE wallet](https://files.peakd.com/file/peakd-hive/asgarth-dev/23uFweCqWKH4K4t4gt6Tm34CwMrYArq3oiVdDQUX2vqkFp2eaLdibV5BrhxAdLYtekqBz.png) New supported operations: - Stake - Unstake - Delegate - Undelegate - View your delegations and update them. Also we integrated a few different API to provide a clear and complete overview of the value of those tokens on HE market, Diesel Pools and (if available) standard price provided by @coingecko. #### 3. Accumulated HBD interest in Wallet and option to trigger a 'claim' The Hive wallet now include an estimation of the HBD interests from the last payment. It's possible to trigger a payment with a small HBD transaction to yourself. ![image.png](https://files.peakd.com/file/peakd-hive/asgarth-dev/23viTUFX1HKoT9rEr83PMcbBxLooq7shLgFrDEr4oqk54sboSrE4oMRAc6ZECYqsA5aHr.png) #### 4. A Bunch of other improvements worth a mention A full list of minor updates and fixes is available in the next paragraph, but some of them are worth a small paragraph and explanation. **Temporary save draft for comments/replies in the browser storage** When you start writing a comment or reply the text is now temporary saved in your browser cache. This does not work as the drafts for your posts, but should be a convenient way to avoid losing an import or long message by mistake. **Support 'Truvvl' embeds** Truvvl is a new app by the @travelfeed team released a few days ago. Embedded content is now supported on [peakd.com](https://peakd.com). **Support odysee.com (lbry.tv) embeds** Support for [odysee.com](https://odysee.com) embeds is now available and old [lbry.tv](https://lbry.tv) frames are automatically rewritten. Keep in mind that this only works when embedding the `iframe` directly, and not with a simple link. #### 5. Some minor improvements and bug fixes As always some minor improvements, updates and fixes across the website. You can check the full release notes here: **https://peakd.com/about/changelog**. ``` # Improvements and Fixes ------------------------------ [update] Quickly submit comments/replies with CTRL+ENTER [update] Automatically filter low amount transfers in Wallet transactions [fix] Power Up/Down pop-ups layout on mobile [fix] Hive Engine tokens transfer when logged in with Hivesigner [fix] Fix loading error in Proposals page that prevent proposals from loading [fix] Rendering issue on un-supported &amp;lt;iframe&amp;gt; embeds [fix] Avoid autoplay for Theta.Tv embeds in the feed [fix] Small visual bug with featured community ribbons on top of chat panel [fix] Opening peakd.com links with query string parameters ``` --- ## Support the @peakd project Now is probably a nice time to remind you of the ways you can support the development of @peakd. ![Selection_298.png](https://files.peakd.com/file/peakd-hive/peakd/w36DQpO7-Selection_298.png) We have a proposal on the Decentralized Hive Fund. You can review the proposal [here](/proposals/52). If you agree to the proposal and you think the points mentioned add value to the Hive Blockchain consider supporting it using the above links or directly with **[this link](https://hivesigner.com/sign/update-proposal-votes?proposal_ids=[52]&amp;amp;approve=true)**. --- We also run a witness server to help produce the blocks for the Hive Blockchain. You can vote for our witness so we are in a position to process more of them. Vote on the witness page: https://peakd.com/witnesses - Using Keychain: You just have to click and approve the transaction - Using HiveSigner: You'll need access to confirm the transaction with your Active Key at least --- ###### *The PeakD Team* _About us: https://peakd.com/about_ _Join us on Discord: https://discord.gg/Fy3bca5_ See: Curated Content Collections, Hive Engine Wallet Updates and More by @peakd</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://files.peakd.com/file/peakd-hive/peakd/23tvCw8qNqAn6wxZKhC1YXDEpoiXGbJskMY4VkvqEDcrF5qLk7ErxxWdMkts9dC7Dzvpc.jpg" /><media:content medium="image" url="https://files.peakd.com/file/peakd-hive/peakd/23tvCw8qNqAn6wxZKhC1YXDEpoiXGbJskMY4VkvqEDcrF5qLk7ErxxWdMkts9dC7Dzvpc.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Hive Keychain Mobile 1.1 : in-App browser</title><link href="https://hivedocs.info/news/projects/hive-keychain/2021/04/26/hive-keychain-mobile-11-in-app-browser.html" rel="alternate" type="text/html" title="Hive Keychain Mobile 1.1 : in-App browser" /><published>2021-04-26T23:52:33-07:00</published><updated>2021-04-26T23:52:33-07:00</updated><id>https://hivedocs.info/news/projects/hive-keychain/2021/04/26/hive-keychain-mobile-11--in-app-browser</id><content type="html" xml:base="https://hivedocs.info/news/projects/hive-keychain/2021/04/26/hive-keychain-mobile-11-in-app-browser.html">&lt;div id=&quot;content-keychain-hive-keychain-mobile-11--in-app-browser&quot;&gt;![social_keychainforhive.jpg](https://files.peakd.com/file/peakd-hive/keychain/xnmVXGi6-social_keychain-for-hive.jpg)

Hive Keychain for mobile is now available in version 1.1.2 on both Android and iOS (the issue with Apple is finally resolved). It introduces an in-App browser that lets you use your dApps in a similar manner that on desktop, with the dApps issuing requests to Keychain, that will then sign the transactions upon approval.

Here's an example of logging in on PeakD:

https://files.peakd.com/file/peakd-hive/keychain/23zRyEJARgwZGS6LoYg85kwBy9n2YV9jc6MVRutVZ2tCGtVVd1Y7cjcCKACoJYTvtEs5W.gif

All the major request types are already implemented, so that you can make the most of your Keychain experience on mobile : 

- Login methods
- Generic broadcasts
- Post / Comment
- Vote
- Transfer (with or without encrypted memo)
- Hive Engine Transfer
- Power up / down
- Delegations
- Proposal votes
- Witness vote / proxy
- Encode / Decode message
- Sign transaction / buffer

The release was delayed by one day to add browser history management and url autocomplete features.
Hope you will enjoy it!

Some additional requests are still missing but more rarely used, and will be added soon.
Additionally, the browser will be improved with favorites and multiple tabs handling. We will also add the possibility to whitelist some requests in the future, in order to mirror the behavior that you can find on the browser extension.

## Download the Apps

[&lt;img src=&quot;https://images.hive.blog/200x50/https://files.peakd.com/file/peakd-hive/keychain/23vsHsRHWYjefYMReCeLtoPxb5L8sov9BR52RXpnmax9qiGzCQnRRghLBVGq7rKp642hA&quot; /&gt;](https://apps.apple.com/us/app/hive-keychain/id1552190010)
[&lt;img src=&quot;https://images.hive.blog/200x50/https://files.peakd.com/file/peakd-hive/keychain/23wMPrC1wiKKXTYQVQHViGYKC61ZEo4nSKGHY7aW2m4EzsLf2sSB5MhewMQZysNS4fBTS&quot; /&gt;](https://play.google.com/store/apps/details?id=com.mobilekeychain)

1. The Application is still in Beta. It has been tested extensively but it should not by any means be the only place you store your keys on.
2. To import accounts quickly from your Hive Keychain extension to your mobile App, use the QR Code scanner by pressing the QR code logo:

On your extension, navigate to the menu (top right button), then to `Manage Accounts` and finally click on `Show QR Code`.

## Discord

To communicate with us or become an Alpha tester, join our Discord by following this link :
https://discord.gg/3EM6YfRrGv

Or scanning this QR Code : 

![image.png](https://files.peakd.com/file/peakd-hive/keychain/BRNgvm9y-image.png)

#### Core Team

@stoodkev : Lead Dev - [Witness](https://hivesigner.com/sign/account-witness-vote?witness=stoodkev&amp;amp;approve=1)
@nateaguila : UI/UX
@yabapmatt : Founder - [Witness](https://hivesigner.com/sign/account-witness-vote?witness=yabapmatt&amp;amp;approve=1)
@aggroed : Founder - [Witness](https://hivesigner.com/sign/account-witness-vote?witness=aggroed&amp;amp;approve=1)


---

### Support Hive Keychain development by voting for [our proposal](https://peakd.com/hive/@keychain/hive-keychain-development-proposal-2) on [PeakD](https://peakd.com/proposals/140) or with [HiveSigner](https://hivesigner.com/sign/update-proposal-votes?proposal_ids=%5B140%5D&amp;amp;approve=true).

*100% of payout is redirected to the DAO*&lt;/div&gt;
&lt;script crossorigin=&quot;anonymous&quot; integrity=&quot;sha256-4+XzXVhsDmqanXGHaHvgh1gMQKX40OUvDEBTu8JcmNs=&quot; src=&quot;https://code.jquery.com/jquery-3.5.1.slim.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://unpkg.com/steem-content-renderer&quot;&gt;&lt;/script&gt;

&lt;!-- &lt;script src=&quot;https://cdn.jsdelivr.net/npm/hive-content-renderer/dist/hive-content-renderer.min.js&quot;&gt;&lt;/script&gt; --&gt;
&lt;script&gt;
  $(document).ready(function() {
    try {
      const renderer = new SteemContentRenderer.DefaultRenderer({
      // const renderer = new HiveContentRenderer({
        baseUrl: &quot;https://hive.blog/&quot;,
        breaks: true,
        skipSanitization: false,
        allowInsecureScriptTags: false,
        addNofollowToLinks: true,
        doNotShowImages: false,
        ipfsPrefix: &quot;&quot;,
        assetsWidth: 640,
        assetsHeight: 480,
        imageProxyFn: (url) =&gt; url,
        usertagUrlFn: (account) =&gt; &quot;/@keychain&quot;,
        hashtagUrlFn: (hashtag) =&gt; &quot;/hive-keychain-mobile-11--in-app-browser&quot;,
        isLinkSafeFn: (url) =&gt; true,
      });
      
      const inputElem = $('#content-keychain-hive-keychain-mobile-11--in-app-browser').html();
      const outputElem = $('#content-keychain-hive-keychain-mobile-11--in-app-browser');
      const output = renderer.render(inputElem);
      
      outputElem.html(output);
    } catch(e) {
      console.log(e);
    }
  });
&lt;/script&gt;

&lt;style&gt;
  #content-keychain-hive-keychain-mobile-11--in-app-browser {
    padding: 0 3rem;
    color: #444444;
    font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Helvetica, Arial, sans-serif;
    font-size: 16px;
    line-height: 1.8;
    text-shadow: 0 1px 0 #ffffff;
    padding: 0.5rem;
  }
  #content-keychain-hive-keychain-mobile-11--in-app-browser code {
    background: white;
  }
  #content-keychain-hive-keychain-mobile-11--in-app-browser a {
    border-bottom: 1px solid #444444; color: #444444; text-decoration: none;
  }
  #content-keychain-hive-keychain-mobile-11--in-app-browser a:hover {
    border-bottom: 0;
  }
  #content-keychain-hive-keychain-mobile-11--in-app-browser h1 {
    font-size: 2.2em;
  }
  #content-keychain-hive-keychain-mobile-11--in-app-browser h2, h3, h4, h5 {
    margin-bottom: 0;
  }
  #content-keychain-hive-keychain-mobile-11--in-app-browser header small {
    color: #999;
    font-size: 50%;
  }
  #content-keychain-hive-keychain-mobile-11--in-app-browser img {
    max-width: 100%;
  }
&lt;/style&gt;

&lt;hr /&gt;

&lt;p&gt;
  See: &lt;a href=&quot;https://peakd.com/keychain/@keychain/hive-keychain-mobile-11--in-app-browser&quot;&gt;Hive Keychain Mobile 1.1 : in-App browser&lt;/a&gt;
  by
  &lt;a href=&quot;https://hive.blog/@keychain&quot;&gt;@keychain&lt;/a&gt;
&lt;/p&gt;</content><author><name>keychain</name></author><category term="news" /><category term="projects" /><category term="hive-keychain" /><summary type="html">![social_keychainforhive.jpg](https://files.peakd.com/file/peakd-hive/keychain/xnmVXGi6-social_keychain-for-hive.jpg) Hive Keychain for mobile is now available in version 1.1.2 on both Android and iOS (the issue with Apple is finally resolved). It introduces an in-App browser that lets you use your dApps in a similar manner that on desktop, with the dApps issuing requests to Keychain, that will then sign the transactions upon approval. Here's an example of logging in on PeakD: https://files.peakd.com/file/peakd-hive/keychain/23zRyEJARgwZGS6LoYg85kwBy9n2YV9jc6MVRutVZ2tCGtVVd1Y7cjcCKACoJYTvtEs5W.gif All the major request types are already implemented, so that you can make the most of your Keychain experience on mobile : - Login methods - Generic broadcasts - Post / Comment - Vote - Transfer (with or without encrypted memo) - Hive Engine Transfer - Power up / down - Delegations - Proposal votes - Witness vote / proxy - Encode / Decode message - Sign transaction / buffer The release was delayed by one day to add browser history management and url autocomplete features. Hope you will enjoy it! Some additional requests are still missing but more rarely used, and will be added soon. Additionally, the browser will be improved with favorites and multiple tabs handling. We will also add the possibility to whitelist some requests in the future, in order to mirror the behavior that you can find on the browser extension. ## Download the Apps [](https://apps.apple.com/us/app/hive-keychain/id1552190010) [](https://play.google.com/store/apps/details?id=com.mobilekeychain) 1. The Application is still in Beta. It has been tested extensively but it should not by any means be the only place you store your keys on. 2. To import accounts quickly from your Hive Keychain extension to your mobile App, use the QR Code scanner by pressing the QR code logo: On your extension, navigate to the menu (top right button), then to `Manage Accounts` and finally click on `Show QR Code`. ## Discord To communicate with us or become an Alpha tester, join our Discord by following this link : https://discord.gg/3EM6YfRrGv Or scanning this QR Code : ![image.png](https://files.peakd.com/file/peakd-hive/keychain/BRNgvm9y-image.png) #### Core Team @stoodkev : Lead Dev - [Witness](https://hivesigner.com/sign/account-witness-vote?witness=stoodkev&amp;amp;approve=1) @nateaguila : UI/UX @yabapmatt : Founder - [Witness](https://hivesigner.com/sign/account-witness-vote?witness=yabapmatt&amp;amp;approve=1) @aggroed : Founder - [Witness](https://hivesigner.com/sign/account-witness-vote?witness=aggroed&amp;amp;approve=1) --- ### Support Hive Keychain development by voting for [our proposal](https://peakd.com/hive/@keychain/hive-keychain-development-proposal-2) on [PeakD](https://peakd.com/proposals/140) or with [HiveSigner](https://hivesigner.com/sign/update-proposal-votes?proposal_ids=%5B140%5D&amp;amp;approve=true). *100% of payout is redirected to the DAO* See: Hive Keychain Mobile 1.1 : in-App browser by @keychain</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://files.peakd.com/file/peakd-hive/keychain/xnmVXGi6-social_keychain-for-hive.jpg" /><media:content medium="image" url="https://files.peakd.com/file/peakd-hive/keychain/xnmVXGi6-social_keychain-for-hive.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>