<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="https://hivedocs.info/feed.xml" rel="self" type="application/atom+xml" /><link href="https://hivedocs.info/" rel="alternate" type="text/html" /><updated>2020-04-15T08:47:54-07:00</updated><id>https://hivedocs.info/feed.xml</id><title type="html">Hive Chain Documentation</title><subtitle>Your resource for various levels of Hive Documentation.</subtitle><author><name>site curated by: @inertia</name></author><entry><title type="html">Hivesigner Python Client</title><link href="https://hivedocs.info/howto/python/hivesigner/2020/04/14/powering-up-2.html" rel="alternate" type="text/html" title="Hivesigner Python Client" /><published>2020-04-14T14:28:15-07:00</published><updated>2020-04-14T14:28:15-07:00</updated><id>https://hivedocs.info/howto/python/hivesigner/2020/04/14/powering-up-2</id><content type="html" xml:base="https://hivedocs.info/howto/python/hivesigner/2020/04/14/powering-up-2.html">&lt;center&gt;&lt;p&gt;&lt;img src=&quot;https://images.hive.blog/p/Y2iXpRRkNSnseh3NuL6KUBitJTXrc5K2vbTzBseGEENcE?format=match&amp;amp;mode=fit&amp;amp;width=640&quot; /&gt;&lt;/p&gt;&lt;br /&gt;&lt;/center&gt;

&lt;hr /&gt;

&lt;p&gt;hivesigner-python-client is a simple yet powerful library to interact with &lt;a href=&quot;https://hivesigner.com&quot;&gt;HiveSigner&lt;/a&gt;. Hivesigner is a single sign-on solution for HIVE based applications and it implements &lt;code class=&quot;highlighter-rouge&quot;&gt;Oauth2&lt;/code&gt; for the authorization logic.&lt;/p&gt;

&lt;p&gt;With this client;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Implementing Authorization/Authentication flow w/ OAuth&lt;/li&gt;
  &lt;li&gt;Broadcasting supported operations to the HIVE blockchain with the user of your app&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;are possible through Hivesigner.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;| Repository                                       | Documentation |
|————————————————–|—————|
|&lt;a href=&quot;https://github.com/emre/hivesigner-python-client&quot;&gt;github.com/emre/hivesigner-python-client&lt;/a&gt;|   &lt;a href=&quot;https://hivesigner-python-client.readthedocs.io/en/latest/&quot;&gt;hivesigner-python-client.readthedocs.io&lt;/a&gt;            |
***&lt;/p&gt;

&lt;h4 id=&quot;installation&quot;&gt;Installation&lt;/h4&gt;
&lt;hr /&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ (sudo) pip install hivesigner
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;migrating-from-steemconnect-python-client&quot;&gt;Migrating from steemconnect-python-client&lt;/h4&gt;
&lt;hr /&gt;
&lt;p&gt;If you use &lt;code class=&quot;highlighter-rouge&quot;&gt;steemconnect-python-client&lt;/code&gt; and want to switch to HIVE version, the only change you need to do is updating imports.&lt;/p&gt;

&lt;p&gt;Old way:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;from steemconnect.client import Client&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;New way:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;from hivesigner.client import Client&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Also, &lt;code class=&quot;highlighter-rouge&quot;&gt;Resteem&lt;/code&gt; class is changed as &lt;code class=&quot;highlighter-rouge&quot;&gt;Reblog&lt;/code&gt;.  Examples and more details can be found at the documentation website.
&lt;strong&gt;*
**Note&lt;/strong&gt;:  Hivesigner is being maintained by @good-karma since the switch. There is an ongoing proposal for it’s maintenance for a while. If you didn’t see it yet, &lt;a href=&quot;https://hivedao.com/proposal/88&quot;&gt;check it out&lt;/a&gt;.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;
  See: &lt;a href=&quot;https://hive.blog/@emrebeyler/powering-up-2&quot;&gt;Hivesigner Python Client&lt;/a&gt;
  by
  &lt;a href=&quot;https://hive.blog/@emrebeyler&quot;&gt;@emrebeyler&lt;/a&gt;
&lt;/p&gt;</content><author><name>emrebeyler</name></author><summary type="html">hivesigner-python-client is a simple yet powerful library to interact with HiveSigner. Hivesigner is a single sign-on solution for HIVE based applications and it implements Oauth2 for the authorization logic. With this client; Implementing Authorization/Authentication flow w/ OAuth Broadcasting supported operations to the HIVE blockchain with the user of your app are possible through Hivesigner. | Repository | Documentation | |————————————————–|—————| |github.com/emre/hivesigner-python-client| hivesigner-python-client.readthedocs.io | *** Installation $ (sudo) pip install hivesigner Migrating from steemconnect-python-client If you use steemconnect-python-client and want to switch to HIVE version, the only change you need to do is updating imports. Old way: from steemconnect.client import Client New way: from hivesigner.client import Client. Also, Resteem class is changed as Reblog. Examples and more details can be found at the documentation website. * **Note: Hivesigner is being maintained by @good-karma since the switch. There is an ongoing proposal for it’s maintenance for a while. If you didn’t see it yet, check it out. See: Hivesigner Python Client by @emrebeyler</summary></entry><entry><title type="html">[Hive Patched] Upvoting By Payment In 4 Easy Steps - Basic Bot</title><link href="https://hivedocs.info/howdo/nodejs/bot/2020/04/14/hive-patched-upvoting-by-payment-in-4-easy-steps-basic-bot.html" rel="alternate" type="text/html" title="[Hive Patched] Upvoting By Payment In 4 Easy Steps - Basic Bot" /><published>2020-04-14T13:14:21-07:00</published><updated>2020-04-14T13:14:21-07:00</updated><id>https://hivedocs.info/howdo/nodejs/bot/2020/04/14/hive-patched-upvoting-by-payment-in-4-easy-steps-basic-bot</id><content type="html" xml:base="https://hivedocs.info/howdo/nodejs/bot/2020/04/14/hive-patched-upvoting-by-payment-in-4-easy-steps-basic-bot.html">&lt;p&gt;&lt;img src=&quot;https://files.peakd.com/file/peakd-hive/lonelywolf/MwKfr7ni-upvote.png&quot; alt=&quot;upvote.png&quot; /&gt;
(Want to use the &lt;strong&gt;logo&lt;/strong&gt; yourself? no problem, check out the post I made about &lt;a href=&quot;https://peakd.com/hive-174578/@lonelywolf/art-design-hive-logo-by-lonelywolf-stav-art-inside-free-usage&quot;&gt;My Art Design - Hive Logo&lt;/a&gt;)
—&lt;/p&gt;
&lt;h4 id=&quot;repository&quot;&gt;Repository:&lt;/h4&gt;
&lt;p&gt;https://www.npmjs.com/package/steem-js-patched&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;helpful-tutorials&quot;&gt;Helpful tutorials:&lt;/h2&gt;
    &lt;p&gt;&lt;a href=&quot;https://hive.blog/hive-139531/@lonelywolf/hive-patched-steemjs-full-tutorial-all-the-functions-all-the-abilities&quot;&gt;[HIVE Patched] SteemJS Full Tutorial - All The Functions - All The Abilities&lt;/a&gt;
&lt;a href=&quot;https://hive.blog/hive-139531/@lonelywolf/hive-patched-tutorial-steemjs-vote-comment-and-follow-functions-all-in-one&quot;&gt;[Hive Patched Tutorial] SteemJS - Vote, Comment and Follow functions - All In One&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;all-of-this-tutorial-is-patched-for-hive-so-it-works-for-steem-and-hive&quot;&gt;All of this tutorial is patched for Hive, so it works for steem and &lt;strong&gt;Hive&lt;/strong&gt;!&lt;/h1&gt;
&lt;h4 id=&quot;all-of-the-examples-and-results-is-from-the-old-tutorial-but-still-same-for-hive&quot;&gt;All of the examples and results is from the old tutorial but still same for hive!&lt;/h4&gt;

&lt;p&gt;Hello!
Today you’re going to learn how to create an upvoting bot with that calculate simply the voting power by the payment, &lt;code class=&quot;highlighter-rouge&quot;&gt;note&lt;/code&gt; the calculation is a really simple calculation.&lt;/p&gt;

&lt;p&gt;Load the steem/HIVE package:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const steem = require('steem-js-patched')
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;To install the package &lt;code class=&quot;highlighter-rouge&quot;&gt;npm install steem-js-patched --save&lt;/code&gt; - Repository above&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;First we will add the user guest123 (or your account) to the code, this(guest123) is a global account for steemjs developers&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const ACC_NAME = 'guest123', // Account Name
    ACC_KEY = '5JRaypasxMx1L97ZUX7YuC5Psb5EAbF821kkAGtBj7xCJFQcbLg'; // Account Private WIF Key
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;you want to add the Hive API to work with &lt;strong&gt;Hive&lt;/strong&gt; blockchain&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;steem.api.setOptions({ url: 'https://api.hive.blog' });
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So, First things first, we will get from the easiest to the hardest, firstly we’re going to get the transactions from the blockchain&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;steem.api.streamTransactions('head', function(err, result) {
    let type = result.operations[0][0]; // getting the type of the transaction
    let data = result.operations[0][1]; // getting the data of the transaction
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;this function gets the newest transactions that go through the hive blockchain, such as new blogs, transfers etc.&lt;/p&gt;

&lt;p&gt;as I already explained in the code, the type is getting the transaction type (new blogs/new transfer etc.) and data getting the data from the transaction, for the blog it will be an author, permlink, content etc. and for transfer, it will be a memo, sender, receiver etc.&lt;/p&gt;

&lt;p&gt;now we need to check if the transaction type is a transfer and if it is, we check if the receiver is our account.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if(type == 'transfer' &amp;amp;&amp;amp; data.to == ACC_NAME) { // checking if the transaction type is a transfer and the reciever is our account

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;simple enough, we’re checking if type(transaction type) is &lt;code class=&quot;highlighter-rouge&quot;&gt;transfer&lt;/code&gt; and if the receiver is our account.&lt;/p&gt;

&lt;p&gt;if it is we need to check the memo and check if the memo is url if it is we’re going to send the vote, if it’s not we’re getting it as normal transfers.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var memo = data.memo.split('/');
if(memo[0] == &quot;https:&quot;){ // checking if the memo is a url
  console.log(&quot;Incoming request for vote from: &quot; + data.from +&quot;, value: &quot; + data.amount + &quot;\n\n&quot;); // sending a comment to the console and telling us that new request for vote is come.
  streamVote(data.memo, data.amount);
}else{
  console.log(&quot;Incoming transaction from: &quot; + data.from + &quot;, this is not a vote requst.&quot;);
  console.log(&quot;MEMO: &quot; + data.memo);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;everything explained above!&lt;/p&gt;

&lt;h3 id=&quot;now-create-the-functions---streamvote--calcvoteweight&quot;&gt;Now, create the functions - StreamVote &amp;amp; CalcVoteWeight&lt;/h3&gt;
&lt;p&gt;firstly, streamvote, create a function called StreamVote with the variables URL, Amount&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function streamVote(url, amount) {

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;now we need to get the weight and the author&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    const memo = url.split('/'); // spliting the URL to array
    const author = memo[4].split('@')[1]; // getting the author of the post
    const weight = calcVoteWeight(amount); // getting the weight value by the amount
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;memo = url
author is the author of the post that got from the url, example: &lt;del&gt;https://steemit.com/utopian-io&lt;/del&gt;/&lt;strong&gt;@lonelywolf&lt;/strong&gt;/&lt;del&gt;steem-bots—auto-follower-bot-steemjs–nodejs—-begginer-tutorial&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;weight is the calculated weight from the calculate function that we will create after.&lt;/p&gt;

&lt;p&gt;now we just need to stream the vote to the blockchain&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;steem.broadcast.vote(ACC_KEY, ACC_NAME, author, memo[5], weight, function(err, result) { // starting the voting process
        if(!!err)
          throw err; // close the program and send comment to the console with the error details if there is an error
        console.log('Voted Succesfully, permalink: ' + memo[5] + ', author: ' + author + ', weight: ' + weight / 1000 + '%.', err); //if the vote Succesfully sent it will send all of the information to the console
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;so we have the broadcast. vote function, as it says it sends a vote, it uses the wif(private key), the account name, the author name, the permlink(memo[5]) and the voting weight.&lt;/p&gt;

&lt;p&gt;if there is an error we’re sending it to the console and crash the application&lt;/p&gt;

&lt;p&gt;if everything has done successfully we’re sending the info to the console.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The calculate function
create a new function with the variable &lt;code class=&quot;highlighter-rouge&quot;&gt;amountPaid&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//this function will calculate the voting weight for the paid upvote as simple as it can be
function calcVoteWeight(amountPaid){

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;now get the token type and value&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  const token = amountPaid.split(' '),
    tokenType = token.pop(), //taking the token(coin) type [HIVE/HBD]
    tokenValue = token.shift(); // taking only the token(coin) value
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;as easy as it can be, we’re splitting the string by spaces and getting the token type &amp;amp; value&lt;/p&gt;

&lt;p&gt;now create a new variable called &lt;code class=&quot;highlighter-rouge&quot;&gt;weight&lt;/code&gt; and check for values to set the weight to it&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  let weight;
  if (tokenValue &amp;gt;= 0.6){ // checking if the token(coin) value is higher than 0.6 (example: &amp;gt;0.6$ HBD/ &amp;gt;0.6 HIVE)
    weight = 100;
  } else if (tokenValue &amp;gt;= 0.25) { // same
    weight = 40;
  } else if (tokenValue &amp;gt;= 0.1) { // same
    weight = 20;
  }else{ // just like the else but if it's lower than 0.1
    weight = 10;
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;first, we check if the value is higher or equal to &lt;code class=&quot;highlighter-rouge&quot;&gt;0.6&lt;/code&gt; if it is we’re sending a full vote&lt;/p&gt;

&lt;p&gt;if the amount is higher than &lt;code class=&quot;highlighter-rouge&quot;&gt;0.25&lt;/code&gt; we’re sending 40% vote&lt;/p&gt;

&lt;p&gt;if the amount is higher than &lt;code class=&quot;highlighter-rouge&quot;&gt;0.1&lt;/code&gt; we’re sending 20% vote&lt;/p&gt;

&lt;p&gt;if the amount is lower than &lt;code class=&quot;highlighter-rouge&quot;&gt;0.1&lt;/code&gt;(else) we’re sending 10% vote&lt;/p&gt;

&lt;p&gt;now we need to get the ratio between hive and hbd, so because it’s simple bot we’re doing it manually&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  const HbdHiveRatio = 0.5; // the ratio between HBD and HIVE, example: HIVE = 0.8 and HBD 1.2, the ratio is around the 0.5 because you need 1.5 HIVE to get 1 HBD 

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;this is the ratio between hbd and hive, example: hive = 0.8 and hbd 1.2, the ratio is around 0.5 because you need 1.5 hive to get 1 HBD&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  if( tokenType == 'HIVE') { // checking if the token(coin) type is HIVE
      return (weight * HbdHiveRatio) * 100; //if it is the value weight will calculate with the Hbd to Hive Ratio
  } else {
      return weight * 100; // if it's not Hive it will be a regular vote
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;now we’re checking if the coin type is hive if it is we’re calculating it with the &lt;code class=&quot;highlighter-rouge&quot;&gt;hbd to hive&lt;/code&gt; ratio,
if the token is HBD we’ll send a normal vote.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;simply, you’re done, just run the script and check it, send 0.01 HBD to your account (the account that on the script) with the post URL and get the vote.
if there are any problems with the code, comment down below and I’ll help you!
&lt;strong&gt;if you have any suggestions for next tutorials I will appreciate it if you can comment on your suggestions, thanks!&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;have-a-great-day&quot;&gt;Have a great day!&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;
  See: &lt;a href=&quot;https://hive.blog/@lonelywolf/hive-patched-upvoting-by-payment-in-4-easy-steps-basic-bot&quot;&gt;[Hive Patched] Upvoting By Payment In 4 Easy Steps - Basic Bot&lt;/a&gt;
  by
  &lt;a href=&quot;https://hive.blog/@lonelywolf&quot;&gt;@lonelywolf&lt;/a&gt;
&lt;/p&gt;</content><author><name>lonelywolf</name></author><summary type="html">(Want to use the logo yourself? no problem, check out the post I made about My Art Design - Hive Logo) — Repository: https://www.npmjs.com/package/steem-js-patched Helpful tutorials: [HIVE Patched] SteemJS Full Tutorial - All The Functions - All The Abilities [Hive Patched Tutorial] SteemJS - Vote, Comment and Follow functions - All In One All of this tutorial is patched for Hive, so it works for steem and Hive! All of the examples and results is from the old tutorial but still same for hive! Hello! Today you’re going to learn how to create an upvoting bot with that calculate simply the voting power by the payment, note the calculation is a really simple calculation. Load the steem/HIVE package: const steem = require('steem-js-patched') To install the package npm install steem-js-patched --save - Repository above First we will add the user guest123 (or your account) to the code, this(guest123) is a global account for steemjs developers const ACC_NAME = 'guest123', // Account Name ACC_KEY = '5JRaypasxMx1L97ZUX7YuC5Psb5EAbF821kkAGtBj7xCJFQcbLg'; // Account Private WIF Key you want to add the Hive API to work with Hive blockchain steem.api.setOptions({ url: 'https://api.hive.blog' }); So, First things first, we will get from the easiest to the hardest, firstly we’re going to get the transactions from the blockchain steem.api.streamTransactions('head', function(err, result) { let type = result.operations[0][0]; // getting the type of the transaction let data = result.operations[0][1]; // getting the data of the transaction } this function gets the newest transactions that go through the hive blockchain, such as new blogs, transfers etc. as I already explained in the code, the type is getting the transaction type (new blogs/new transfer etc.) and data getting the data from the transaction, for the blog it will be an author, permlink, content etc. and for transfer, it will be a memo, sender, receiver etc. now we need to check if the transaction type is a transfer and if it is, we check if the receiver is our account. if(type == 'transfer' &amp;amp;&amp;amp; data.to == ACC_NAME) { // checking if the transaction type is a transfer and the reciever is our account } simple enough, we’re checking if type(transaction type) is transfer and if the receiver is our account. if it is we need to check the memo and check if the memo is url if it is we’re going to send the vote, if it’s not we’re getting it as normal transfers. var memo = data.memo.split('/'); if(memo[0] == &quot;https:&quot;){ // checking if the memo is a url console.log(&quot;Incoming request for vote from: &quot; + data.from +&quot;, value: &quot; + data.amount + &quot;\n\n&quot;); // sending a comment to the console and telling us that new request for vote is come. streamVote(data.memo, data.amount); }else{ console.log(&quot;Incoming transaction from: &quot; + data.from + &quot;, this is not a vote requst.&quot;); console.log(&quot;MEMO: &quot; + data.memo); } everything explained above! Now, create the functions - StreamVote &amp;amp; CalcVoteWeight firstly, streamvote, create a function called StreamVote with the variables URL, Amount function streamVote(url, amount) { } now we need to get the weight and the author const memo = url.split('/'); // spliting the URL to array const author = memo[4].split('@')[1]; // getting the author of the post const weight = calcVoteWeight(amount); // getting the weight value by the amount memo = url author is the author of the post that got from the url, example: https://steemit.com/utopian-io/@lonelywolf/steem-bots—auto-follower-bot-steemjs–nodejs—-begginer-tutorial weight is the calculated weight from the calculate function that we will create after. now we just need to stream the vote to the blockchain steem.broadcast.vote(ACC_KEY, ACC_NAME, author, memo[5], weight, function(err, result) { // starting the voting process if(!!err) throw err; // close the program and send comment to the console with the error details if there is an error console.log('Voted Succesfully, permalink: ' + memo[5] + ', author: ' + author + ', weight: ' + weight / 1000 + '%.', err); //if the vote Succesfully sent it will send all of the information to the console }); so we have the broadcast. vote function, as it says it sends a vote, it uses the wif(private key), the account name, the author name, the permlink(memo[5]) and the voting weight. if there is an error we’re sending it to the console and crash the application if everything has done successfully we’re sending the info to the console. The calculate function create a new function with the variable amountPaid //this function will calculate the voting weight for the paid upvote as simple as it can be function calcVoteWeight(amountPaid){ } now get the token type and value const token = amountPaid.split(' '), tokenType = token.pop(), //taking the token(coin) type [HIVE/HBD] tokenValue = token.shift(); // taking only the token(coin) value as easy as it can be, we’re splitting the string by spaces and getting the token type &amp;amp; value now create a new variable called weight and check for values to set the weight to it let weight; if (tokenValue &amp;gt;= 0.6){ // checking if the token(coin) value is higher than 0.6 (example: &amp;gt;0.6$ HBD/ &amp;gt;0.6 HIVE) weight = 100; } else if (tokenValue &amp;gt;= 0.25) { // same weight = 40; } else if (tokenValue &amp;gt;= 0.1) { // same weight = 20; }else{ // just like the else but if it's lower than 0.1 weight = 10; } first, we check if the value is higher or equal to 0.6 if it is we’re sending a full vote if the amount is higher than 0.25 we’re sending 40% vote if the amount is higher than 0.1 we’re sending 20% vote if the amount is lower than 0.1(else) we’re sending 10% vote now we need to get the ratio between hive and hbd, so because it’s simple bot we’re doing it manually const HbdHiveRatio = 0.5; // the ratio between HBD and HIVE, example: HIVE = 0.8 and HBD 1.2, the ratio is around the 0.5 because you need 1.5 HIVE to get 1 HBD this is the ratio between hbd and hive, example: hive = 0.8 and hbd 1.2, the ratio is around 0.5 because you need 1.5 hive to get 1 HBD if( tokenType == 'HIVE') { // checking if the token(coin) type is HIVE return (weight * HbdHiveRatio) * 100; //if it is the value weight will calculate with the Hbd to Hive Ratio } else { return weight * 100; // if it's not Hive it will be a regular vote } now we’re checking if the coin type is hive if it is we’re calculating it with the hbd to hive ratio, if the token is HBD we’ll send a normal vote. Conclusion simply, you’re done, just run the script and check it, send 0.01 HBD to your account (the account that on the script) with the post URL and get the vote. if there are any problems with the code, comment down below and I’ll help you! if you have any suggestions for next tutorials I will appreciate it if you can comment on your suggestions, thanks! Have a great day! See: [Hive Patched] Upvoting By Payment In 4 Easy Steps - Basic Bot by @lonelywolf</summary></entry><entry><title type="html">Devportal Hivesigner updates</title><link href="https://hivedocs.info/news/nodejs/hivesigner/2020/04/14/devportal-hivesigner-updates.html" rel="alternate" type="text/html" title="Devportal Hivesigner updates" /><published>2020-04-14T02:07:45-07:00</published><updated>2020-04-14T02:07:45-07:00</updated><id>https://hivedocs.info/news/nodejs/hivesigner/2020/04/14/devportal-hivesigner-updates</id><content type="html" xml:base="https://hivedocs.info/news/nodejs/hivesigner/2020/04/14/devportal-hivesigner-updates.html">&lt;p&gt;&lt;img src=&quot;https://img.esteem.app/kbgnol.png&quot; alt=&quot;kbgnol.png&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;devportal-updates&quot;&gt;Devportal updates&lt;/h1&gt;

&lt;p&gt;Earlier today, have made pull request to change and improve Hivesigner related dev documentation and Javascript tutorial which has been merged into master and already alive at &lt;a href=&quot;https://developers.hive.io&quot;&gt;Hive devportal&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Information about Hivesigner http://developers.hive.io/services/#services-hivesigner&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;JS tutorial on how to integrate Hivesigner into your Hive applications:
http://developers.hive.io/tutorials-javascript/hivesigner.html&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Documentation is important part of any service and tool, without it devs would have to hassle a lot, know how to integrate and how to use provided resources.&lt;/p&gt;

&lt;p&gt;I remember in 2016 when chain was launched, we had hard time to developing apps, had to go through blockchain code to find proper API calls and parameters, find secure way to sign transactions etc. We have come a long way since then and our documentations are way better and easier to follow.&lt;/p&gt;

&lt;p&gt;We have yet to document and implement a lot of pieces to make Hivesigner easy to understand for developers as well as users. Support our proposal to help us deliver those quicker!&lt;/p&gt;

&lt;h1 id=&quot;support-hivesigner-proposal&quot;&gt;Support Hivesigner proposal&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://hivesigner.com/sign/update-proposal-votes?proposal_ids=%5B88%5D&amp;amp;approve=true&quot;&gt;Vote for Proposal using Hivesigner&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;HiveDao: https://hivedao.com/proposal/88&lt;/li&gt;
  &lt;li&gt;PeakD: https://peakd.com/proposals/88&lt;/li&gt;
  &lt;li&gt;HiveBlog Wallet: https://wallet.hive.blog/proposals&lt;/li&gt;
  &lt;li&gt;Discord: https://discord.gg/pNJn7wh&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ledgerconnect/hivesigner/issues/2&quot;&gt;Github roadmap thread&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;

&lt;p&gt;
  See: &lt;a href=&quot;https://hive.blog/@good-karma/devportal-hivesigner-updates&quot;&gt;Devportal Hivesigner updates&lt;/a&gt;
  by
  &lt;a href=&quot;https://hive.blog/@good-karma&quot;&gt;@good-karma&lt;/a&gt;
&lt;/p&gt;</content><author><name>good-karma</name></author><summary type="html">Devportal updates Earlier today, have made pull request to change and improve Hivesigner related dev documentation and Javascript tutorial which has been merged into master and already alive at Hive devportal. Information about Hivesigner http://developers.hive.io/services/#services-hivesigner JS tutorial on how to integrate Hivesigner into your Hive applications: http://developers.hive.io/tutorials-javascript/hivesigner.html Documentation is important part of any service and tool, without it devs would have to hassle a lot, know how to integrate and how to use provided resources. I remember in 2016 when chain was launched, we had hard time to developing apps, had to go through blockchain code to find proper API calls and parameters, find secure way to sign transactions etc. We have come a long way since then and our documentations are way better and easier to follow. We have yet to document and implement a lot of pieces to make Hivesigner easy to understand for developers as well as users. Support our proposal to help us deliver those quicker! Support Hivesigner proposal Vote for Proposal using Hivesigner HiveDao: https://hivedao.com/proposal/88 PeakD: https://peakd.com/proposals/88 HiveBlog Wallet: https://wallet.hive.blog/proposals Discord: https://discord.gg/pNJn7wh Github roadmap thread See: Devportal Hivesigner updates by @good-karma</summary></entry><entry><title type="html">Simple Transaction Monitor</title><link href="https://hivedocs.info/howto/stream/python/2020/04/11/simple-transaction-monitor.html" rel="alternate" type="text/html" title="Simple Transaction Monitor" /><published>2020-04-11T16:58:21-07:00</published><updated>2020-04-11T16:58:21-07:00</updated><id>https://hivedocs.info/howto/stream/python/2020/04/11/simple-transaction-monitor</id><content type="html" xml:base="https://hivedocs.info/howto/stream/python/2020/04/11/simple-transaction-monitor.html">&lt;h1 id=&quot;pretty-straight-forward-monitor&quot;&gt;Pretty straight forward monitor&lt;/h1&gt;
&lt;p&gt;I’m back again with another simple python snippet of code to use in future projects. A lot of projects begin as needing something to monitor the chain and react accordingly. I thought about this and decided the best example to show how simple it is and a teaching tool to myself was to monitor the transaction ops and insert them into a database if they were to or from me.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://files.peakd.com/file/peakd-hive/thecrazygm/tr5VEsVA-monitor_output.png&quot; alt=&quot;monitor_output.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is the basis of listening for memos to react with a response of sorts. (In this case, put them into a simple sqlite3 DB) another popular option is to listen for the &lt;code class=&quot;highlighter-rouge&quot;&gt;comments&lt;/code&gt; op and check if something is mentioned (that may be another project/lesson in the future)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://files.peakd.com/file/peakd-hive/thecrazygm/fG2RgesY-monitor_db_output.png&quot; alt=&quot;monitor_db_output.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This example requires both &lt;a href=&quot;https://beem.readthedocs.io/en/latest/index.html&quot;&gt;beem&lt;/a&gt; and &lt;a href=&quot;https://dataset.readthedocs.io/en/latest/index.html&quot;&gt;dataset&lt;/a&gt; and will watch for whatever account you set as the &lt;code class=&quot;highlighter-rouge&quot;&gt;watch&lt;/code&gt; variable.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/env python3
&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;dataset&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;beem&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Steem&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;beem.blockchain&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Blockchain&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;watch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;thecrazygm&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;hive&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Steem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'https://anyx.io'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'sqlite:///mydatabase.db'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# System Variables
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blockchain&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Blockchain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;steem_instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blockchain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;opNames&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'transfer'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;raw_ops&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;threading&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thread_num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;watch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;


&lt;span class=&quot;c1&quot;&gt;# parse json data to SQL insert
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;update_db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'[Error: {e} moving on]'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rollback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;monitor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[Starting up...]&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Read the live stream and filter out only transfers
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;to&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;watch&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;from&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;watch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[Transaction Found from {post['from']} to {post['to']}]&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;update_db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;__main__&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;monitor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The code can be found always up to date at my &lt;a href=&quot;https://gist.github.com/TheCrazyGM&quot;&gt;GitHub gist area&lt;/a&gt; at this file: &lt;a href=&quot;https://gist.github.com/TheCrazyGM/9b2882a4adcea826815489b5a00ed089&quot;&gt;monitor.py&lt;/a&gt;
If you like what I’m doing consider following me, either here or on &lt;a href=&quot;https://github.com/thecrazygm&quot;&gt;GitHub&lt;/a&gt; or buy me a coffee.&lt;/p&gt;

&lt;p&gt;Again, stay safe out there people,
Michael Garcia a.k.a. @TheCrazyGM
&lt;img src=&quot;https://files.peakd.com/file/peakd-hive/thecrazygm/LjWZDEWC-signature_fancy.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;
  See: &lt;a href=&quot;https://hive.blog/@thecrazygm/simple-transaction-monitor&quot;&gt;Simple Transaction Monitor&lt;/a&gt;
  by
  &lt;a href=&quot;https://hive.blog/@thecrazygm&quot;&gt;@thecrazygm&lt;/a&gt;
&lt;/p&gt;</content><author><name>thecrazygm</name></author><summary type="html">Pretty straight forward monitor I’m back again with another simple python snippet of code to use in future projects. A lot of projects begin as needing something to monitor the chain and react accordingly. I thought about this and decided the best example to show how simple it is and a teaching tool to myself was to monitor the transaction ops and insert them into a database if they were to or from me. This is the basis of listening for memos to react with a response of sorts. (In this case, put them into a simple sqlite3 DB) another popular option is to listen for the comments op and check if something is mentioned (that may be another project/lesson in the future) This example requires both beem and dataset and will watch for whatever account you set as the watch variable. #!/usr/bin/env python3 import dataset from beem import Steem from beem.blockchain import Blockchain watch = &quot;thecrazygm&quot; hive = Steem(node='https://anyx.io') db = dataset.connect('sqlite:///mydatabase.db') # System Variables blockchain = Blockchain(steem_instance=hive) stream = blockchain.stream(opNames=['transfer'], raw_ops=False, threading=True, thread_num=4) table = db[watch] # parse json data to SQL insert def update_db(post): try: table.insert(dict(post)) db.commit() except Exception as e: print(f'[Error: {e} moving on]') db.rollback() def monitor(): print(&quot;[Starting up...]&quot;) db.begin() # Read the live stream and filter out only transfers for post in stream: if post[&quot;to&quot;] == watch or post[&quot;from&quot;] == watch: print(f&quot;[Transaction Found from {post['from']} to {post['to']}]&quot;) update_db(post) if __name__ == &quot;__main__&quot;: monitor() The code can be found always up to date at my GitHub gist area at this file: monitor.py If you like what I’m doing consider following me, either here or on GitHub or buy me a coffee. Again, stay safe out there people, Michael Garcia a.k.a. @TheCrazyGM See: Simple Transaction Monitor by @thecrazygm</summary></entry><entry><title type="html">Quick Tip: Hive Scripting - In 3 easy steps</title><link href="https://hivedocs.info/howto/nodejs/2020/04/10/quick-tip-hive-scripting-in-3-easy-steps.html" rel="alternate" type="text/html" title="Quick Tip: Hive Scripting - In 3 easy steps" /><published>2020-04-10T16:38:45-07:00</published><updated>2020-04-10T16:38:45-07:00</updated><id>https://hivedocs.info/howto/nodejs/2020/04/10/quick-tip-hive-scripting-in-3-easy-steps</id><content type="html" xml:base="https://hivedocs.info/howto/nodejs/2020/04/10/quick-tip-hive-scripting-in-3-easy-steps.html">&lt;p&gt;&lt;img src=&quot;https://images.hive.blog/DQmTr8ePbYQa6TKsoQAjmMMYzcj1Fz7Cd5stNW5CxL86LgF/Untitled-1.png&quot; alt=&quot;Untitled-1.png&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Hello, devs!
my name is stav AKA lonelywolf,
I’m a web developer, I worked with utopian-io for a good amount of time back in the days, I made a lot of useful tutorials mainly about STEEMjs
which is what we’re going to talk about today.&lt;/p&gt;

&lt;p&gt;so I’m not really familiar with Hive scripting, I don’t really have any idea how to transfer some projects of mine to Hive&lt;/p&gt;

&lt;p&gt;but I found out that with one command I can transfer my steemJS projects to hive projects.&lt;/p&gt;

&lt;h2 id=&quot;so-step-1&quot;&gt;so, Step 1&lt;/h2&gt;
&lt;p&gt;Install steemjs if you haven’t&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install steem --save
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;step-2&quot;&gt;Step 2&lt;/h2&gt;
&lt;p&gt;create your script, for example:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const steem = require('steem');

steem.api.getAccounts(['lonelywolf'], function(err, res){
    console.log(res, err)
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;this will give me all of my profile configuration and information&lt;/p&gt;

&lt;p&gt;so now we want to transfer it to Hive API, right?&lt;/p&gt;

&lt;h1 id=&quot;step-3&quot;&gt;Step 3&lt;/h1&gt;
&lt;p&gt;Now, all you just need to change the API URL,&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;steem.api.setOptions({  url: 'https://api.hive.blog' })
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;you can use any other node there is for hive.&lt;/p&gt;

&lt;p&gt;so now I’ll get my profile but as Hive configuration and Information
(results at the end of the post)&lt;/p&gt;

&lt;h1 id=&quot;hope-you-found-it-useful-please-leave-an-upvote-and-comment-down-below-how-are-you-scripting-in-hive-blockchain&quot;&gt;Hope you found it useful, please leave an upvote and comment down below how are you scripting in hive blockchain&lt;/h1&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[
  {
    id: 495898,
    name: 'lonelywolf',
    owner: { weight_threshold: 1, account_auths: [], key_auths: [Array] },
    active: { weight_threshold: 1, account_auths: [], key_auths: [Array] },
    posting: { weight_threshold: 1, account_auths: [Array], key_auths: [Array] },
    memo_key: 'STM7RNp4DJL3zTUMsXsejuy7Grc3AoH1pTvgFv4cuhfvstHwAT4iW',
    json_metadata: '{&quot;profile&quot;:{&quot;name&quot;:&quot;TheRealWolF&quot;,&quot;about&quot;:&quot;RealityHubs Moderator -- FS Developer&quot;,&quot;website&quot;:&quot;https://steemit.com/@lonelywolf&quot;,&quot;cover_image&quot;:&quot;https://cdn.steemitimages.com/DQmUxqC72fjzEraKeZLJU7WFJ89EJu4fTuGoxRNeRsc3GTc/steembanner.png&quot;,&quot;profile_image&quot;:&quot;https://cdn.steemitimages.com/DQmVSxtVsoeUgVN9sjvCFmBqUcPCVzCGoR9gouu8nWg8QUq/therealwolf_logo.png&quot;}}',
    posting_json_metadata: '{&quot;profile&quot;:{&quot;name&quot;:&quot;TheRealWolF&quot;,&quot;about&quot;:&quot;RealityHubs Moderator -- FS Developer&quot;,&quot;website&quot;:&quot;https://steemit.com/@lonelywolf&quot;,&quot;cover_image&quot;:&quot;https://cdn.steemitimages.com/DQmUxqC72fjzEraKeZLJU7WFJ89EJu4fTuGoxRNeRsc3GTc/steembanner.png&quot;,&quot;profile_image&quot;:&quot;https://cdn.steemitimages.com/DQmVSxtVsoeUgVN9sjvCFmBqUcPCVzCGoR9gouu8nWg8QUq/therealwolf_logo.png&quot;}}',
    proxy: '',
    last_owner_update: '2018-10-13T14:13:21',
    last_account_update: '2019-08-08T11:40:00',
    created: '2017-12-14T15:13:15',
    mined: false,
    recovery_account: 'steem',
    last_account_recovery: '1970-01-01T00:00:00',
    reset_account: 'null',
    comment_count: 0,
    lifetime_vote_count: 0,
    post_count: 865,
    can_vote: true,
    voting_manabar: { current_mana: '161750492879', last_update_time: 1586559381 },
    downvote_manabar: { current_mana: '43566594492', last_update_time: 1586559381 },
    voting_power: 9281,
    balance: '0.001 HIVE',
    savings_balance: '0.000 HIVE',
    sbd_balance: '0.000 HBD',
    sbd_seconds: '52214760',
    sbd_seconds_last_update: '2020-04-07T23:19:45',
    sbd_last_interest_payment: '2020-03-23T20:43:36',
    savings_sbd_balance: '0.000 HBD',
    savings_sbd_seconds: '0',
    savings_sbd_seconds_last_update: '2020-04-10T04:08:21',
    savings_sbd_last_interest_payment: '2020-04-10T04:08:21',
    savings_withdraw_requests: 1,
    reward_sbd_balance: '0.000 HBD',
    reward_steem_balance: '0.000 HIVE',
    reward_vesting_balance: '0.000000 VESTS',
    reward_vesting_steem: '0.000 HIVE',
    vesting_shares: '2984.805714 VESTS',
    delegated_vesting_shares: '2982.828925 VESTS',
    received_vesting_shares: '174264.401181 VESTS',
    vesting_withdraw_rate: '0.000000 VESTS',
    next_vesting_withdrawal: '1969-12-31T23:59:59',
    withdrawn: '60272175916',
    to_withdraw: '60272175916',
    withdraw_routes: 0,
    curation_rewards: 6910,
    posting_rewards: 1207947,
    proxied_vsf_votes: [ 0, 0, 0, 0 ],
    witnesses_voted_for: 3,
    last_post: '2020-04-10T23:12:00',
    last_root_post: '2020-04-10T19:32:24',
    last_vote_time: '2020-04-10T22:56:21',
    post_bandwidth: 0,
    pending_claimed_accounts: 0,
    vesting_balance: '0.000 HIVE',
    reputation: '16422564795330',
    transfer_history: [],
    market_history: [],
    post_history: [],
    vote_history: [],
    other_history: [],
    witness_votes: [ 'actifit', 'bdcommunity', 'emrebeyler' ],
    tags_usage: [],
    guest_bloggers: []
  }
] null
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;hr /&gt;

&lt;p&gt;
  See: &lt;a href=&quot;https://hive.blog/@lonelywolf/quick-tip-hive-scripting-in-3-easy-steps&quot;&gt;Quick Tip: Hive Scripting - In 3 easy steps&lt;/a&gt;
  by
  &lt;a href=&quot;https://hive.blog/@lonelywolf&quot;&gt;@lonelywolf&lt;/a&gt;
&lt;/p&gt;</content><author><name>lonelywolf</name></author><summary type="html">Hello, devs! my name is stav AKA lonelywolf, I’m a web developer, I worked with utopian-io for a good amount of time back in the days, I made a lot of useful tutorials mainly about STEEMjs which is what we’re going to talk about today. so I’m not really familiar with Hive scripting, I don’t really have any idea how to transfer some projects of mine to Hive but I found out that with one command I can transfer my steemJS projects to hive projects. so, Step 1 Install steemjs if you haven’t npm install steem --save Step 2 create your script, for example: const steem = require('steem'); steem.api.getAccounts(['lonelywolf'], function(err, res){ console.log(res, err) }) this will give me all of my profile configuration and information so now we want to transfer it to Hive API, right? Step 3 Now, all you just need to change the API URL, steem.api.setOptions({ url: 'https://api.hive.blog' }) you can use any other node there is for hive. so now I’ll get my profile but as Hive configuration and Information (results at the end of the post) Hope you found it useful, please leave an upvote and comment down below how are you scripting in hive blockchain [ { id: 495898, name: 'lonelywolf', owner: { weight_threshold: 1, account_auths: [], key_auths: [Array] }, active: { weight_threshold: 1, account_auths: [], key_auths: [Array] }, posting: { weight_threshold: 1, account_auths: [Array], key_auths: [Array] }, memo_key: 'STM7RNp4DJL3zTUMsXsejuy7Grc3AoH1pTvgFv4cuhfvstHwAT4iW', json_metadata: '{&quot;profile&quot;:{&quot;name&quot;:&quot;TheRealWolF&quot;,&quot;about&quot;:&quot;RealityHubs Moderator -- FS Developer&quot;,&quot;website&quot;:&quot;https://steemit.com/@lonelywolf&quot;,&quot;cover_image&quot;:&quot;https://cdn.steemitimages.com/DQmUxqC72fjzEraKeZLJU7WFJ89EJu4fTuGoxRNeRsc3GTc/steembanner.png&quot;,&quot;profile_image&quot;:&quot;https://cdn.steemitimages.com/DQmVSxtVsoeUgVN9sjvCFmBqUcPCVzCGoR9gouu8nWg8QUq/therealwolf_logo.png&quot;}}', posting_json_metadata: '{&quot;profile&quot;:{&quot;name&quot;:&quot;TheRealWolF&quot;,&quot;about&quot;:&quot;RealityHubs Moderator -- FS Developer&quot;,&quot;website&quot;:&quot;https://steemit.com/@lonelywolf&quot;,&quot;cover_image&quot;:&quot;https://cdn.steemitimages.com/DQmUxqC72fjzEraKeZLJU7WFJ89EJu4fTuGoxRNeRsc3GTc/steembanner.png&quot;,&quot;profile_image&quot;:&quot;https://cdn.steemitimages.com/DQmVSxtVsoeUgVN9sjvCFmBqUcPCVzCGoR9gouu8nWg8QUq/therealwolf_logo.png&quot;}}', proxy: '', last_owner_update: '2018-10-13T14:13:21', last_account_update: '2019-08-08T11:40:00', created: '2017-12-14T15:13:15', mined: false, recovery_account: 'steem', last_account_recovery: '1970-01-01T00:00:00', reset_account: 'null', comment_count: 0, lifetime_vote_count: 0, post_count: 865, can_vote: true, voting_manabar: { current_mana: '161750492879', last_update_time: 1586559381 }, downvote_manabar: { current_mana: '43566594492', last_update_time: 1586559381 }, voting_power: 9281, balance: '0.001 HIVE', savings_balance: '0.000 HIVE', sbd_balance: '0.000 HBD', sbd_seconds: '52214760', sbd_seconds_last_update: '2020-04-07T23:19:45', sbd_last_interest_payment: '2020-03-23T20:43:36', savings_sbd_balance: '0.000 HBD', savings_sbd_seconds: '0', savings_sbd_seconds_last_update: '2020-04-10T04:08:21', savings_sbd_last_interest_payment: '2020-04-10T04:08:21', savings_withdraw_requests: 1, reward_sbd_balance: '0.000 HBD', reward_steem_balance: '0.000 HIVE', reward_vesting_balance: '0.000000 VESTS', reward_vesting_steem: '0.000 HIVE', vesting_shares: '2984.805714 VESTS', delegated_vesting_shares: '2982.828925 VESTS', received_vesting_shares: '174264.401181 VESTS', vesting_withdraw_rate: '0.000000 VESTS', next_vesting_withdrawal: '1969-12-31T23:59:59', withdrawn: '60272175916', to_withdraw: '60272175916', withdraw_routes: 0, curation_rewards: 6910, posting_rewards: 1207947, proxied_vsf_votes: [ 0, 0, 0, 0 ], witnesses_voted_for: 3, last_post: '2020-04-10T23:12:00', last_root_post: '2020-04-10T19:32:24', last_vote_time: '2020-04-10T22:56:21', post_bandwidth: 0, pending_claimed_accounts: 0, vesting_balance: '0.000 HIVE', reputation: '16422564795330', transfer_history: [], market_history: [], post_history: [], vote_history: [], other_history: [], witness_votes: [ 'actifit', 'bdcommunity', 'emrebeyler' ], tags_usage: [], guest_bloggers: [] } ] null See: Quick Tip: Hive Scripting - In 3 easy steps by @lonelywolf</summary></entry><entry><title type="html">Update for beem: beempy installer for windows and beempy as shell</title><link href="https://hivedocs.info/howto/beem/python/wallet/2020/04/08/update-for-beem-beempy-installer-for-windows-and-beempy-as-shell.html" rel="alternate" type="text/html" title="Update for beem: beempy installer for windows and beempy as shell" /><published>2020-04-08T07:26:15-07:00</published><updated>2020-04-08T07:26:15-07:00</updated><id>https://hivedocs.info/howto/beem/python/wallet/2020/04/08/update-for-beem-beempy-installer-for-windows-and-beempy-as-shell</id><content type="html" xml:base="https://hivedocs.info/howto/beem/python/wallet/2020/04/08/update-for-beem-beempy-installer-for-windows-and-beempy-as-shell.html">&lt;h2 id=&quot;repository&quot;&gt;Repository&lt;/h2&gt;

&lt;p&gt;https://github.com/holgern/beem&lt;/p&gt;
&lt;center&gt;&lt;br /&gt;&lt;p&gt;&lt;img src=&quot;https://cdn.steemitimages.com/DQmcRrwLPSywSYMierfP6um6mejeMNGjN9Rxw7audJqTDgb/beem-logo&quot; alt=&quot;beem-logo&quot; /&gt;&lt;/p&gt;&lt;br /&gt;&lt;/center&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/holgern/beem&quot;&gt;beem&lt;/a&gt; is a python library for STEEM and HIVE.  The current version is 0.22.14.&lt;/p&gt;

&lt;p&gt;There is also a discord channel for beem: https://discord.gg/4HM592V&lt;/p&gt;

&lt;p&gt;The newest beem version can be installed by:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip install -U beem
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Check that you are using hive nodes. The following command&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;beempy updatenodes --hive
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;updates the nodelist and uses only hive nodes. After setting hive as default_chain, &lt;code class=&quot;highlighter-rouge&quot;&gt;beempy updatenodes&lt;/code&gt; can be used without switching to steem.&lt;/p&gt;

&lt;p&gt;The list of nodes can be checked with&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;beempy config
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;beempy currentnode
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;shows the currently connected node.&lt;/p&gt;

&lt;h2 id=&quot;upcoming-changes&quot;&gt;Upcoming changes&lt;/h2&gt;
&lt;p&gt;The next release will be 0.23.0 and the hive blockchain will then be set as new default. I will also rework the countless steem_instance parameters and replace them with a more fitting name. I will also create a new Hive class which is the new Steem() conterpart.&lt;/p&gt;

&lt;h2 id=&quot;changelog-for-versions-02214&quot;&gt;Changelog for versions 0.22.14&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;add click_shell to turn beempy into a shell utility with autocompletion&lt;/li&gt;
  &lt;li&gt;new click_shell added as requirements&lt;/li&gt;
  &lt;li&gt;Installer added for beempy on windows&lt;/li&gt;
  &lt;li&gt;Add get_hive_nodes and get_steem_nodes functions to NodeList&lt;/li&gt;
  &lt;li&gt;beempy command resteem renamed to reblog&lt;/li&gt;
  &lt;li&gt;When using in shell mode, beempy walletinfo –unlock can be used to unlock the wallet and walletinfo –lock to unlock it again&lt;/li&gt;
  &lt;li&gt;Add get_blockchain_name to Steem, returns either steem or hive&lt;/li&gt;
  &lt;li&gt;Add switch_blockchain to Steem, can be used to switch between hive and steem&lt;/li&gt;
  &lt;li&gt;Storage has now a new config “default_chain”, can be either hive or steem&lt;/li&gt;
  &lt;li&gt;updatenode –hive switches to hive and use hive nodes&lt;/li&gt;
  &lt;li&gt;updatenode –steem switches to steem and use steem nodes&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;upload-images&quot;&gt;Upload images&lt;/h2&gt;

&lt;p&gt;The url for imageupload has been fixed for hive:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;beempy uploadimage -a holger80 .\beempy_screencast.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;results now in:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;![](https://images.hive.blog/DQmX39y3dpZXUrvVxRGGmZsNxYmPEKmCDCE3XoUtbaFpodo/image)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;shell-mode-for-beempy&quot;&gt;Shell mode for beempy&lt;/h2&gt;
&lt;p&gt;beempy has now a shell mode, which is activated when started without any parameter:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;beempy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;You an see it here in action:
&lt;img src=&quot;https://images.hive.blog/DQmX39y3dpZXUrvVxRGGmZsNxYmPEKmCDCE3XoUtbaFpodo/image&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;windows-installer-for-beempy&quot;&gt;Windows installer for beempy&lt;/h2&gt;

&lt;p&gt;A windows installer is now automatically pushed to the release section:&lt;/p&gt;

&lt;p&gt;https://github.com/holgern/beem/releases/tag/0.22.14&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://files.peakd.com/file/peakd-hive/holger80/njJoUl4k-image.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After downloading and installing BeempySetup, a new icon is shown in the start menu:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://files.peakd.com/file/peakd-hive/holger80/cJq9SSyz-image.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When clicking on it, a new terminal with beempy in shell mode is started.&lt;/p&gt;

&lt;h2 id=&quot;wallet-unlocking-in-shell-mode&quot;&gt;Wallet unlocking in shell mode&lt;/h2&gt;
&lt;p&gt;When in shell mode, the wallet can be unlocked with&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;walletinfo --unlock
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;and locked again with&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;walletinfo --lock
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Closing the program locks also the wallet.&lt;/p&gt;

&lt;h2 id=&quot;nodelists-for-hive-and-steem&quot;&gt;Nodelists for hive and steem&lt;/h2&gt;
&lt;p&gt;The nodelist class has now two new functions:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from beem.nodelist import NodeList
nodelist = NodeList()
print(nodelist.get_hive_nodes())
print(nodelist.get_steem_nodes())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This helps, to be sure to use always the correct node.&lt;/p&gt;

&lt;h2 id=&quot;default_chain-as-new-config-parameter&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;default_chain&lt;/code&gt; as new config parameter&lt;/h2&gt;
&lt;p&gt;The currently used chain is stored in &lt;code class=&quot;highlighter-rouge&quot;&gt;default_chain&lt;/code&gt;. It can be set either to steem or to hive.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;beempy config
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;returns now:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;+-----------------+---------------------------------------------+
| Key             | Value                                       |
+-----------------+---------------------------------------------+
| default_account | holger80                                    |
| default_chain   | hive                                        |
| nodes           | [                                           |
|                 |     &quot;https://anyx.io&quot;,                      |
|                 |     &quot;http://anyx.io&quot;,                       |
|                 |     &quot;https://api.hivekings.com&quot;,            |
|                 |     &quot;https://api.hive.blog&quot;,                |
|                 |     &quot;https://api.openhive.network&quot;,         |
|                 |     &quot;https://techcoderx.com&quot;,               |
|                 |     &quot;https://rpc.esteem.app&quot;,               |
|                 |     &quot;https://hived.privex.io&quot;               |
|                 | ]                                           |
| data_dir        | ...\beem\beem |
+-----------------+---------------------------------------------+
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;beempy updatenodes
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;will now return only hive nodes, as default_chain is set to hive. &lt;code class=&quot;highlighter-rouge&quot;&gt;default_chain&lt;/code&gt; can be either &lt;code class=&quot;highlighter-rouge&quot;&gt;hive&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;steem&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;switching-between-hive-and-steem-in-python&quot;&gt;Switching between Hive and Steem in python&lt;/h2&gt;
&lt;p&gt;The steem object has now a &lt;code class=&quot;highlighter-rouge&quot;&gt;switch_blockchain&lt;/code&gt; function which switches between booth blockchains.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from beem import Steem
stm = Steem()
stm.switch_blockchain(&quot;steem&quot;)
print(stm)
stm.switch_blockchain(&quot;hive&quot;)
print(stm)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;returns&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;Steem node=https://steemd.minnowsupportproject.org, nobroadcast=False&amp;gt;
&amp;lt;Steem node=https://anyx.io, nobroadcast=False&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;switching-between-steem-and-hive-with-beempy&quot;&gt;Switching between steem and hive with beempy&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;beempy updatenodes --steem
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;switches to the steem blockchain
and&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;beempy updatenodes --hive
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;will switch to the hive blockchain.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;em&gt;If you like what I do, consider casting a vote for me as witness on &lt;a href=&quot;https://hivesigner.com.com/sign/account-witness-vote?witness=holger80&amp;amp;approve=1&quot;&gt;Hivesigner&lt;/a&gt; or on &lt;a href=&quot;https://peakd.com/witnesses&quot;&gt;PeakD&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;
  See: &lt;a href=&quot;https://hive.blog/@holger80/update-for-beem-beempy-installer-for-windows-and-beempy-as-shell&quot;&gt;Update for beem: beempy installer for windows and beempy as shell&lt;/a&gt;
  by
  &lt;a href=&quot;https://hive.blog/@holger80&quot;&gt;@holger80&lt;/a&gt;
&lt;/p&gt;</content><author><name>holger80</name></author><summary type="html">Repository https://github.com/holgern/beem beem is a python library for STEEM and HIVE. The current version is 0.22.14. There is also a discord channel for beem: https://discord.gg/4HM592V The newest beem version can be installed by: pip install -U beem Check that you are using hive nodes. The following command beempy updatenodes --hive updates the nodelist and uses only hive nodes. After setting hive as default_chain, beempy updatenodes can be used without switching to steem. The list of nodes can be checked with beempy config and beempy currentnode shows the currently connected node. Upcoming changes The next release will be 0.23.0 and the hive blockchain will then be set as new default. I will also rework the countless steem_instance parameters and replace them with a more fitting name. I will also create a new Hive class which is the new Steem() conterpart. Changelog for versions 0.22.14 add click_shell to turn beempy into a shell utility with autocompletion new click_shell added as requirements Installer added for beempy on windows Add get_hive_nodes and get_steem_nodes functions to NodeList beempy command resteem renamed to reblog When using in shell mode, beempy walletinfo –unlock can be used to unlock the wallet and walletinfo –lock to unlock it again Add get_blockchain_name to Steem, returns either steem or hive Add switch_blockchain to Steem, can be used to switch between hive and steem Storage has now a new config “default_chain”, can be either hive or steem updatenode –hive switches to hive and use hive nodes updatenode –steem switches to steem and use steem nodes Upload images The url for imageupload has been fixed for hive: beempy uploadimage -a holger80 .\beempy_screencast.gif results now in: ![](https://images.hive.blog/DQmX39y3dpZXUrvVxRGGmZsNxYmPEKmCDCE3XoUtbaFpodo/image) Shell mode for beempy beempy has now a shell mode, which is activated when started without any parameter: beempy You an see it here in action: Windows installer for beempy A windows installer is now automatically pushed to the release section: https://github.com/holgern/beem/releases/tag/0.22.14 After downloading and installing BeempySetup, a new icon is shown in the start menu: When clicking on it, a new terminal with beempy in shell mode is started. Wallet unlocking in shell mode When in shell mode, the wallet can be unlocked with walletinfo --unlock and locked again with walletinfo --lock Closing the program locks also the wallet. Nodelists for hive and steem The nodelist class has now two new functions: from beem.nodelist import NodeList nodelist = NodeList() print(nodelist.get_hive_nodes()) print(nodelist.get_steem_nodes()) This helps, to be sure to use always the correct node. default_chain as new config parameter The currently used chain is stored in default_chain. It can be set either to steem or to hive. beempy config returns now: +-----------------+---------------------------------------------+ | Key | Value | +-----------------+---------------------------------------------+ | default_account | holger80 | | default_chain | hive | | nodes | [ | | | &quot;https://anyx.io&quot;, | | | &quot;http://anyx.io&quot;, | | | &quot;https://api.hivekings.com&quot;, | | | &quot;https://api.hive.blog&quot;, | | | &quot;https://api.openhive.network&quot;, | | | &quot;https://techcoderx.com&quot;, | | | &quot;https://rpc.esteem.app&quot;, | | | &quot;https://hived.privex.io&quot; | | | ] | | data_dir | ...\beem\beem | +-----------------+---------------------------------------------+ beempy updatenodes will now return only hive nodes, as default_chain is set to hive. default_chain can be either hive or steem. Switching between Hive and Steem in python The steem object has now a switch_blockchain function which switches between booth blockchains. from beem import Steem stm = Steem() stm.switch_blockchain(&quot;steem&quot;) print(stm) stm.switch_blockchain(&quot;hive&quot;) print(stm) returns &amp;lt;Steem node=https://steemd.minnowsupportproject.org, nobroadcast=False&amp;gt; &amp;lt;Steem node=https://anyx.io, nobroadcast=False&amp;gt; Switching between steem and hive with beempy beempy updatenodes --steem switches to the steem blockchain and beempy updatenodes --hive will switch to the hive blockchain. If you like what I do, consider casting a vote for me as witness on Hivesigner or on PeakD. See: Update for beem: beempy installer for windows and beempy as shell by @holger80</summary></entry><entry><title type="html">Community Discussion and Updates: Hive Airdrop Exclusion List and Code Corrections, Core Developer Meetings</title><link href="https://hivedocs.info/news/2020/04/06/community-discussion-updates-hive-airdrop-exclusion-core-developer-meetings.html" rel="alternate" type="text/html" title="Community Discussion and Updates: Hive Airdrop Exclusion List and Code Corrections, Core Developer Meetings" /><published>2020-04-06T14:48:21-07:00</published><updated>2020-04-06T14:48:21-07:00</updated><id>https://hivedocs.info/news/2020/04/06/community-discussion-updates-hive-airdrop-exclusion-core-developer-meetings</id><content type="html" xml:base="https://hivedocs.info/news/2020/04/06/community-discussion-updates-hive-airdrop-exclusion-core-developer-meetings.html">&lt;p&gt;&lt;img src=&quot;https://files.peakd.com/file/peakd-hive/hiveio/cLJ4bsla-2923mN3pnd7PfoCxi33KmQBGRMVc3LuPSdqaxkc4VTC4w3DcqvmA77rgFhB5tnBUPfW9kNA31G2EYdQokBKxkGART6GCwiKa9tzGMFAPoRtPh8.png&quot; alt=&quot;#aroundthehive ... a very shiny asset provided by community member @midlet&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;the-buzz-this-week-has-been-busy-busy-busy-this-update-will-cover-two-important-topics-airdrop-corrections-and-appeals-and-hive-core-developer-meetings&quot;&gt;The buzz this week has been busy, busy, busy. This update will cover two important topics: airdrop corrections and appeals, and Hive core developer meetings.&lt;/h2&gt;
&lt;p&gt; 
&lt;a href=&quot;https://peakd.com/hiveblockchain/@hiveio/buzz-from-around-the-hive-first-week-recap-tips-and-info&quot;&gt;In the last update&lt;/a&gt;, we discussed the initial airdrop exclusion list, community feedback and proposals, and that an error had been found in the distribution code. Over the course of this week, the script has been reviewed in depth by a number of developers and corrected, so before anything else: an updated list has been compiled of the user accounts who will be correctly dropped tokens via the next upcoming Hive hardfork. We’re including all of the public links to the code in this post should you wish to take a closer look.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The list of incorrectly excluded accounts are as follows:&lt;/strong&gt;
These accounts will be corrected automatically and the community does not need to make any vote.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[
  &quot;akiroq&quot;,
  &quot;balticbadger&quot;,
  &quot;dailychina&quot;,
  &quot;dailystats&quot;,
  &quot;dftba&quot;,
  &quot;double-u&quot;,
  &quot;edgarare1&quot;,
  &quot;electrodo&quot;,
  &quot;fadetoblack&quot;,
  &quot;freedompoint&quot;,
  &quot;friendlystranger&quot;,
  &quot;john371911&quot;,
  &quot;juancar347&quot;,
  &quot;kdtkaren&quot;,
  &quot;lichtblick&quot;,
  &quot;lifeskills-tv&quot;,
  &quot;lotusfleur&quot;,
  &quot;ricko66&quot;,
  &quot;rynow&quot;,
  &quot;scottcbusiness&quot;,
  &quot;seo-boss&quot;,
  &quot;sgbonus&quot;,
  &quot;spoke&quot;,
  &quot;steemchiller&quot;,
  &quot;steemflower&quot;,
  &quot;stimp1024&quot;,
  &quot;travelnepal&quot;,
  &quot;truce&quot;,
  &quot;tuckerjtruman&quot;,
  &quot;wisdomandjustice&quot;,
  &quot;yanirauseche&quot;
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The original script error was an edge case that arose from proxies that were switched or cleared, where accounts revoted in a way that wasn’t accounted for. The corrected script and new results &lt;a href=&quot;https://gist.github.com/drov0/545f1bad3e5a6c6a047ba2ce82ebe164/revisions&quot;&gt;are available here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;what-did-these-scripts-do-what-was-the-criteria-what-groups-are-left-for-the-community-to-vote-on&quot;&gt;What did these scripts do? What was the criteria? What groups are left for the community to vote on?&lt;/h3&gt;
&lt;p&gt;  
Reading and understanding the code from these scripts can be tricky if it isn’t your forte. The script that was used to pull the excluded airdrop accounts is based on a set of criteria that produces transparent and reproducible data from the Steem blockchain. These accounts were not included in the first block of the Hive hardfork when the airdrop was distributed. The criteria used was:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;voting for 2 or more of the sockpuppet Steem witness accounts, or proxied to someone voting 2 or more sockpuppet accounts&lt;/li&gt;
  &lt;li&gt;who did not unvote or unproxy before the Hive &lt;a href=&quot;https://steemd.com/communityfork/@hiveio/announcing-the-launch-of-hive-blockchain&quot;&gt;hardfork announcement&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;who had over 1000 SP&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt; 
The remaining accounts who were accurately excluded are still able to use Hive as they see fit: &lt;strong&gt;&lt;em&gt;they are not blocked or locked from using the chain or any interfaces&lt;/em&gt;&lt;/strong&gt;, and many are already doing so. However, the community has been very passionate across a range of opinions on whether these accounts should be included in the appeal airdrop distribution. There are two main groups of accounts that were correctly excluded from the initial airdrop:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;those accounts who were proxied to a voter who was voting for sockpuppets and matched the above criteria&lt;/li&gt;
  &lt;li&gt;those accounts who voted the sock puppets for themselves who matched the above criteria&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt; 
These two groups will have appeal proposals made by the @HiveIO account in the coming weeks leading up to the next hardfork. The community will have an opportunity to vote to support a secondary drop for one, both, or neither of these groups as they see fit. We encourage discussion among the Hive community on these groups, and ask that you consider carefully and communicate openly and respectfully to each other, even if you may not share the same opinions!&lt;/p&gt;

&lt;h2 id=&quot;one-of-the-most-difficult-things-about-moving-towards-decentralization-is-deciding-who-will-do-what-today-we-began-looking-at-ways-to-help-stay-organized-and-get-more-done&quot;&gt;One of the most difficult things about moving towards decentralization is deciding who will do what! Today we began looking at ways to help stay organized and get more done.&lt;/h2&gt;
&lt;p&gt; 
To that end, this morning marked the first core developers’ meeting for Hive. The live streaming account wasn’t approved in time for the inaugural meeting, but it was recorded (&lt;a href=&quot;https://www.youtube.com/watch?v=v4cfY6wxGdg&quot;&gt;you can listen in here&lt;/a&gt;- like and subscribe to the channel for future notifications). The meetings will be live streamed via &lt;a href=&quot;https://www.youtube.com/channel/UCwM89V7NzVIHizgWT3GxhwA&quot;&gt;YouTube&lt;/a&gt; and other platforms moving forwards.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;These meetings will be open to anyone working on core development to participate in, and will be live streamed and recorded for anyone who would like to listen.&lt;/strong&gt; In many cases, the core development meetings are likely to get more technical and probably won’t be interesting to everyone in the ecosystem (sorry, devs!) To make sure people of all technical abilities can stay up to date, the @HiveIO account will be creating &lt;em&gt;“What’s Buzzing Around The Repo”&lt;/em&gt; posts the following day with links to help summarize what’s covered in the meetings to make it easier to understand. You can expect the first of these posts tomorrow!&lt;/p&gt;

&lt;h4 id=&quot;to-finish-up-todays-post-here-are-a-few-handy-links-to-remind-you-where-a-lot-of-the-public-open-source-work-is-happening-if-you-would-like-to-get-involved-take-a-look-around-and-see-what-might-be-a-good-fit&quot;&gt;To finish up today’s post, here are a few handy links to remind you where a lot of the public open source work is happening. If you would like to get involved, take a look around and see what might be a good fit!&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;The public, open source GitLab: https://gitlab.syncad.com/hive&lt;/li&gt;
  &lt;li&gt;The developer’s portal: https://developers.hive.io/&lt;/li&gt;
  &lt;li&gt;The main website: https://hive.io/ (links to many useful things here, under continual development)&lt;/li&gt;
  &lt;li&gt;One of the project sites where you can browse and list projects in the Hive ecosystem: https://hiveprojects.io/&lt;/li&gt;
  &lt;li&gt;Block explorers: https://hiveblocks.com/ and https://hive-db.com/&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;thanks-for-another-solid-week-please-help-spread-the-info-from-hiveio-&quot;&gt;Thanks for another solid week! Please help spread the info from @HiveIO 🐝&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;
  See: &lt;a href=&quot;https://hive.blog/@hiveio/community-discussion-updates-hive-airdrop-exclusion-core-developer-meetings&quot;&gt;Community Discussion and Updates: Hive Airdrop Exclusion List and Code Corrections, Core Developer Meetings&lt;/a&gt;
  by
  &lt;a href=&quot;https://hive.blog/@hiveio&quot;&gt;@hiveio&lt;/a&gt;
&lt;/p&gt;</content><author><name>hiveio</name></author><summary type="html">The buzz this week has been busy, busy, busy. This update will cover two important topics: airdrop corrections and appeals, and Hive core developer meetings.   In the last update, we discussed the initial airdrop exclusion list, community feedback and proposals, and that an error had been found in the distribution code. Over the course of this week, the script has been reviewed in depth by a number of developers and corrected, so before anything else: an updated list has been compiled of the user accounts who will be correctly dropped tokens via the next upcoming Hive hardfork. We’re including all of the public links to the code in this post should you wish to take a closer look. The list of incorrectly excluded accounts are as follows: These accounts will be corrected automatically and the community does not need to make any vote. [ &quot;akiroq&quot;, &quot;balticbadger&quot;, &quot;dailychina&quot;, &quot;dailystats&quot;, &quot;dftba&quot;, &quot;double-u&quot;, &quot;edgarare1&quot;, &quot;electrodo&quot;, &quot;fadetoblack&quot;, &quot;freedompoint&quot;, &quot;friendlystranger&quot;, &quot;john371911&quot;, &quot;juancar347&quot;, &quot;kdtkaren&quot;, &quot;lichtblick&quot;, &quot;lifeskills-tv&quot;, &quot;lotusfleur&quot;, &quot;ricko66&quot;, &quot;rynow&quot;, &quot;scottcbusiness&quot;, &quot;seo-boss&quot;, &quot;sgbonus&quot;, &quot;spoke&quot;, &quot;steemchiller&quot;, &quot;steemflower&quot;, &quot;stimp1024&quot;, &quot;travelnepal&quot;, &quot;truce&quot;, &quot;tuckerjtruman&quot;, &quot;wisdomandjustice&quot;, &quot;yanirauseche&quot; ] The original script error was an edge case that arose from proxies that were switched or cleared, where accounts revoted in a way that wasn’t accounted for. The corrected script and new results are available here. What did these scripts do? What was the criteria? What groups are left for the community to vote on?   Reading and understanding the code from these scripts can be tricky if it isn’t your forte. The script that was used to pull the excluded airdrop accounts is based on a set of criteria that produces transparent and reproducible data from the Steem blockchain. These accounts were not included in the first block of the Hive hardfork when the airdrop was distributed. The criteria used was: voting for 2 or more of the sockpuppet Steem witness accounts, or proxied to someone voting 2 or more sockpuppet accounts who did not unvote or unproxy before the Hive hardfork announcement who had over 1000 SP   The remaining accounts who were accurately excluded are still able to use Hive as they see fit: they are not blocked or locked from using the chain or any interfaces, and many are already doing so. However, the community has been very passionate across a range of opinions on whether these accounts should be included in the appeal airdrop distribution. There are two main groups of accounts that were correctly excluded from the initial airdrop: those accounts who were proxied to a voter who was voting for sockpuppets and matched the above criteria those accounts who voted the sock puppets for themselves who matched the above criteria   These two groups will have appeal proposals made by the @HiveIO account in the coming weeks leading up to the next hardfork. The community will have an opportunity to vote to support a secondary drop for one, both, or neither of these groups as they see fit. We encourage discussion among the Hive community on these groups, and ask that you consider carefully and communicate openly and respectfully to each other, even if you may not share the same opinions! One of the most difficult things about moving towards decentralization is deciding who will do what! Today we began looking at ways to help stay organized and get more done.   To that end, this morning marked the first core developers’ meeting for Hive. The live streaming account wasn’t approved in time for the inaugural meeting, but it was recorded (you can listen in here- like and subscribe to the channel for future notifications). The meetings will be live streamed via YouTube and other platforms moving forwards. These meetings will be open to anyone working on core development to participate in, and will be live streamed and recorded for anyone who would like to listen. In many cases, the core development meetings are likely to get more technical and probably won’t be interesting to everyone in the ecosystem (sorry, devs!) To make sure people of all technical abilities can stay up to date, the @HiveIO account will be creating “What’s Buzzing Around The Repo” posts the following day with links to help summarize what’s covered in the meetings to make it easier to understand. You can expect the first of these posts tomorrow! To finish up today’s post, here are a few handy links to remind you where a lot of the public open source work is happening. If you would like to get involved, take a look around and see what might be a good fit! The public, open source GitLab: https://gitlab.syncad.com/hive The developer’s portal: https://developers.hive.io/ The main website: https://hive.io/ (links to many useful things here, under continual development) One of the project sites where you can browse and list projects in the Hive ecosystem: https://hiveprojects.io/ Block explorers: https://hiveblocks.com/ and https://hive-db.com/ Thanks for another solid week! Please help spread the info from @HiveIO 🐝 See: Community Discussion and Updates: Hive Airdrop Exclusion List and Code Corrections, Core Developer Meetings by @hiveio</summary></entry><entry><title type="html">Update for beem: huge performance improvements and bridge API support</title><link href="https://hivedocs.info/howto/beem/python/communities/2020/04/06/update-for-beem-huge-performance-improvements-and-bridge-api-support.html" rel="alternate" type="text/html" title="Update for beem: huge performance improvements and bridge API support" /><published>2020-04-06T05:04:18-07:00</published><updated>2020-04-06T05:04:18-07:00</updated><id>https://hivedocs.info/howto/beem/python/communities/2020/04/06/update-for-beem-huge-performance-improvements-and-bridge-api-support</id><content type="html" xml:base="https://hivedocs.info/howto/beem/python/communities/2020/04/06/update-for-beem-huge-performance-improvements-and-bridge-api-support.html">&lt;h2 id=&quot;repository&quot;&gt;Repository&lt;/h2&gt;
&lt;p&gt;https://github.com/holgern/beem&lt;/p&gt;
&lt;center&gt;&lt;br /&gt;&lt;p&gt;&lt;img src=&quot;https://cdn.steemitimages.com/DQmcRrwLPSywSYMierfP6um6mejeMNGjN9Rxw7audJqTDgb/beem-logo&quot; alt=&quot;beem-logo&quot; /&gt;&lt;/p&gt;&lt;br /&gt;&lt;/center&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/holgern/beem&quot;&gt;beem&lt;/a&gt; is a python library for STEEM and HIVE.  The current version is 0.22.13.&lt;/p&gt;

&lt;p&gt;There is also a discord channel for beem: https://discord.gg/4HM592V&lt;/p&gt;

&lt;p&gt;The newest beem version can be installed by:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip install -U beem
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Check that you are using hive nodes. The following command&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;beempy updatenodes --hive
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;updates the nodelist and uses only hive nodes. The list of nodes can be checked with&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;beempy config
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;and&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;beempy currentnode
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;shows the currently connected node.&lt;/p&gt;

&lt;h2 id=&quot;changelog-for-versions-02213&quot;&gt;Changelog for versions 0.22.13&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;HiveSigner support added&lt;/li&gt;
  &lt;li&gt;api link to steemconnect has been fixed&lt;/li&gt;
  &lt;li&gt;change recovery account added to beempy&lt;/li&gt;
  &lt;li&gt;hive node has been added&lt;/li&gt;
  &lt;li&gt;add account get_notifications and mark_notifications_as_read&lt;/li&gt;
  &lt;li&gt;beempy notifications has been added&lt;/li&gt;
  &lt;li&gt;bridge api support added&lt;/li&gt;
  &lt;li&gt;config storage improved and add get_default_config_storage, get_default_key_storage and get_default_token_storage&lt;/li&gt;
  &lt;li&gt;list_all_subscriptions and get_account_posts added&lt;/li&gt;
  &lt;li&gt;reduce number of performed api calls on Steem object creation&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;performance-boost-for-beem&quot;&gt;Performance boost for beem&lt;/h2&gt;
&lt;p&gt;All integration tests are finishing now in&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;========== 469 passed, 27 skipped, 11 warnings in 1040.19s (0:17:20) ===========
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;which is an improvement of 49% (version 0.22.12 needed 1551 seconds).&lt;/p&gt;

&lt;p&gt;This huge boost could be accomplished by reducing the number of API calls when creating the Steem object. When importing objects from beem, a &lt;code class=&quot;highlighter-rouge&quot;&gt;configStorage&lt;/code&gt; object is no longer created during import. The config storage is now read during object creation with &lt;code class=&quot;highlighter-rouge&quot;&gt;get_default_config_storage&lt;/code&gt;. This speeds up importing beem modules and read stored parameter only when needed.&lt;/p&gt;

&lt;p&gt;These changes improves also the speed of all beempy commands.&lt;/p&gt;

&lt;h2 id=&quot;bridge-api&quot;&gt;Bridge API&lt;/h2&gt;
&lt;p&gt;beem supports now parts of the bridge API. More functions to support the missing API calls will follow.&lt;/p&gt;

&lt;h3 id=&quot;notifications&quot;&gt;notifications&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;beempy notifications holger80
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;prints a table with unread notifications.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;+---------------------+------+-------------------------------------------+
|                Date | Type |                                   Message |
+---------------------+------+-------------------------------------------+
| 2020-04-06 10:15:57 | vote |       @uwelang voted on your post ($0.23) |
| 2020-04-06 12:52:00 | vote | @steemcleaners voted on your post ($2.45) |
+---------------------+------+-------------------------------------------+
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;They can also marked as read with &lt;code class=&quot;highlighter-rouge&quot;&gt;-m&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;beempy notifications -m holger80
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;which broadcasts notify custom_json.&lt;/p&gt;

&lt;h3 id=&quot;list-all-subscribtions&quot;&gt;list all subscribtions&lt;/h3&gt;
&lt;p&gt;The account object has now a &lt;code class=&quot;highlighter-rouge&quot;&gt;list_all_subscriptions&lt;/code&gt; functions which returns   a list with all cummunities which the account has subscript.&lt;/p&gt;

&lt;h3 id=&quot;get_account_posts&quot;&gt;get_account_posts&lt;/h3&gt;
&lt;p&gt;The account object has now the &lt;code class=&quot;highlighter-rouge&quot;&gt;get_account_posts&lt;/code&gt; function, which can be used to fetch all posts shown in the feed of the account.&lt;/p&gt;

&lt;h3 id=&quot;get_ranked_posts&quot;&gt;get_ranked_posts&lt;/h3&gt;
&lt;p&gt;A new class &lt;code class=&quot;highlighter-rouge&quot;&gt;RankedPosts&lt;/code&gt; was added to &lt;code class=&quot;highlighter-rouge&quot;&gt;beem.comment&lt;/code&gt; which can be used to receive ranked posts.&lt;/p&gt;

&lt;h2 id=&quot;change-recovery-account-with-beempy&quot;&gt;Change recovery account with beempy&lt;/h2&gt;
&lt;p&gt;It is now possible to change the recovery account using beempy&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;beempy changerecovery -a holge80 recovery.account
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;hivesigner-support-was-added&quot;&gt;HiveSigner support was added&lt;/h2&gt;
&lt;p&gt;The following python example shows how to create a login link:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from beem.hivesigner import HiveSigner
hivesigner = HiveSigner(client_id=&quot;rewarding.app&quot;, scope=&quot;login&quot;, get_refresh_token=False)
hivesigner.get_login_url('https://rewarding.app/welcome')
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;returns&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;'https://hivesigner.com/oauth2/authorize?client_id=rewarding.app&amp;amp;redirect_uri=https%3A%2F%2Frewarding.app%2Fwelcome&amp;amp;scope=login'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The received token can then be used to check if a user was successfully entering its posting key in a python script:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;try:
    hivesigner.set_access_token(access_token)
    name = hivesigner.me()[&quot;name&quot;]
except:
    print(&quot;Wrong token&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;
  See: &lt;a href=&quot;https://hive.blog/@holger80/update-for-beem-huge-performance-improvements-and-bridge-api-support&quot;&gt;Update for beem: huge performance improvements and bridge API support&lt;/a&gt;
  by
  &lt;a href=&quot;https://hive.blog/@holger80&quot;&gt;@holger80&lt;/a&gt;
&lt;/p&gt;</content><author><name>holger80</name></author><summary type="html">Repository https://github.com/holgern/beem beem is a python library for STEEM and HIVE. The current version is 0.22.13. There is also a discord channel for beem: https://discord.gg/4HM592V The newest beem version can be installed by: pip install -U beem Check that you are using hive nodes. The following command beempy updatenodes --hive updates the nodelist and uses only hive nodes. The list of nodes can be checked with beempy config and beempy currentnode shows the currently connected node. Changelog for versions 0.22.13 HiveSigner support added api link to steemconnect has been fixed change recovery account added to beempy hive node has been added add account get_notifications and mark_notifications_as_read beempy notifications has been added bridge api support added config storage improved and add get_default_config_storage, get_default_key_storage and get_default_token_storage list_all_subscriptions and get_account_posts added reduce number of performed api calls on Steem object creation Performance boost for beem All integration tests are finishing now in ========== 469 passed, 27 skipped, 11 warnings in 1040.19s (0:17:20) =========== which is an improvement of 49% (version 0.22.12 needed 1551 seconds). This huge boost could be accomplished by reducing the number of API calls when creating the Steem object. When importing objects from beem, a configStorage object is no longer created during import. The config storage is now read during object creation with get_default_config_storage. This speeds up importing beem modules and read stored parameter only when needed. These changes improves also the speed of all beempy commands. Bridge API beem supports now parts of the bridge API. More functions to support the missing API calls will follow. notifications beempy notifications holger80 prints a table with unread notifications. +---------------------+------+-------------------------------------------+ | Date | Type | Message | +---------------------+------+-------------------------------------------+ | 2020-04-06 10:15:57 | vote | @uwelang voted on your post ($0.23) | | 2020-04-06 12:52:00 | vote | @steemcleaners voted on your post ($2.45) | +---------------------+------+-------------------------------------------+ They can also marked as read with -m beempy notifications -m holger80 which broadcasts notify custom_json. list all subscribtions The account object has now a list_all_subscriptions functions which returns a list with all cummunities which the account has subscript. get_account_posts The account object has now the get_account_posts function, which can be used to fetch all posts shown in the feed of the account. get_ranked_posts A new class RankedPosts was added to beem.comment which can be used to receive ranked posts. Change recovery account with beempy It is now possible to change the recovery account using beempy beempy changerecovery -a holge80 recovery.account HiveSigner support was added The following python example shows how to create a login link: from beem.hivesigner import HiveSigner hivesigner = HiveSigner(client_id=&quot;rewarding.app&quot;, scope=&quot;login&quot;, get_refresh_token=False) hivesigner.get_login_url('https://rewarding.app/welcome') returns 'https://hivesigner.com/oauth2/authorize?client_id=rewarding.app&amp;amp;redirect_uri=https%3A%2F%2Frewarding.app%2Fwelcome&amp;amp;scope=login' The received token can then be used to check if a user was successfully entering its posting key in a python script: try: hivesigner.set_access_token(access_token) name = hivesigner.me()[&quot;name&quot;] except: print(&quot;Wrong token&quot;) See: Update for beem: huge performance improvements and bridge API support by @holger80</summary></entry><entry><title type="html">Tutorial: Building A Dice Game Contract With Hive Stream (Part 2)</title><link href="https://hivedocs.info/howto/dapps/nodejs/2020/04/06/tutorial-building-a-dice-game-contract-with-hive-stream-part-2.html" rel="alternate" type="text/html" title="Tutorial: Building A Dice Game Contract With Hive Stream (Part 2)" /><published>2020-04-06T04:00:21-07:00</published><updated>2020-04-06T04:00:21-07:00</updated><id>https://hivedocs.info/howto/dapps/nodejs/2020/04/06/tutorial-building-a-dice-game-contract-with-hive-stream-part-2</id><content type="html" xml:base="https://hivedocs.info/howto/dapps/nodejs/2020/04/06/tutorial-building-a-dice-game-contract-with-hive-stream-part-2.html">&lt;p&gt;If you missed &lt;a href=&quot;https://peakd.com/hive-139531/@beggars/tutorial-building-a-dice-game-contract-with-hive-stream&quot;&gt;part one here&lt;/a&gt;, we built a basic dice game contract which allows people to bet on an outcome and either win or lose. The tutorial left out some things that you might want to do in a real deployment.&lt;/p&gt;

&lt;h2 id=&quot;install-mongodb&quot;&gt;Install MongoDB&lt;/h2&gt;

&lt;p&gt;For this tutorial, we are going to use MongoDB as the database behind it. We’ll be storing transactions and outcomes in the database, so we can ensure that transfers are not processed multiple times.&lt;/p&gt;

&lt;p&gt;While the streamer keeps track of the last processed block number in a JSON file or SQLite database, what happens if your node goes down and the file gets edited or deleted? It would result in missed transactions which would be a pain to manually process.&lt;/p&gt;

&lt;p&gt;Download the community version installer from the official &lt;a href=&quot;https://www.mongodb.com/download-center/community&quot;&gt;MongoDB&lt;/a&gt; website. Choose the appropriate installer for your operating system and follow the instructions. It should require very little input, just keep clicking next basically and keep everything as default.&lt;/p&gt;

&lt;h2 id=&quot;build-a-mongodb-adapter&quot;&gt;Build a MongoDB adapter&lt;/h2&gt;

&lt;p&gt;Now, we need to write an adapter that will allow Hive Stream to work with MongoDB instead of the file databases that it is configured out-of-the-box to use. Provided you have Hive Stream installed (version 2+) you should have the new adapter’s functionality.&lt;/p&gt;

&lt;p&gt;An adapter for standard use cases consists of just two mandatory methods &lt;code class=&quot;highlighter-rouge&quot;&gt;loadState&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;saveState&lt;/code&gt; the &lt;code class=&quot;highlighter-rouge&quot;&gt;loadState&lt;/code&gt; method gets called when the streamer starts to start at the last block it finished. The &lt;code class=&quot;highlighter-rouge&quot;&gt;saveState&lt;/code&gt; method updates with the latest processed block.&lt;/p&gt;

&lt;p&gt;There are however other lifecycle methods which we can use in our more functional adapters. &lt;code class=&quot;highlighter-rouge&quot;&gt;create&lt;/code&gt; is called on initialisation, you can setup instances and connections in here. &lt;code class=&quot;highlighter-rouge&quot;&gt;destroy&lt;/code&gt; is called when everything is stopped, so naturally you close database connections in here.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;processOperation&lt;/code&gt; is a method that gets the latest block number, transaction ID and so forth. It’s metadata used to identify specific transactions and their block data. The &lt;code class=&quot;highlighter-rouge&quot;&gt;processTransfer&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;processCustomJson&lt;/code&gt; methods are called when a matching transfer or custom JSON operation is matched to a contract. It also gets contract information as well as the payload and other helpful info.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Save the following as &lt;code class=&quot;highlighter-rouge&quot;&gt;mongo.adapter.js&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import { AdapterBase } from 'hive-stream';

import { MongoClient, Db } from 'mongodb';

export class MongodbAdapter extends AdapterBase {
    client;
    db;

    mongo = {
        uri: '',
        database: '',
        options: {}
    };

    blockNumber;
    lastBlockNumber;
    blockId;
    prevBlockId;
    transactionId;

    constructor(uri, databasw, options = { useNewUrlParser: true,  useUnifiedTopology: true }) {
        super();

        this.mongo.uri = uri;
        this.mongo.database = database;
        this.mongo.options = options;
    }

    async create() {
        try {
            this.client = await MongoClient.connect(this.mongo.uri, this.mongo.options);
            this.db = this.client.db(this.mongo.database);

            return true;
        } catch (e) {
            throw e;
        }
    }

    async loadState() {
        try {
            const collection = this.db.collection('params');
            const params = await collection.findOne({});

            if (params) {
                return params;
            }
        } catch (e) {
            throw e;
        }
    }

    async saveState(data) {
        try {
            const collection = this.db.collection('params');

            await collection.replaceOne({}, data, {  upsert: true});

            return true;
        } catch (e) {
            throw e;
        }
    }

    async processOperation(op, blockNumber, blockId, prevBlockId, trxId, blockTime) {
        this.blockNumber = blockNumber;
        this.blockId = blockId;
        this.prevBlockId = prevBlockId;
        this.transactionId = trxId;
    }

    async processTransfer(operation, payload, metadata) {
        const collection = this.db.collection('transfers');

        const data = {
            id: this.transactionId,
            blockId: this.blockId,
            blockNumber: this.blockNumber,
            sender: metadata.sender,
            amount: metadata.amount,
            contractName: payload.name,
            contractAction: payload.action,
            contractPayload: payload.payload
        };

        await collection.insertOne(data);

        return true;
    }

    async processCustomJson(operation, payload, metadata) {
        const collection = this.db.collection('transactions');

        const data = {
            id: this.transactionId,
            blockId: this.blockId,
            blockNumber: this.blockNumber,
            sender: metadata.sender,
            isSignedWithActiveKey: metadata.isSignedWithActiveKey,
            contractName: payload.name,
            contractAction: payload.action,
            contractPayload: payload.payload
        };

        await collection.insertOne(data);

        return true;
    }

    async destroy() {
        await this.client.close();

        return true;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;expanding-the-dice-contract&quot;&gt;Expanding the dice contract&lt;/h2&gt;

&lt;p&gt;Now we have MongoDB support added via our adapter, let’s modify the contract code to flag whether or not a transfer was processed (winnings sent or loss memo sent). This will allow us to replay our dice game and not worry about paying out users who already received their winnings multiple times.&lt;/p&gt;

&lt;p&gt;Above the &lt;code class=&quot;highlighter-rouge&quot;&gt;if (verify)&lt;/code&gt; line of code, let’s access the Mongo database client and connection.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const db = this._instance['adapter']['db'];
const collection = db.collection('transfers');
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Because contracts get access to the streamer instance, it means we can access the adapter and &lt;code class=&quot;highlighter-rouge&quot;&gt;db&lt;/code&gt; property. The downside here is for any adapter that doesn’t have a &lt;code class=&quot;highlighter-rouge&quot;&gt;db&lt;/code&gt; property, this will fail. In our case, we know we want to use the database adapter, so the slightly tighter coupling is fine.&lt;/p&gt;

&lt;p&gt;Inside of the balance check that refunds if the account doesn’t have more than the maximum bet, we’ll add some code that sets the status to &lt;code class=&quot;highlighter-rouge&quot;&gt;refund&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Put the following inside of this if statement: &lt;code class=&quot;highlighter-rouge&quot;&gt;if (balance &amp;lt; MAX_BET) {&lt;/code&gt; underneath the &lt;code class=&quot;highlighter-rouge&quot;&gt;transferHiveTokens&lt;/code&gt; call.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;await collection.findOneAndUpdate({ id: this.transactionId }, { $set: { status: 'refund' } });
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What we are doing here is querying the database for our transaction based on its ID, then using the MongoDB &lt;code class=&quot;highlighter-rouge&quot;&gt;$set&lt;/code&gt; property to only add/update one specific property in the &lt;code class=&quot;highlighter-rouge&quot;&gt;transfers&lt;/code&gt; collection.&lt;/p&gt;

&lt;p&gt;Next, inside of the if statement &lt;code class=&quot;highlighter-rouge&quot;&gt;if (parseFloat(tokensWon) &amp;gt; balance) {&lt;/code&gt; add in the same line of code beneath the &lt;code class=&quot;highlighter-rouge&quot;&gt;transferHiveTokens&lt;/code&gt; call:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;await collection.findOneAndUpdate({ id: this.transactionId }, { $set: { status: 'refund' } });
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Underneath the transfer code for winnings &lt;code class=&quot;highlighter-rouge&quot;&gt;await this._instance.transferHiveTokens(ACCOUNT, sender, tokensWon, TOKEN_SYMBOL, winningMemo);&lt;/code&gt; add in the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;await collection.findOneAndUpdate({ id: this.transactionId }, { $set: { status: 'win' } });
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And now for the loss inside of the else statement beneath &lt;code class=&quot;highlighter-rouge&quot;&gt;await this._instance.transferHiveTokens(ACCOUNT, sender, '0.001', TOKEN_SYMBOL, losingMemo);&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;await collection.findOneAndUpdate({ id: this.transactionId }, { $set: { status: 'loss' } });
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally, another underneath &lt;code class=&quot;highlighter-rouge&quot;&gt;await this._instance.transferHiveTokens(ACCOUNT, sender, amountTrim[0], amountTrim[1], `[Refund] Invalid bet params.`);&lt;/code&gt; which refunds the user if their bet amount is higher than the max, their dice roll is too high or low.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;await collection.findOneAndUpdate({ id: this.transactionId }, { $set: { status: 'refund' } });
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;The final dice contract code ends up looking like this:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import { Utils } from 'hive-stream';
import seedrandom from 'seedrandom';
import BigNumber from 'bignumber.js';

const CONTRACT_NAME = 'hivedice';

const ACCOUNT = 'beggars';
const TOKEN_SYMBOL = 'HIVE';

const HOUSE_EDGE = 0.05;
const MIN_BET = 1;
const MAX_BET = 10;

// Random Number Generator
const rng = (previousBlockId, blockId, transactionId) =&amp;gt; {
    const random = seedrandom(`${previousBlockId}${blockId}${transactionId}`).double();
    const randomRoll = Math.floor(random * 100) + 1;

    return randomRoll;
};

// Valid betting currencies
const VALID_CURRENCIES = ['HIVE'];

class DiceContract {
    _instancs;

    blockNumber;
    blockId;
    previousBlockId;
    transactionId;

    create() {
        // Runs every time register is called on this contract
        // Do setup logic and code in here (creating a database, etc)
    }

    destroy() {
        // Runs every time unregister is run for this contract
        // Close database connections, write to a database with state, etc
    }

    // Updates the contract with information about the current block
    // This is a method automatically called if it exists
    updateBlockInfo(blockNumber, blockId, previousBlockId, transactionId) {
        // Lifecycle method which sets block info 
        this.blockNumber = blockNumber;
        this.blockId = blockId;
        this.previousBlockId = previousBlockId;
        this.transactionId = transactionId;
    }

    /**
     * Get Balance
     *
     * Helper method for getting the contract account balance. In the case of our dice contract
     * we want to make sure the account has enough money to pay out any bets
     *
     * @returns number
     */
    async getBalance() {
        const account = await this._instance['client'].database.getAccounts([ACCOUNT]);

        if (account?.[0]) {
            const balance = (account[0].balance as string).split(' ');
            const amount = balance[0];

            return parseFloat(amount);
        }

        return null;
    }

    /**
     * Roll
     *
     * Automatically called when a custom JSON action matches the following method
     *
     * @param payload
     * @param param1 - sender and amount
     */
    async roll(payload, { sender, amount }) {
        // Destructure the values from the payload
        const { roll } = payload;

        // The amount is formatted like 100 HIVE
        // The value is the first part, the currency symbol is the second
        const amountTrim = amount.split(' ');

        // Parse the numeric value as a real value
        const amountParsed = parseFloat(amountTrim[0]);

        // Format the amount to 3 decimal places
        const amountFormatted = parseFloat(amountTrim[0]).toFixed(3);

        // Trim any space from the currency symbol
        const amountCurrency = amountTrim[1].trim();

        console.log(`Roll: ${roll}
                     Amount parsed: ${amountParsed}
                     Amount formatted: ${amountFormatted}
                     Currency: ${amountCurrency}`);

        // Get the transaction from the blockchain
        const transaction = await this._instance.getTransaction(this.blockNumber, this.transactionId);

        // Call the verifyTransfer method to confirm the transfer happened
        const verify = await this._instance.verifyTransfer(transaction, sender, 'beggars', amount);

        // Get the balance of our contract account
        const balance = await this.getBalance();

        const db = this._instance['adapter']['db'];
        const collection = db.collection('transfers');

        // Transfer is valid
        if (verify) {
            // Server balance is less than the max bet, cancel and refund
            if (balance &amp;lt; MAX_BET) {
                // Send back what was sent, the server is broke
                await this._instance.transferHiveTokens(ACCOUNT, sender, amountTrim[0], amountTrim[1], `[Refund] The server could not fufill your bet.`);

                await collection.findOneAndUpdate({ id: this.transactionId }, { $set: { status: 'refund' } });

                return;
            }

            // Bet amount is valid
            if (amountParsed &amp;gt;= MIN_BET &amp;amp;&amp;amp; amountParsed &amp;lt;= MAX_BET) {
                // Validate roll is valid
                if ((roll &amp;gt;= 2 &amp;amp;&amp;amp; roll &amp;lt;= 96) &amp;amp;&amp;amp; VALID_CURRENCIES.includes(amountCurrency)) {
                    // Roll a random value
                    const random = rng(this.previousBlockId, this.blockId, this.transactionId);

                    // Calculate the multiplier percentage
                    const multiplier = new BigNumber(1).minus(HOUSE_EDGE).multipliedBy(100).dividedBy(roll);

                    // Calculate the number of tokens won
                    const tokensWon = new BigNumber(amountParsed).multipliedBy(multiplier).toFixed(3, BigNumber.ROUND_DOWN);

                    // Memo that shows in users memo when they win
                    const winningMemo = `You won ${tokensWon} ${TOKEN_SYMBOL}. Roll: ${random}, Your guess: ${roll}`;

                    // Memo that shows in users memo when they lose
                    const losingMemo = `You lost ${amountParsed} ${TOKEN_SYMBOL}. Roll: ${random}, Your guess: ${roll}`;

                    // User won more than the server can afford, refund the bet amount
                    if (parseFloat(tokensWon) &amp;gt; balance) {
                        await this._instance.transferHiveTokens(ACCOUNT, sender, amountTrim[0], amountTrim[1], `[Refund] The server could not fufill your bet.`);

                        await collection.findOneAndUpdate({ id: this.transactionId }, { $set: { status: 'refund' } });

                        return;
                    }

                    // If random value is less than roll
                    if (random &amp;lt; roll) {
                        await this._instance.transferHiveTokens(ACCOUNT, sender, tokensWon, TOKEN_SYMBOL, winningMemo);
                        await collection.findOneAndUpdate({ id: this.transactionId }, { $set: { status: 'win' } });

                    } else {
                        await this._instance.transferHiveTokens(ACCOUNT, sender, '0.001', TOKEN_SYMBOL, losingMemo);
                        await collection.findOneAndUpdate({ id: this.transactionId }, { $set: { status: 'loss' } });
                    }
                } else {
                    // Invalid bet parameters, refund the user their bet
                    await this._instance.transferHiveTokens(ACCOUNT, sender, amountTrim[0], amountTrim[1], `[Refund] Invalid bet params.`);
                    await collection.findOneAndUpdate({ id: this.transactionId }, { $set: { status: 'refund' } });
                }
            } else {
                try {
                    // We need to refund the user
                    const transfer = await this._instance.transferHiveTokens(ACCOUNT, sender, amountTrim[0], amountTrim[1], `[Refund] You sent an invalid bet amount.`);

                    await collection.findOneAndUpdate({ id: this.transactionId }, { $set: { status: 'refund' } });
                } catch (e) {
                    console.log(e);
                }
            }
        }
    }
}

export default new DiceContract();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;register-your-adapter-run-it&quot;&gt;Register your adapter, run it&lt;/h2&gt;

&lt;p&gt;We take the code we bootstrapped our app with from part one and it remains largely untouched, except we register our MongoDB adapter and pass in some configuration information to the constructor.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import { Streamer } from 'hive-stream';
import DiceContract from './dice.contract';
import { MongodbAdapter } from './mongo.adapter';

const streamer = new Streamer({
    ACTIVE_KEY: '', // Needed for transfers
    JSON_ID: 'testdice' // Identifier in the custom JSON payloads
});

streamer.registerAdapter(new MongodbAdapter('mongodb://127.0.0.1:27017', 'hivestream'));

// Register the contract
streamer.registerContract('hivedice', DiceContract);

// Starts the streamer watching the blockchain
streamer.start();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://files.peakd.com/file/peakd-hive/beggars/UpZgH9Fl-Screen20Shot202020-04-0620at208.14.4220pm.png&quot; alt=&quot;Screen Shot 20200406 at 8.14.42 pm.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here is a screenshot of a modified transaction that was refunded updated in our Mongo database to show that it all works as intended.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;What did we learn? We learned how to write a custom adapter for interfacing with a database, we learned how to access to the database instance inside of our contract and interact with it. We also learned we can then look up transactions by their ID from within contract actions and modify them (in our case, setting a status property).&lt;/p&gt;

&lt;p&gt;PS. The Mongo adapter ships with the Hive Stream package, so you don’t have to custom code it yourself, I built it as part of the process of this tutorial. Enjoy.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;
  See: &lt;a href=&quot;https://hive.blog/@beggars/tutorial-building-a-dice-game-contract-with-hive-stream-part-2&quot;&gt;Tutorial: Building A Dice Game Contract With Hive Stream (Part 2)&lt;/a&gt;
  by
  &lt;a href=&quot;https://hive.blog/@beggars&quot;&gt;@beggars&lt;/a&gt;
&lt;/p&gt;</content><author><name>beggars</name></author><summary type="html">If you missed part one here, we built a basic dice game contract which allows people to bet on an outcome and either win or lose. The tutorial left out some things that you might want to do in a real deployment. Install MongoDB For this tutorial, we are going to use MongoDB as the database behind it. We’ll be storing transactions and outcomes in the database, so we can ensure that transfers are not processed multiple times. While the streamer keeps track of the last processed block number in a JSON file or SQLite database, what happens if your node goes down and the file gets edited or deleted? It would result in missed transactions which would be a pain to manually process. Download the community version installer from the official MongoDB website. Choose the appropriate installer for your operating system and follow the instructions. It should require very little input, just keep clicking next basically and keep everything as default. Build a MongoDB adapter Now, we need to write an adapter that will allow Hive Stream to work with MongoDB instead of the file databases that it is configured out-of-the-box to use. Provided you have Hive Stream installed (version 2+) you should have the new adapter’s functionality. An adapter for standard use cases consists of just two mandatory methods loadState and saveState the loadState method gets called when the streamer starts to start at the last block it finished. The saveState method updates with the latest processed block. There are however other lifecycle methods which we can use in our more functional adapters. create is called on initialisation, you can setup instances and connections in here. destroy is called when everything is stopped, so naturally you close database connections in here. The processOperation is a method that gets the latest block number, transaction ID and so forth. It’s metadata used to identify specific transactions and their block data. The processTransfer and processCustomJson methods are called when a matching transfer or custom JSON operation is matched to a contract. It also gets contract information as well as the payload and other helpful info. Save the following as mongo.adapter.js import { AdapterBase } from 'hive-stream'; import { MongoClient, Db } from 'mongodb'; export class MongodbAdapter extends AdapterBase { client; db; mongo = { uri: '', database: '', options: {} }; blockNumber; lastBlockNumber; blockId; prevBlockId; transactionId; constructor(uri, databasw, options = { useNewUrlParser: true, useUnifiedTopology: true }) { super(); this.mongo.uri = uri; this.mongo.database = database; this.mongo.options = options; } async create() { try { this.client = await MongoClient.connect(this.mongo.uri, this.mongo.options); this.db = this.client.db(this.mongo.database); return true; } catch (e) { throw e; } } async loadState() { try { const collection = this.db.collection('params'); const params = await collection.findOne({}); if (params) { return params; } } catch (e) { throw e; } } async saveState(data) { try { const collection = this.db.collection('params'); await collection.replaceOne({}, data, { upsert: true}); return true; } catch (e) { throw e; } } async processOperation(op, blockNumber, blockId, prevBlockId, trxId, blockTime) { this.blockNumber = blockNumber; this.blockId = blockId; this.prevBlockId = prevBlockId; this.transactionId = trxId; } async processTransfer(operation, payload, metadata) { const collection = this.db.collection('transfers'); const data = { id: this.transactionId, blockId: this.blockId, blockNumber: this.blockNumber, sender: metadata.sender, amount: metadata.amount, contractName: payload.name, contractAction: payload.action, contractPayload: payload.payload }; await collection.insertOne(data); return true; } async processCustomJson(operation, payload, metadata) { const collection = this.db.collection('transactions'); const data = { id: this.transactionId, blockId: this.blockId, blockNumber: this.blockNumber, sender: metadata.sender, isSignedWithActiveKey: metadata.isSignedWithActiveKey, contractName: payload.name, contractAction: payload.action, contractPayload: payload.payload }; await collection.insertOne(data); return true; } async destroy() { await this.client.close(); return true; } } Expanding the dice contract Now we have MongoDB support added via our adapter, let’s modify the contract code to flag whether or not a transfer was processed (winnings sent or loss memo sent). This will allow us to replay our dice game and not worry about paying out users who already received their winnings multiple times. Above the if (verify) line of code, let’s access the Mongo database client and connection. const db = this._instance['adapter']['db']; const collection = db.collection('transfers'); Because contracts get access to the streamer instance, it means we can access the adapter and db property. The downside here is for any adapter that doesn’t have a db property, this will fail. In our case, we know we want to use the database adapter, so the slightly tighter coupling is fine. Inside of the balance check that refunds if the account doesn’t have more than the maximum bet, we’ll add some code that sets the status to refund Put the following inside of this if statement: if (balance &amp;lt; MAX_BET) { underneath the transferHiveTokens call. await collection.findOneAndUpdate({ id: this.transactionId }, { $set: { status: 'refund' } }); What we are doing here is querying the database for our transaction based on its ID, then using the MongoDB $set property to only add/update one specific property in the transfers collection. Next, inside of the if statement if (parseFloat(tokensWon) &amp;gt; balance) { add in the same line of code beneath the transferHiveTokens call: await collection.findOneAndUpdate({ id: this.transactionId }, { $set: { status: 'refund' } }); Underneath the transfer code for winnings await this._instance.transferHiveTokens(ACCOUNT, sender, tokensWon, TOKEN_SYMBOL, winningMemo); add in the following: await collection.findOneAndUpdate({ id: this.transactionId }, { $set: { status: 'win' } }); And now for the loss inside of the else statement beneath await this._instance.transferHiveTokens(ACCOUNT, sender, '0.001', TOKEN_SYMBOL, losingMemo); await collection.findOneAndUpdate({ id: this.transactionId }, { $set: { status: 'loss' } }); Finally, another underneath await this._instance.transferHiveTokens(ACCOUNT, sender, amountTrim[0], amountTrim[1], `[Refund] Invalid bet params.`); which refunds the user if their bet amount is higher than the max, their dice roll is too high or low. await collection.findOneAndUpdate({ id: this.transactionId }, { $set: { status: 'refund' } }); The final dice contract code ends up looking like this: import { Utils } from 'hive-stream'; import seedrandom from 'seedrandom'; import BigNumber from 'bignumber.js'; const CONTRACT_NAME = 'hivedice'; const ACCOUNT = 'beggars'; const TOKEN_SYMBOL = 'HIVE'; const HOUSE_EDGE = 0.05; const MIN_BET = 1; const MAX_BET = 10; // Random Number Generator const rng = (previousBlockId, blockId, transactionId) =&amp;gt; { const random = seedrandom(`${previousBlockId}${blockId}${transactionId}`).double(); const randomRoll = Math.floor(random * 100) + 1; return randomRoll; }; // Valid betting currencies const VALID_CURRENCIES = ['HIVE']; class DiceContract { _instancs; blockNumber; blockId; previousBlockId; transactionId; create() { // Runs every time register is called on this contract // Do setup logic and code in here (creating a database, etc) } destroy() { // Runs every time unregister is run for this contract // Close database connections, write to a database with state, etc } // Updates the contract with information about the current block // This is a method automatically called if it exists updateBlockInfo(blockNumber, blockId, previousBlockId, transactionId) { // Lifecycle method which sets block info this.blockNumber = blockNumber; this.blockId = blockId; this.previousBlockId = previousBlockId; this.transactionId = transactionId; } /** * Get Balance * * Helper method for getting the contract account balance. In the case of our dice contract * we want to make sure the account has enough money to pay out any bets * * @returns number */ async getBalance() { const account = await this._instance['client'].database.getAccounts([ACCOUNT]); if (account?.[0]) { const balance = (account[0].balance as string).split(' '); const amount = balance[0]; return parseFloat(amount); } return null; } /** * Roll * * Automatically called when a custom JSON action matches the following method * * @param payload * @param param1 - sender and amount */ async roll(payload, { sender, amount }) { // Destructure the values from the payload const { roll } = payload; // The amount is formatted like 100 HIVE // The value is the first part, the currency symbol is the second const amountTrim = amount.split(' '); // Parse the numeric value as a real value const amountParsed = parseFloat(amountTrim[0]); // Format the amount to 3 decimal places const amountFormatted = parseFloat(amountTrim[0]).toFixed(3); // Trim any space from the currency symbol const amountCurrency = amountTrim[1].trim(); console.log(`Roll: ${roll} Amount parsed: ${amountParsed} Amount formatted: ${amountFormatted} Currency: ${amountCurrency}`); // Get the transaction from the blockchain const transaction = await this._instance.getTransaction(this.blockNumber, this.transactionId); // Call the verifyTransfer method to confirm the transfer happened const verify = await this._instance.verifyTransfer(transaction, sender, 'beggars', amount); // Get the balance of our contract account const balance = await this.getBalance(); const db = this._instance['adapter']['db']; const collection = db.collection('transfers'); // Transfer is valid if (verify) { // Server balance is less than the max bet, cancel and refund if (balance &amp;lt; MAX_BET) { // Send back what was sent, the server is broke await this._instance.transferHiveTokens(ACCOUNT, sender, amountTrim[0], amountTrim[1], `[Refund] The server could not fufill your bet.`); await collection.findOneAndUpdate({ id: this.transactionId }, { $set: { status: 'refund' } }); return; } // Bet amount is valid if (amountParsed &amp;gt;= MIN_BET &amp;amp;&amp;amp; amountParsed &amp;lt;= MAX_BET) { // Validate roll is valid if ((roll &amp;gt;= 2 &amp;amp;&amp;amp; roll &amp;lt;= 96) &amp;amp;&amp;amp; VALID_CURRENCIES.includes(amountCurrency)) { // Roll a random value const random = rng(this.previousBlockId, this.blockId, this.transactionId); // Calculate the multiplier percentage const multiplier = new BigNumber(1).minus(HOUSE_EDGE).multipliedBy(100).dividedBy(roll); // Calculate the number of tokens won const tokensWon = new BigNumber(amountParsed).multipliedBy(multiplier).toFixed(3, BigNumber.ROUND_DOWN); // Memo that shows in users memo when they win const winningMemo = `You won ${tokensWon} ${TOKEN_SYMBOL}. Roll: ${random}, Your guess: ${roll}`; // Memo that shows in users memo when they lose const losingMemo = `You lost ${amountParsed} ${TOKEN_SYMBOL}. Roll: ${random}, Your guess: ${roll}`; // User won more than the server can afford, refund the bet amount if (parseFloat(tokensWon) &amp;gt; balance) { await this._instance.transferHiveTokens(ACCOUNT, sender, amountTrim[0], amountTrim[1], `[Refund] The server could not fufill your bet.`); await collection.findOneAndUpdate({ id: this.transactionId }, { $set: { status: 'refund' } }); return; } // If random value is less than roll if (random &amp;lt; roll) { await this._instance.transferHiveTokens(ACCOUNT, sender, tokensWon, TOKEN_SYMBOL, winningMemo); await collection.findOneAndUpdate({ id: this.transactionId }, { $set: { status: 'win' } }); } else { await this._instance.transferHiveTokens(ACCOUNT, sender, '0.001', TOKEN_SYMBOL, losingMemo); await collection.findOneAndUpdate({ id: this.transactionId }, { $set: { status: 'loss' } }); } } else { // Invalid bet parameters, refund the user their bet await this._instance.transferHiveTokens(ACCOUNT, sender, amountTrim[0], amountTrim[1], `[Refund] Invalid bet params.`); await collection.findOneAndUpdate({ id: this.transactionId }, { $set: { status: 'refund' } }); } } else { try { // We need to refund the user const transfer = await this._instance.transferHiveTokens(ACCOUNT, sender, amountTrim[0], amountTrim[1], `[Refund] You sent an invalid bet amount.`); await collection.findOneAndUpdate({ id: this.transactionId }, { $set: { status: 'refund' } }); } catch (e) { console.log(e); } } } } } export default new DiceContract(); Register your adapter, run it We take the code we bootstrapped our app with from part one and it remains largely untouched, except we register our MongoDB adapter and pass in some configuration information to the constructor. import { Streamer } from 'hive-stream'; import DiceContract from './dice.contract'; import { MongodbAdapter } from './mongo.adapter'; const streamer = new Streamer({ ACTIVE_KEY: '', // Needed for transfers JSON_ID: 'testdice' // Identifier in the custom JSON payloads }); streamer.registerAdapter(new MongodbAdapter('mongodb://127.0.0.1:27017', 'hivestream')); // Register the contract streamer.registerContract('hivedice', DiceContract); // Starts the streamer watching the blockchain streamer.start(); Here is a screenshot of a modified transaction that was refunded updated in our Mongo database to show that it all works as intended. Conclusion What did we learn? We learned how to write a custom adapter for interfacing with a database, we learned how to access to the database instance inside of our contract and interact with it. We also learned we can then look up transactions by their ID from within contract actions and modify them (in our case, setting a status property). PS. The Mongo adapter ships with the Hive Stream package, so you don’t have to custom code it yourself, I built it as part of the process of this tutorial. Enjoy. See: Tutorial: Building A Dice Game Contract With Hive Stream (Part 2) by @beggars</summary></entry><entry><title type="html">SteemConnect notice</title><link href="https://hivedocs.info/news/hivesigner/2020/04/05/steemconnect-notice.html" rel="alternate" type="text/html" title="SteemConnect notice" /><published>2020-04-05T12:07:21-07:00</published><updated>2020-04-05T12:07:21-07:00</updated><id>https://hivedocs.info/news/hivesigner/2020/04/05/steemconnect-notice</id><content type="html" xml:base="https://hivedocs.info/news/hivesigner/2020/04/05/steemconnect-notice.html">&lt;p&gt;In this post we would like to update everyone about discontinuation of &lt;a href=&quot;https://steemconnect.com&quot;&gt;SteemConnect&lt;/a&gt;.
It has been incredible few years serving all users and dapps on Steem, but now that we have migrated to &lt;a href=&quot;https://hive.io&quot;&gt;Hive&lt;/a&gt; as &lt;a href=&quot;https://hivesigner.com&quot;&gt;Hivesigner&lt;/a&gt;. It is time to focus our time and effort making &lt;a href=&quot;https://hivesigner.com&quot;&gt;Hivesigner&lt;/a&gt; the best authentication service, it can be on &lt;a href=&quot;https://hive.io&quot;&gt;Hive&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;sunset-date&quot;&gt;Sunset date&lt;/h1&gt;

&lt;p&gt;We are setting a date to &lt;strong&gt;stop &lt;a href=&quot;https://steemconnect.com&quot;&gt;SteemConnect&lt;/a&gt; services on 1st June, 2020&lt;/strong&gt;. 
We kindly request all Dapp developers to plan and inform their users about changes.&lt;/p&gt;

&lt;h1 id=&quot;migration-options&quot;&gt;Migration options&lt;/h1&gt;

&lt;p&gt;We will actively be improving &lt;a href=&quot;https://hivesigner.com&quot;&gt;Hivesigner&lt;/a&gt; and encourage developers to build on &lt;a href=&quot;https://hive.io&quot;&gt;Hive&lt;/a&gt;. But if for some reason you want to stay on &lt;a href=&quot;https://steem.io&quot;&gt;Steem&lt;/a&gt;, please migrate to some other fork of &lt;a href=&quot;https://steemconnect.com&quot;&gt;SteemConnect&lt;/a&gt; - for example &lt;a href=&quot;https://steemlogin.com&quot;&gt;SteemLogin&lt;/a&gt;. &lt;strong&gt;&lt;em&gt;We are not in any way connected with any forks, as always do your own research, audit and security of new forks.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&quot;hivesigner-development&quot;&gt;Hivesigner development&lt;/h1&gt;

&lt;p&gt;For all new developers, visitors, &lt;a href=&quot;https://steemconnect.com&quot;&gt;SteemConnect&lt;/a&gt; will be redirecting everyone to &lt;a href=&quot;https://hivesigner.com&quot;&gt;Hivesigner&lt;/a&gt; homepage and help them get started with development on &lt;a href=&quot;https://hive.io&quot;&gt;Hive&lt;/a&gt;. We will be adding FAQ and more detailed documentation on How to integrate &lt;a href=&quot;https://hivesigner.com&quot;&gt;Hivesigner&lt;/a&gt; to your website, How to authenticate with &lt;a href=&quot;https://chrome.google.com/webstore/detail/hivesigner/ophihnhnfgcmhpbcennhppicomdeabip&quot;&gt;Hivesigner extension&lt;/a&gt;, How to sign transactions securely, etc. We have published roadmap and proposal to support continuous development of the project. Please read more &lt;a href=&quot;https://esteem.app/hive/@good-karma/hivesigner-ongoing-development-and-improvement&quot;&gt;about it here and support our effort&lt;/a&gt; bringing secure and social authentication to the masses.&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://hivesigner.com/sign/update-proposal-votes?proposal_ids=%5B88%5D&amp;amp;approve=true&quot;&gt;Vote for Hivesigner Proposal&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Github: &lt;a href=&quot;https://github.com/ledgerconnect/hivesigner&quot;&gt;ledgerconnect/hivesigner&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Discord support: https://discord.gg/pNJn7wh&lt;/li&gt;
  &lt;li&gt;Email: &lt;code class=&quot;highlighter-rouge&quot;&gt;hello@hivesigner.com&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;
  See: &lt;a href=&quot;https://hive.blog/@good-karma/steemconnect-notice&quot;&gt;SteemConnect notice&lt;/a&gt;
  by
  &lt;a href=&quot;https://hive.blog/@good-karma&quot;&gt;@good-karma&lt;/a&gt;
&lt;/p&gt;</content><author><name>good-karma</name></author><summary type="html">In this post we would like to update everyone about discontinuation of SteemConnect. It has been incredible few years serving all users and dapps on Steem, but now that we have migrated to Hive as Hivesigner. It is time to focus our time and effort making Hivesigner the best authentication service, it can be on Hive. Sunset date We are setting a date to stop SteemConnect services on 1st June, 2020. We kindly request all Dapp developers to plan and inform their users about changes. Migration options We will actively be improving Hivesigner and encourage developers to build on Hive. But if for some reason you want to stay on Steem, please migrate to some other fork of SteemConnect - for example SteemLogin. We are not in any way connected with any forks, as always do your own research, audit and security of new forks. Hivesigner development For all new developers, visitors, SteemConnect will be redirecting everyone to Hivesigner homepage and help them get started with development on Hive. We will be adding FAQ and more detailed documentation on How to integrate Hivesigner to your website, How to authenticate with Hivesigner extension, How to sign transactions securely, etc. We have published roadmap and proposal to support continuous development of the project. Please read more about it here and support our effort bringing secure and social authentication to the masses. Vote for Hivesigner Proposal Github: ledgerconnect/hivesigner Discord support: https://discord.gg/pNJn7wh Email: hello@hivesigner.com See: SteemConnect notice by @good-karma</summary></entry></feed>