<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="https://hivedocs.info/feed.xml" rel="self" type="application/atom+xml" /><link href="https://hivedocs.info/" rel="alternate" type="text/html" /><updated>2020-05-13T10:11:22-07:00</updated><id>https://hivedocs.info/feed.xml</id><title type="html">Hive Chain Documentation</title><subtitle>Your resource for various levels of Hive Documentation.</subtitle><author><name>site curated by: @inertia</name></author><entry><title type="html">update for beem: support for Ledger Nano (S/X) has been added</title><link href="https://hivedocs.info/howto/beem/python/wallet/2020/05/12/update-for-beem-support-for-ledger-nano-sx-has-been-added.html" rel="alternate" type="text/html" title="update for beem: support for Ledger Nano (S/X) has been added" /><published>2020-05-12T12:23:15-07:00</published><updated>2020-05-12T12:23:15-07:00</updated><id>https://hivedocs.info/howto/beem/python/wallet/2020/05/12/update-for-beem-support-for-ledger-nano-sx-has-been-added</id><content type="html" xml:base="https://hivedocs.info/howto/beem/python/wallet/2020/05/12/update-for-beem-support-for-ledger-nano-sx-has-been-added.html">&lt;h2 id=&quot;repository&quot;&gt;Repository&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/holgern/beem&quot;&gt;https://github.com/holgern/beem&lt;/a&gt;&lt;/p&gt;
&lt;div style=&quot;display: block; margin: 0 auto;&quot;&gt;

  &lt;p&gt;&lt;img src=&quot;https://cdn.steemitimages.com/DQmcRrwLPSywSYMierfP6um6mejeMNGjN9Rxw7audJqTDgb/beem-logo&quot; alt=&quot;beem-logo&quot; /&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/holgern/beem&quot;&gt;beem&lt;/a&gt; is a python library and command line tool for HIVE.  The current version is 0.23.7.&lt;/p&gt;

&lt;p&gt;There is also a discord channel for beem: 
&lt;a href=&quot;https://discord.gg/4HM592V&quot;&gt;https://discord.gg/4HM592V&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The newest beem version can be installed by:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip install -U beem
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If you want to use Ledger Nano, then you need also:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip install -U ledgerblue
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Check that you are using hive nodes. The following command&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;beempy updatenodes --hive
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;updates the nodelist and uses only hive nodes. After setting hive as default_chain, &lt;code class=&quot;highlighter-rouge&quot;&gt;beempy updatenodes&lt;/code&gt; can be used.&lt;/p&gt;

&lt;p&gt;The list of nodes can be checked with&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;beempy config
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;beempy currentnode
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;shows the currently connected node.&lt;/p&gt;

&lt;h2 id=&quot;changelog-for-versions-0237&quot;&gt;Changelog for versions 0.23.7&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Fix update_account_jsonmetadata and add posting_json_metadata property to Account&lt;/li&gt;
  &lt;li&gt;Add Ledger Nano S support&lt;/li&gt;
  &lt;li&gt;beempy -u activates ledger signing&lt;/li&gt;
  &lt;li&gt;beempy -u listkeys shows pubkey from ledger&lt;/li&gt;
  &lt;li&gt;beempy -u listaccounts searches for accounts that have pubkey derived from attached ledger&lt;/li&gt;
  &lt;li&gt;beempy -u keygen creates pubkey lists that can be used for newaccount and changekeys&lt;/li&gt;
  &lt;li&gt;new option use_ledger and path for Hive&lt;/li&gt;
  &lt;li&gt;Allow role selection in keygen&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;changelog-for-versions-0236&quot;&gt;Changelog for versions 0.23.6&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;beempy --key key_list.json command&lt;/code&gt; can be used to set keys in beempy without using the wallet.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;using-the-ledger-nano-for-signing&quot;&gt;Using the Ledger Nano for signing&lt;/h2&gt;

&lt;p&gt;beem/beepy is the first library/application that supports signing of operation with the ledger Nano S/X hardware wallet. It uses the &lt;a href=&quot;https://peakd.com/hive-139531/@netuoso/hive-application-for-the-ledger-nano-s-x-hardware-wallet&quot;&gt;Hive wallet application for ledger Nano S/X&lt;/a&gt; from @netuoso.&lt;/p&gt;

&lt;p&gt;Uploading the app to a Nano X is not yet possible.&lt;/p&gt;

&lt;p&gt;You need to install the Hive app to your ledger Nano. You can download it from &lt;a href=&quot;https://github.com/netuoso/ledger-app-hive&quot;&gt;ledger-hive-app&lt;/a&gt; by @netuoso.
Please read the readme on how to install the app to your ledger.&lt;/p&gt;

&lt;p&gt;When you sucessfully could install the Hive app to your ledger, you need to select it and enter &lt;code class=&quot;highlighter-rouge&quot;&gt;Open application&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You need also install ledgerblue&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip install -U ledgerblue
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can test if everything works with&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;beempy -u listkeys
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;-u&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;--use-ledger&lt;/code&gt; parameter activates ledger support for all beempy commands.
If you see&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ledgerblue.commException.CommException: Exception : Invalid status 6d00 (Unexpected state of device: verify that the right application is opened?)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;your setup is not correct. If you see&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;+-------------------------------------------------------+
| Available Key for 48'/13'/0'/0'/0'                    |
+-------------------------------------------------------+
| STM...                                                | 
+-------------------------------------------------------+
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;everything is set up.&lt;/p&gt;

&lt;h2 id=&quot;changing-your-keys&quot;&gt;Changing your keys&lt;/h2&gt;
&lt;p&gt;You need to change your keys to the public keys that your ledger provides before using the ledger for signing. It is also possible to change only the owner key.&lt;/p&gt;

&lt;p&gt;As private keys will not leave your hardware wallet, you cannot put them into keychain or peakd as before. You can only sign operations on apps that support the ledger.&lt;/p&gt;

&lt;p&gt;When you lose your ledger and your recovery phrase, you lose the ability to sign with that role. E.g. when you changed your owner key, and you lost your ledger and the recovery phrase, you cannot change your account keys anymore.&lt;/p&gt;

&lt;p&gt;In the current state (lack of ledger support by other apps), i recommend to change only the owner key.&lt;/p&gt;

&lt;h2 id=&quot;seting-the-path&quot;&gt;Seting the path&lt;/h2&gt;
&lt;p&gt;The pubkeys that are provided by the ledger are derived from the given path.
A  path for hive consists of&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;48'/13'/role number'/account index'/key sequence'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The role number is 0 for owner, 1 for active, 4 for posting and 3 for memo.&lt;/p&gt;

&lt;p&gt;You need to assign an account index number to your account. You are starting with 0 and when you plan to use a second account, you need to increase this index. The key index starts with 0 for each role and account index. Whenever you change your keys, you need to increase the key sequence index.&lt;/p&gt;

&lt;h3 id=&quot;changing-your-owner-active-and-posting-key&quot;&gt;Changing your owner, active and posting key&lt;/h3&gt;
&lt;p&gt;It is not recommended to change the memo key (no encryption support for ledger yet on beem yet), this is the maximum setup. Changing your owner, active and posting key means at this moment (when more app add support for ledger, this will change):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;all operation can only be broadcasted by beem/beempy&lt;/li&gt;
  &lt;li&gt;Voting, transfering on a mobile device is not possible&lt;/li&gt;
  &lt;li&gt;keychain usage is not possible&lt;/li&gt;
  &lt;li&gt;peakd, hive.blog cannot be used for voting or any other operation&lt;/li&gt;
  &lt;li&gt;hive-engine or any dapp cannot be longer used&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At first, three new pubkeys needs to be obtained from the ledger:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;beempy -u keygen --account 3 --role owner,active,posting
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This beempy command creates three pubkeys for the account index 3 derived from the following paths:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt; 48'/13'/0'/3'/0'&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt; 48'/13'/1'/3'/0'&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt; 48'/13'/4'/3'/0'&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can save the pubkeys to a json for easier key changing by:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;beempy -u keygen --account 3 --role owner,active,posting --export-pub beembot.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In both cases you will be asked to approve the shown pubkeys on your ledger Nano.&lt;/p&gt;

&lt;p&gt;We can now change the keys with&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;beempy changekeys --import-pub beembot.json beembot
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;changing-your-owner-and-active-key&quot;&gt;Changing your owner and active key&lt;/h2&gt;
&lt;p&gt;This involves changing your owner and active key.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;all operation that need an active key can only be broadcasted by beem/beempy.&lt;/li&gt;
  &lt;li&gt;transfering Hive/HBD on a mobile device is not possible&lt;/li&gt;
  &lt;li&gt;keychain usage is not possible for operation needing an active key&lt;/li&gt;
  &lt;li&gt;hive-engine or any dapps that are using custom_json signed with an active key cannot be longer used.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;beempy -u keygen  --role owner,active --export-pub account_pubkeys.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;You can set the account index with &lt;code class=&quot;highlighter-rouge&quot;&gt;--account&lt;/code&gt;.
Changing the keys can be done with &lt;code class=&quot;highlighter-rouge&quot;&gt;beempy changekeys&lt;/code&gt; as shown above.&lt;/p&gt;

&lt;h2 id=&quot;changing-your-owner-key&quot;&gt;Changing your owner key&lt;/h2&gt;
&lt;p&gt;This changes only the owner key. Active and posting key are still managed with private keys as before. Until ledger is not supported by keychain or on mobile, this is the most likely usecase now.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Changing your keys needs to be done with beem/beempy&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;beempy -u keygen --role owner --export-pub account_pubkeys.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;You can set the account index with &lt;code class=&quot;highlighter-rouge&quot;&gt;--account&lt;/code&gt;.
Changing the keys can be done with &lt;code class=&quot;highlighter-rouge&quot;&gt;beempy changekeys&lt;/code&gt; as shown above.&lt;/p&gt;

&lt;p&gt;You may need to change the default path. When you used &lt;code class=&quot;highlighter-rouge&quot;&gt;--account 2&lt;/code&gt;, you need to set&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;beempy set default_path &quot;48'/13'/0'/2'/0'&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Whenever you use &lt;code class=&quot;highlighter-rouge&quot;&gt;beempy -u&lt;/code&gt;, this path is used for signing.&lt;/p&gt;

&lt;h2 id=&quot;checking-if-changing-keys-was-sucessfully&quot;&gt;Checking if changing keys was sucessfully&lt;/h2&gt;
&lt;p&gt;The following command checks if a derived pubkey from the ledger is set somewhere in Hive using &lt;code class=&quot;highlighter-rouge&quot;&gt;getAccountFromPublicKey&lt;/code&gt; from the wallet class.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;beempy -u listaccounts
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;returns then&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;+---------+---------+-------------------------------------------------------+------------------+
| Name    | Type    | Available Key                                         | Path             |
+---------+---------+-------------------------------------------------------+------------------+
| beembot | owner   | STM7UYXcqJsZqoroPKoziDmB3XHSVfnLbLJ9TWSVsD4zC7YHsdgo5 | 48'/13'/0'/3'/0' |
| beembot | active  | STM7a1bcn9Anx7F2dKZGEkbVRFbCHT9exx42SSKd4JicJW82VQtAc | 48'/13'/1'/3'/0' |
| beembot | posting | STM7cvheXK2FTEAkWe1U7SD2W6H6H3a6uJ28ors37rxcE5evP5fji | 48'/13'/4'/3'/0' |
+---------+---------+-------------------------------------------------------+------------------+
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;set-the-path&quot;&gt;Set the path&lt;/h2&gt;
&lt;p&gt;As we have used a account index &amp;gt; 0, we must change the default path. At the moment, only one path can be stored in default_path.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;beempy set default_path &quot;48'/13'/0'/3'/0'&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;We will now sign all transactions with the owner key, until the path is changed or set for a transaction with &lt;code class=&quot;highlighter-rouge&quot;&gt;--path&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can check which pubkey is returned for the actually set &lt;code class=&quot;highlighter-rouge&quot;&gt;default_path&lt;/code&gt; with&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;beempy -u listkeys
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The shown pubkey can checked with&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;beempy info STM...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;using-the-ledger-to-sign-transactions&quot;&gt;Using the ledger to sign transactions&lt;/h2&gt;

&lt;p&gt;We can now sign all transaction by the ledger, when &lt;code class=&quot;highlighter-rouge&quot;&gt;-u&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;--use-ledger&lt;/code&gt; is set.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;beempy -u transfer -a beembot holger80 0.001 HIVE &quot;test with ledger&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This is now signed with the owner key, as default_path is &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;48'/13'/0'/3'/0'&quot;&lt;/code&gt;.
We can sign the same trx with the active by setting the path to &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;48'/13'/1'/3'/0'&quot;&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;beempy -u --path &quot;48'/13'/1'/3'/0'&quot; transfer -a beembot holger80 0.001 HIVE &quot;test with ledger&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;building-and-signing-a-transaction-in-python&quot;&gt;Building and signing a transaction in python&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from beem import Hive
from beem.transactionbuilder import TransactionBuilder
from beembase import operations
hive = Hive(use_ledger=True, path=&quot;48'/13'/1'/3'/0'&quot;)

tx = TransactionBuilder(blockchain_instance=hive)

transfer_dict = {&quot;from&quot;: 'beembot', &quot;to&quot;: 'holger80',
                 &quot;amount&quot;: '0.001 HIVE', &quot;memo&quot;: 'test with ledger'}
op = operations.Transfer(**transfer_dict)
tx.appendOps(op)
tx.sign()
tx.broadcast()

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It is also possible to use the predifined broadcast function&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from beem import Hive
from beem.account import Account
hive = Hive(use_ledger=True, path=&quot;48'/13'/1'/3'/0'&quot;)
account = Account(&quot;beembot&quot;, blockchain_instance=hive)
account.transfer(&quot;holger80&quot;, 0.001, &quot;HIVE&quot;, &quot;test with ledger&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Sending all four transfers had worked:
&lt;img src=&quot;https://images.hive.blog/DQmQP4epEqsc67hw44vAv7ZYphUJjjGJRcrYaEk4gCpR576/image&quot; alt=&quot;&quot; /&gt;
I was asked everytime to check the transfer op and had to validate every field.&lt;/p&gt;

&lt;h2 id=&quot;advantages-for-changing-the-owner-key&quot;&gt;Advantages for changing the owner key&lt;/h2&gt;
&lt;p&gt;Letting the ledger signing with the owner key has some advantages:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;beempy can be used without entering any keys, as I can sign all operations with the owner key&lt;/li&gt;
  &lt;li&gt;Each operation must be reviewed on the ledger before broadcasting&lt;/li&gt;
  &lt;li&gt;The owner key cannot be accedentially pasted&lt;/li&gt;
  &lt;li&gt;When I lose the keys to my hive account, I can easily create new keys, as the owner key is stored in the ledger.&lt;/li&gt;
  &lt;li&gt;My owner key is protected against pishing and hacking.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I just need to take good care of the ledger device and the recovery words.&lt;/p&gt;

&lt;h2 id=&quot;roadmap&quot;&gt;Roadmap&lt;/h2&gt;
&lt;p&gt;For the next release, I will work on multisigning with ledger as one signer (at the moment, only one signer is possible when using ledger). Also, a better path handling is needed. At the moment, only one default_path can be set. Something like storing the path for all used keys, depending on roles and accounts in a database would be useful. Parallel storage of keys and paths would also nice.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;If you like what I do, consider casting a vote for me as witness on &lt;a href=&quot;https://hivesigner.com/sign/account-witness-vote?witness=holger80&amp;amp;approve=1&quot;&gt;Hivesigner&lt;/a&gt; or on &lt;a href=&quot;https://peakd.com/witnesses&quot;&gt;PeakD&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;
  See: &lt;a href=&quot;https://hive.blog/hive-139531/@holger80/update-for-beem-support-for-ledger-nano-sx-has-been-added&quot;&gt;update for beem: support for Ledger Nano (S/X) has been added&lt;/a&gt;
  by
  &lt;a href=&quot;https://hive.blog/@holger80&quot;&gt;@holger80&lt;/a&gt;
&lt;/p&gt;</content><author><name>holger80</name></author><summary type="html">Repository https://github.com/holgern/beem beem is a python library and command line tool for HIVE. The current version is 0.23.7. There is also a discord channel for beem: https://discord.gg/4HM592V The newest beem version can be installed by: pip install -U beem If you want to use Ledger Nano, then you need also: pip install -U ledgerblue Check that you are using hive nodes. The following command beempy updatenodes --hive updates the nodelist and uses only hive nodes. After setting hive as default_chain, beempy updatenodes can be used. The list of nodes can be checked with beempy config and beempy currentnode shows the currently connected node. Changelog for versions 0.23.7 Fix update_account_jsonmetadata and add posting_json_metadata property to Account Add Ledger Nano S support beempy -u activates ledger signing beempy -u listkeys shows pubkey from ledger beempy -u listaccounts searches for accounts that have pubkey derived from attached ledger beempy -u keygen creates pubkey lists that can be used for newaccount and changekeys new option use_ledger and path for Hive Allow role selection in keygen Changelog for versions 0.23.6 beempy --key key_list.json command can be used to set keys in beempy without using the wallet. Using the Ledger Nano for signing beem/beepy is the first library/application that supports signing of operation with the ledger Nano S/X hardware wallet. It uses the Hive wallet application for ledger Nano S/X from @netuoso. Uploading the app to a Nano X is not yet possible. You need to install the Hive app to your ledger Nano. You can download it from ledger-hive-app by @netuoso. Please read the readme on how to install the app to your ledger. When you sucessfully could install the Hive app to your ledger, you need to select it and enter Open application. You need also install ledgerblue pip install -U ledgerblue You can test if everything works with beempy -u listkeys The -u or --use-ledger parameter activates ledger support for all beempy commands. If you see ledgerblue.commException.CommException: Exception : Invalid status 6d00 (Unexpected state of device: verify that the right application is opened?) your setup is not correct. If you see +-------------------------------------------------------+ | Available Key for 48'/13'/0'/0'/0' | +-------------------------------------------------------+ | STM... | +-------------------------------------------------------+ everything is set up. Changing your keys You need to change your keys to the public keys that your ledger provides before using the ledger for signing. It is also possible to change only the owner key. As private keys will not leave your hardware wallet, you cannot put them into keychain or peakd as before. You can only sign operations on apps that support the ledger. When you lose your ledger and your recovery phrase, you lose the ability to sign with that role. E.g. when you changed your owner key, and you lost your ledger and the recovery phrase, you cannot change your account keys anymore. In the current state (lack of ledger support by other apps), i recommend to change only the owner key. Seting the path The pubkeys that are provided by the ledger are derived from the given path. A path for hive consists of 48'/13'/role number'/account index'/key sequence' The role number is 0 for owner, 1 for active, 4 for posting and 3 for memo. You need to assign an account index number to your account. You are starting with 0 and when you plan to use a second account, you need to increase this index. The key index starts with 0 for each role and account index. Whenever you change your keys, you need to increase the key sequence index. Changing your owner, active and posting key It is not recommended to change the memo key (no encryption support for ledger yet on beem yet), this is the maximum setup. Changing your owner, active and posting key means at this moment (when more app add support for ledger, this will change): all operation can only be broadcasted by beem/beempy Voting, transfering on a mobile device is not possible keychain usage is not possible peakd, hive.blog cannot be used for voting or any other operation hive-engine or any dapp cannot be longer used At first, three new pubkeys needs to be obtained from the ledger: beempy -u keygen --account 3 --role owner,active,posting This beempy command creates three pubkeys for the account index 3 derived from the following paths: 48'/13'/0'/3'/0' 48'/13'/1'/3'/0' 48'/13'/4'/3'/0' You can save the pubkeys to a json for easier key changing by: beempy -u keygen --account 3 --role owner,active,posting --export-pub beembot.json In both cases you will be asked to approve the shown pubkeys on your ledger Nano. We can now change the keys with beempy changekeys --import-pub beembot.json beembot Changing your owner and active key This involves changing your owner and active key. all operation that need an active key can only be broadcasted by beem/beempy. transfering Hive/HBD on a mobile device is not possible keychain usage is not possible for operation needing an active key hive-engine or any dapps that are using custom_json signed with an active key cannot be longer used. beempy -u keygen --role owner,active --export-pub account_pubkeys.json You can set the account index with --account. Changing the keys can be done with beempy changekeys as shown above. Changing your owner key This changes only the owner key. Active and posting key are still managed with private keys as before. Until ledger is not supported by keychain or on mobile, this is the most likely usecase now. Changing your keys needs to be done with beem/beempy beempy -u keygen --role owner --export-pub account_pubkeys.json You can set the account index with --account. Changing the keys can be done with beempy changekeys as shown above. You may need to change the default path. When you used --account 2, you need to set beempy set default_path &quot;48'/13'/0'/2'/0'&quot; Whenever you use beempy -u, this path is used for signing. Checking if changing keys was sucessfully The following command checks if a derived pubkey from the ledger is set somewhere in Hive using getAccountFromPublicKey from the wallet class. beempy -u listaccounts returns then +---------+---------+-------------------------------------------------------+------------------+ | Name | Type | Available Key | Path | +---------+---------+-------------------------------------------------------+------------------+ | beembot | owner | STM7UYXcqJsZqoroPKoziDmB3XHSVfnLbLJ9TWSVsD4zC7YHsdgo5 | 48'/13'/0'/3'/0' | | beembot | active | STM7a1bcn9Anx7F2dKZGEkbVRFbCHT9exx42SSKd4JicJW82VQtAc | 48'/13'/1'/3'/0' | | beembot | posting | STM7cvheXK2FTEAkWe1U7SD2W6H6H3a6uJ28ors37rxcE5evP5fji | 48'/13'/4'/3'/0' | +---------+---------+-------------------------------------------------------+------------------+ Set the path As we have used a account index &amp;gt; 0, we must change the default path. At the moment, only one path can be stored in default_path. beempy set default_path &quot;48'/13'/0'/3'/0'&quot; We will now sign all transactions with the owner key, until the path is changed or set for a transaction with --path. You can check which pubkey is returned for the actually set default_path with beempy -u listkeys The shown pubkey can checked with beempy info STM... Using the ledger to sign transactions We can now sign all transaction by the ledger, when -u or --use-ledger is set. beempy -u transfer -a beembot holger80 0.001 HIVE &quot;test with ledger&quot; This is now signed with the owner key, as default_path is &quot;48'/13'/0'/3'/0'&quot;. We can sign the same trx with the active by setting the path to &quot;48'/13'/1'/3'/0'&quot;: beempy -u --path &quot;48'/13'/1'/3'/0'&quot; transfer -a beembot holger80 0.001 HIVE &quot;test with ledger&quot; Building and signing a transaction in python from beem import Hive from beem.transactionbuilder import TransactionBuilder from beembase import operations hive = Hive(use_ledger=True, path=&quot;48'/13'/1'/3'/0'&quot;) tx = TransactionBuilder(blockchain_instance=hive) transfer_dict = {&quot;from&quot;: 'beembot', &quot;to&quot;: 'holger80', &quot;amount&quot;: '0.001 HIVE', &quot;memo&quot;: 'test with ledger'} op = operations.Transfer(**transfer_dict) tx.appendOps(op) tx.sign() tx.broadcast() It is also possible to use the predifined broadcast function from beem import Hive from beem.account import Account hive = Hive(use_ledger=True, path=&quot;48'/13'/1'/3'/0'&quot;) account = Account(&quot;beembot&quot;, blockchain_instance=hive) account.transfer(&quot;holger80&quot;, 0.001, &quot;HIVE&quot;, &quot;test with ledger&quot;) Sending all four transfers had worked: I was asked everytime to check the transfer op and had to validate every field. Advantages for changing the owner key Letting the ledger signing with the owner key has some advantages: beempy can be used without entering any keys, as I can sign all operations with the owner key Each operation must be reviewed on the ledger before broadcasting The owner key cannot be accedentially pasted When I lose the keys to my hive account, I can easily create new keys, as the owner key is stored in the ledger. My owner key is protected against pishing and hacking. I just need to take good care of the ledger device and the recovery words. Roadmap For the next release, I will work on multisigning with ledger as one signer (at the moment, only one signer is possible when using ledger). Also, a better path handling is needed. At the moment, only one default_path can be set. Something like storing the path for all used keys, depending on roles and accounts in a database would be useful. Parallel storage of keys and paths would also nice. If you like what I do, consider casting a vote for me as witness on Hivesigner or on PeakD See: update for beem: support for Ledger Nano (S/X) has been added by @holger80</summary></entry><entry><title type="html">Hive Application for the Ledger Nano S/X Hardware Wallet</title><link href="https://hivedocs.info/howto/nano/python/wallet/2020/05/10/hive-application-for-the-ledger-nano-s-x-hardware-wallet.html" rel="alternate" type="text/html" title="Hive Application for the Ledger Nano S/X Hardware Wallet" /><published>2020-05-10T20:46:24-07:00</published><updated>2020-05-10T20:46:24-07:00</updated><id>https://hivedocs.info/howto/nano/python/wallet/2020/05/10/hive-application-for-the-ledger-nano-s-x-hardware-wallet</id><content type="html" xml:base="https://hivedocs.info/howto/nano/python/wallet/2020/05/10/hive-application-for-the-ledger-nano-s-x-hardware-wallet.html">&lt;h1 id=&quot;hive-application-for-the-ledger-nano-sx-hardware-wallet&quot;&gt;Hive Application for the Ledger Nano S/X Hardware Wallet&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;https://files.peakd.com/file/peakd-hive/netuoso/7AwM0dDa-image.png&quot; alt=&quot;image credit @thepeakstudio&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;hive-wallet-application-framework-for-ledger-nano-sx&quot;&gt;Hive wallet application framework for Ledger Nano S/X&lt;/h4&gt;

&lt;p&gt;When installed on a Ledger Nano S/X device, this application will deserialize transactions and display them on the hardware wallet for secure validation by the user. If the user accepts the transaction, this application will then sign the transaction with the key specified by the user.&lt;/p&gt;

&lt;p&gt;There is a pre-compiled binary available in the &lt;code class=&quot;highlighter-rouge&quot;&gt;bin/&lt;/code&gt; folder and attached to each public Github release. However, you may optionally choose to compile the Hive Ledger Nano S/X application manually with help of the run.sh script provided in the repository. Usage instructions and examples are below..&lt;/p&gt;

&lt;h2 id=&quot;latest-stable-release&quot;&gt;Latest Stable Release&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
&amp;lt;a href=&quot;https://github.com/netuoso/ledger-app-hive/releases/tag/v1.0.0&quot;&amp;gt;https://github.com/netuoso/ledger-app-hive/releases/tag/v1.0.0&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;building-the-development-version&quot;&gt;Building the Development Version&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Clone this repository
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git clone 
&amp;lt;a href=&quot;https://github.com/netuoso/ledger-app-hive&quot;&amp;gt;https://github.com/netuoso/ledger-app-hive&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Install Docker if not already installed
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;./run.sh install_docker&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Pull the latest ledger-app-hive docker image
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;./run.sh update&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Start the Docker container
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;./run.sh start&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Build the ledger-app-hive application
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;./run.sh build VERSION&lt;/code&gt; # replace VERSION with &lt;code class=&quot;highlighter-rouge&quot;&gt;1.4&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;1.5&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;1.6&lt;/code&gt; based on your Ledger Nano S firmware&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;loading-the-development-app-on-a-ledger-nano-s&quot;&gt;Loading the Development App on a Ledger Nano S&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;you must use Python 3.7 for loading&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Connect the Ledger Nano S to your computer&lt;/li&gt;
  &lt;li&gt;Install the Ledger python module
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pip install ledgerblue&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Load the application onto the Ledger Nano S
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;./run.sh load VERSION&lt;/code&gt; # replace VERSION with &lt;code class=&quot;highlighter-rouge&quot;&gt;1.4&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;1.5&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;1.6&lt;/code&gt; based on your Ledger Nano S firmware&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;testing-the-application&quot;&gt;Testing the Application&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Navigate to the test directory
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cd test&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Run the &lt;code class=&quot;highlighter-rouge&quot;&gt;getPublicKey.py&lt;/code&gt; script &lt;strong&gt;python3 required&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;python getPublicKey.py&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Run the &lt;code class=&quot;highlighter-rouge&quot;&gt;signTransaction.py&lt;/code&gt; script &lt;strong&gt;python2.7 required&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;python signTransaction.py&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;example-testing-output&quot;&gt;Example Testing Output&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;getPublicKey:
&lt;img src=&quot;https://imgur.com/ptKjcek.gif&quot; alt=&quot;&quot; /&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Public key compressed 03d3ead6a886a5896dd05f546704761228c14d6b8d306fa7b0945f75df678b6193
Calculated from public key: Address STM8SZg3gBcuAEkz9xGKVMnwJHWESHcXFYWDbRcSBCz322dH6jPwy
Received from ledger: Address STM8SZg3gBcuAEkz9xGKVMnwJHWESHcXFYWDbRcSBCz322dH6jPwy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;signTransaction:
&lt;img src=&quot;https://imgur.com/48o5qhz.gif&quot; alt=&quot;&quot; /&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HID =&amp;gt; d40400007205800000308000000d8000000080000000800000000420000000000000000000000000000000000000000000000000000000000000000004021b88040485342c6304048164b85e040101042302086e65747479626f74076e6574756f736f010000000000000003535445454d000000040100
HID &amp;lt;= 1f636611993e469a3ad201fbe40df36e8c2be55378a3ca338654f3844d80ce2d6d32a27448c4e5d5e63707f1b9164b42e8cf29f052ae72bd12609182c9d8c88c389000
1f636611993e469a3ad201fbe40df36e8c2be55378a3ca338654f3844d80ce2d6d32a27448c4e5d5e63707f1b9164b42e8cf29f052ae72bd12609182c9d8c88c38
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;technical-application-spec&quot;&gt;Technical Application Spec&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/netuoso/ledger-app-hive/blob/master/doc/hiveapp.asc&quot;&gt;ledger-app-hive Technical Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;contributing&quot;&gt;Contributing&lt;/h2&gt;
&lt;p&gt;If you are interested in contributing the to ledger-app-hive repository, you will need a Github account. Ensure that you have compiled the application, have it installed on your Ledger Nano S/X, and/or throughly read this README and visited the relevant links before filing an issue.&lt;/p&gt;

&lt;h2 id=&quot;bug-reports&quot;&gt;Bug Reports&lt;/h2&gt;
&lt;p&gt;If you encounter an issue while using the ledger-app-hive application on a Ledger Nano S/X Device, visit the &lt;a href=&quot;https://github.com/netuoso/ledger-app-hive/issues&quot;&gt;issues pages&lt;/a&gt; and leave a detailed issue with all necessary information to assist with debugging.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;notes&quot;&gt;Notes&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;This application is in its initial release (v1.0.0)&lt;/li&gt;
  &lt;li&gt;There may be bugs that I have not encountered&lt;/li&gt;
  &lt;li&gt;If the Ledger Nano Device ever locks up, just unplug and restart it&lt;/li&gt;
  &lt;li&gt;If you encounter bugs/issues file them on the Github repository&lt;/li&gt;
  &lt;li&gt;Try and break the application and report bugs for the benefit of everyone&lt;/li&gt;
  &lt;li&gt;Contact @netuoso on Hive, on the &lt;a href=&quot;https://discord.gg/cvnByhu&quot;&gt;HiveDevs Discord&lt;/a&gt;, or on Twitter (&lt;a href=&quot;https://twitter.com/netuoso&quot;&gt;@netuoso&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Thanks to @thepeakstudio and @doze for their contribution of the Hive + Ledger image assets used on this page&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;vote-netuoso-for-hive-witness&quot;&gt;Vote @netuoso For Hive Witness&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://peakd.com/me/witnesses&quot;&gt;https://peakd.com/me/witnesses&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://wallet.hive.blog/&quot;&gt;https://wallet.hive.blog/&lt;/a&gt;
~witnesses&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;links&quot;&gt;Links&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/netuoso/ledger-app-hive&quot;&gt;https://github.com/netuoso/ledger-app-hive&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.ledger.com/&quot;&gt;https://www.ledger.com/&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://twitter.com/netuoso&quot;&gt;https://twitter.com/netuoso&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://files.peakd.com/file/peakd-hive/netuoso/HzlFn4gX-image.png&quot; alt=&quot;image credit @doze&quot; /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;
  See: &lt;a href=&quot;https://peakd.com/hive-139531/@netuoso/hive-application-for-the-ledger-nano-s-x-hardware-wallet&quot;&gt;Hive Application for the Ledger Nano S/X Hardware Wallet&lt;/a&gt;
  by
  &lt;a href=&quot;https://hive.blog/@netuoso&quot;&gt;@netuoso&lt;/a&gt;
&lt;/p&gt;</content><author><name>netuoso</name></author><summary type="html">Hive Application for the Ledger Nano S/X Hardware Wallet Hive wallet application framework for Ledger Nano S/X When installed on a Ledger Nano S/X device, this application will deserialize transactions and display them on the hardware wallet for secure validation by the user. If the user accepts the transaction, this application will then sign the transaction with the key specified by the user. There is a pre-compiled binary available in the bin/ folder and attached to each public Github release. However, you may optionally choose to compile the Hive Ledger Nano S/X application manually with help of the run.sh script provided in the repository. Usage instructions and examples are below.. Latest Stable Release &amp;lt;a href=&quot;https://github.com/netuoso/ledger-app-hive/releases/tag/v1.0.0&quot;&amp;gt;https://github.com/netuoso/ledger-app-hive/releases/tag/v1.0.0&amp;lt;/a&amp;gt; Building the Development Version Clone this repository git clone &amp;lt;a href=&quot;https://github.com/netuoso/ledger-app-hive&quot;&amp;gt;https://github.com/netuoso/ledger-app-hive&amp;lt;/a&amp;gt; Install Docker if not already installed ./run.sh install_docker Pull the latest ledger-app-hive docker image ./run.sh update Start the Docker container ./run.sh start Build the ledger-app-hive application ./run.sh build VERSION # replace VERSION with 1.4,1.5,1.6 based on your Ledger Nano S firmware Loading the Development App on a Ledger Nano S you must use Python 3.7 for loading Connect the Ledger Nano S to your computer Install the Ledger python module pip install ledgerblue Load the application onto the Ledger Nano S ./run.sh load VERSION # replace VERSION with 1.4,1.5,1.6 based on your Ledger Nano S firmware Testing the Application Navigate to the test directory cd test Run the getPublicKey.py script python3 required python getPublicKey.py Run the signTransaction.py script python2.7 required python signTransaction.py Example Testing Output getPublicKey: Public key compressed 03d3ead6a886a5896dd05f546704761228c14d6b8d306fa7b0945f75df678b6193 Calculated from public key: Address STM8SZg3gBcuAEkz9xGKVMnwJHWESHcXFYWDbRcSBCz322dH6jPwy Received from ledger: Address STM8SZg3gBcuAEkz9xGKVMnwJHWESHcXFYWDbRcSBCz322dH6jPwy signTransaction: HID =&amp;gt; d40400007205800000308000000d8000000080000000800000000420000000000000000000000000000000000000000000000000000000000000000004021b88040485342c6304048164b85e040101042302086e65747479626f74076e6574756f736f010000000000000003535445454d000000040100 HID &amp;lt;= 1f636611993e469a3ad201fbe40df36e8c2be55378a3ca338654f3844d80ce2d6d32a27448c4e5d5e63707f1b9164b42e8cf29f052ae72bd12609182c9d8c88c389000 1f636611993e469a3ad201fbe40df36e8c2be55378a3ca338654f3844d80ce2d6d32a27448c4e5d5e63707f1b9164b42e8cf29f052ae72bd12609182c9d8c88c38 Technical Application Spec ledger-app-hive Technical Documentation Contributing If you are interested in contributing the to ledger-app-hive repository, you will need a Github account. Ensure that you have compiled the application, have it installed on your Ledger Nano S/X, and/or throughly read this README and visited the relevant links before filing an issue. Bug Reports If you encounter an issue while using the ledger-app-hive application on a Ledger Nano S/X Device, visit the issues pages and leave a detailed issue with all necessary information to assist with debugging. Notes This application is in its initial release (v1.0.0) There may be bugs that I have not encountered If the Ledger Nano Device ever locks up, just unplug and restart it If you encounter bugs/issues file them on the Github repository Try and break the application and report bugs for the benefit of everyone Contact @netuoso on Hive, on the HiveDevs Discord, or on Twitter (@netuoso) Thanks to @thepeakstudio and @doze for their contribution of the Hive + Ledger image assets used on this page Vote @netuoso For Hive Witness https://peakd.com/me/witnesses https://wallet.hive.blog/ ~witnesses Links https://github.com/netuoso/ledger-app-hive https://www.ledger.com/ https://twitter.com/netuoso See: Hive Application for the Ledger Nano S/X Hardware Wallet by @netuoso</summary></entry><entry><title type="html">Core development report #1</title><link href="https://hivedocs.info/news/core/development/2020/05/09/core-development-report-1.html" rel="alternate" type="text/html" title="Core development report #1" /><published>2020-05-09T11:13:15-07:00</published><updated>2020-05-09T11:13:15-07:00</updated><id>https://hivedocs.info/news/core/development/2020/05/09/core-development-report-1</id><content type="html" xml:base="https://hivedocs.info/news/core/development/2020/05/09/core-development-report-1.html">&lt;p&gt;&lt;img src=&quot;https://files.peakd.com/file/peakd-hive/howo/HC23nP8u-image.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Hi,&lt;/p&gt;

&lt;p&gt;First of all thank you to everyone who voted on my proposal, it’s very humbling to see so much support from stakeholders.&lt;/p&gt;

&lt;p&gt;I initially wanted to make a post every two to three weeks as I mentioned on my initial proposal, the reason for such length between each update is that sometimes we work on big features (like rc delegations) and sometimes weekly updates would be almost one liners of very technical talk “yep did x/y/z still working on it, stuck on this one bug because code works strangely on z”. And I figured it was not worth it.&lt;/p&gt;

&lt;p&gt;But when talking with @neoxian he told me&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;You know what? Even a simple post each week saying “Yep, I’m still working on X” would be a confidence booster.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So I figured I will try to do weekly updates on what I am doing. Be warned though, these posts will be very technical and also most likely quite short.&lt;/p&gt;

&lt;p&gt;So I am still working on RC delegations, I have taken a bunch of the feedback from my last post on it 
&lt;a href=&quot;https://peakd.com/rc/@howo/rc-delegations-current-development-status-and-request-for-feedback&quot;&gt;https://peakd.com/rc/@howo/rc-delegations-current-development-status-and-request-for-feedback&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I removed some limitations on slots to allow the user to set the delegator on slots 1,2 and 3. This should help with some use cases where before if steem created your account, only the @steem account could delegate to you and change that slot.&lt;/p&gt;

&lt;p&gt;I have changed it to keep the same property (aka letting outside people change it) but also added the possibility for the user to set it himself.&lt;/p&gt;

&lt;p&gt;Previously there was also a thing that allowed the top (ranked 1) witness from changing the recover slot, which was useful because mined accounts do not have a recovery account, so that slot would effectively be dead (since only the recovery account could update that slot). for those accounts. Now that the user can set the slot himself, I removed that feature since I don’t think it really serves a purpose anymore.&lt;/p&gt;

&lt;p&gt;There was a bug where the code allowed the same pool to delegate to the same user on multiple slots, which served zero purpose but caused the rc calculations to fail. So I changed the logic to only allow one delegation. The good news is that now that this is in place I could make some modifications to the delegation operation to hide some of the slot complexity to devs.&lt;/p&gt;

&lt;p&gt;Before when delegating from a pool to a user you had to say to which slot you wanted to delegate, now it’s no longer needed. So that’s a bit more straightforward.&lt;/p&gt;

&lt;p&gt;I also made a javascript test suite, but it’s still a work in progress. I will share it in time so it can double as a documentation for devs on how to work with the new rc system. I don’t want to share it too early because I am still making some changes to the api and the parameters.&lt;/p&gt;

&lt;p&gt;I took this opportunity to test a bunch of edge cases, I am not done yet but this is starting to look solid.&lt;/p&gt;

&lt;p&gt;I think in the coming days I will work on making a proper test suite in the actual chain code so I can test things more quickly and also this means we can run it whenever we make a release making the whole chain more stable.&lt;/p&gt;

&lt;p&gt;speaking of testing, the hf24 code freeze is almost upon us, and some of my api changes still need to have automated tests before then, so I will make that as well in the short term.&lt;/p&gt;

&lt;h1 id=&quot;questions--suggestions--ask-them-below-&quot;&gt;Questions ? Suggestions ? Ask them below !&lt;/h1&gt;

&lt;p&gt;Please consider voting on my core development proposal here 
&lt;a href=&quot;https://hivedao.com/proposals/97&quot;&gt;https://hivedao.com/proposals/97&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I am also managing the @steempress witness if you have a free vote that would be very appreciated :)&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;
  See: &lt;a href=&quot;https://peakd.com/hive/@howo/core-development-report-1&quot;&gt;Core development report #1&lt;/a&gt;
  by
  &lt;a href=&quot;https://hive.blog/@howo&quot;&gt;@howo&lt;/a&gt;
&lt;/p&gt;</content><author><name>howo</name></author><summary type="html">Hi, First of all thank you to everyone who voted on my proposal, it’s very humbling to see so much support from stakeholders. I initially wanted to make a post every two to three weeks as I mentioned on my initial proposal, the reason for such length between each update is that sometimes we work on big features (like rc delegations) and sometimes weekly updates would be almost one liners of very technical talk “yep did x/y/z still working on it, stuck on this one bug because code works strangely on z”. And I figured it was not worth it. But when talking with @neoxian he told me You know what? Even a simple post each week saying “Yep, I’m still working on X” would be a confidence booster. So I figured I will try to do weekly updates on what I am doing. Be warned though, these posts will be very technical and also most likely quite short. So I am still working on RC delegations, I have taken a bunch of the feedback from my last post on it https://peakd.com/rc/@howo/rc-delegations-current-development-status-and-request-for-feedback I removed some limitations on slots to allow the user to set the delegator on slots 1,2 and 3. This should help with some use cases where before if steem created your account, only the @steem account could delegate to you and change that slot. I have changed it to keep the same property (aka letting outside people change it) but also added the possibility for the user to set it himself. Previously there was also a thing that allowed the top (ranked 1) witness from changing the recover slot, which was useful because mined accounts do not have a recovery account, so that slot would effectively be dead (since only the recovery account could update that slot). for those accounts. Now that the user can set the slot himself, I removed that feature since I don’t think it really serves a purpose anymore. There was a bug where the code allowed the same pool to delegate to the same user on multiple slots, which served zero purpose but caused the rc calculations to fail. So I changed the logic to only allow one delegation. The good news is that now that this is in place I could make some modifications to the delegation operation to hide some of the slot complexity to devs. Before when delegating from a pool to a user you had to say to which slot you wanted to delegate, now it’s no longer needed. So that’s a bit more straightforward. I also made a javascript test suite, but it’s still a work in progress. I will share it in time so it can double as a documentation for devs on how to work with the new rc system. I don’t want to share it too early because I am still making some changes to the api and the parameters. I took this opportunity to test a bunch of edge cases, I am not done yet but this is starting to look solid. I think in the coming days I will work on making a proper test suite in the actual chain code so I can test things more quickly and also this means we can run it whenever we make a release making the whole chain more stable. speaking of testing, the hf24 code freeze is almost upon us, and some of my api changes still need to have automated tests before then, so I will make that as well in the short term. Questions ? Suggestions ? Ask them below ! Please consider voting on my core development proposal here https://hivedao.com/proposals/97 I am also managing the @steempress witness if you have a free vote that would be very appreciated :) See: Core development report #1 by @howo</summary></entry><entry><title type="html">Ruby Client for Hive: hive-ruby-1.0.0.pre.1</title><link href="https://hivedocs.info/tools/ruby/2020/05/07/ruby-client-for-hive-hive-ruby-1-0-0-pre-1.html" rel="alternate" type="text/html" title="Ruby Client for Hive: hive-ruby-1.0.0.pre.1" /><published>2020-05-07T01:16:18-07:00</published><updated>2020-05-07T01:16:18-07:00</updated><id>https://hivedocs.info/tools/ruby/2020/05/07/ruby-client-for-hive-hive-ruby-1-0-0-pre-1</id><content type="html" xml:base="https://hivedocs.info/tools/ruby/2020/05/07/ruby-client-for-hive-hive-ruby-1-0-0-pre-1.html">&lt;div class=&quot;pull-right&quot;&gt;
  &lt;img src=&quot;https://files.peakd.com/file/peakd-hive/inertia/aJnQFjOw-logo-128.png&quot; /&gt;
&lt;/div&gt;

&lt;h1 id=&quot;hive-ruby&quot;&gt;&lt;a href=&quot;https://gitlab.syncad.com/hive/hive-ruby&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;hive-ruby&lt;/code&gt;&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;Hive-ruby the Ruby API for Hive blockchain.&lt;/p&gt;

&lt;h2 id=&quot;radiator-vs-hive-ruby&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;radiator&lt;/code&gt; vs. &lt;code class=&quot;highlighter-rouge&quot;&gt;hive-ruby&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;hive-ruby&lt;/code&gt; gem was written from the ground up by &lt;code class=&quot;highlighter-rouge&quot;&gt;@inertia&lt;/code&gt;, who is also the author of &lt;a href=&quot;https://github.com/inertia186/radiator&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;radiator&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“I intend to continue work on &lt;code class=&quot;highlighter-rouge&quot;&gt;radiator&lt;/code&gt; indefinitely. But in &lt;code class=&quot;highlighter-rouge&quot;&gt;radiator-0.5&lt;/code&gt;, I intend to refactor &lt;code class=&quot;highlighter-rouge&quot;&gt;radiator&lt;/code&gt; so that is uses &lt;code class=&quot;highlighter-rouge&quot;&gt;hive-ruby&lt;/code&gt; as its core. This means that some features of &lt;code class=&quot;highlighter-rouge&quot;&gt;radiator&lt;/code&gt; like Serialization will become redundant. I think it’s still useful for radiator to do its own serialization because it reduces the number of API requests.” - @inertia&lt;/p&gt;
&lt;/blockquote&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;radiator&lt;/code&gt;&lt;/th&gt;
      &lt;th&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;hive-ruby&lt;/code&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Has internal failover logic&lt;/td&gt;
      &lt;td&gt;Can have failover delegated externally&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Passes &lt;code class=&quot;highlighter-rouge&quot;&gt;error&lt;/code&gt; responses to the caller&lt;/td&gt;
      &lt;td&gt;Handles &lt;code class=&quot;highlighter-rouge&quot;&gt;error&lt;/code&gt; responses and raises exceptions&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Supports tx signing, does its own serialization&lt;/td&gt;
      &lt;td&gt;Also supports tx signing, but delegates serialization to &lt;code class=&quot;highlighter-rouge&quot;&gt;database_api.get_transaction_hex&lt;/code&gt;, then deserializes to verify&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;All apis and methods are hardcoded&lt;/td&gt;
      &lt;td&gt;Asks &lt;code class=&quot;highlighter-rouge&quot;&gt;jsonrpc&lt;/code&gt; what apis and methods are available from the node&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;(&lt;code class=&quot;highlighter-rouge&quot;&gt;radiator-0.4.x&lt;/code&gt;) Only supports AppBase but relies on &lt;code class=&quot;highlighter-rouge&quot;&gt;condenser_api&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Only supports AppBase but does not rely on &lt;code class=&quot;highlighter-rouge&quot;&gt;condenser_api&lt;/code&gt; &lt;strong&gt;(WIP)&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Small list of helper methods for select ops (in addition to build your own transaction)&lt;/td&gt;
      &lt;td&gt;Complete implementation of helper methods for every op (in addition to build your own transaction)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Does not (yet) support &lt;code class=&quot;highlighter-rouge&quot;&gt;json-rpc-batch&lt;/code&gt; requests&lt;/td&gt;
      &lt;td&gt;Supports &lt;code class=&quot;highlighter-rouge&quot;&gt;json-rpc-batch&lt;/code&gt; requests&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;getting-started&quot;&gt;Getting Started&lt;/h2&gt;

&lt;p&gt;The hive-ruby gem is compatible with Ruby 2.2.5 or later.&lt;/p&gt;

&lt;h3 id=&quot;install-the-gem-for-your-project&quot;&gt;Install the gem for your project&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;(Assuming that &lt;a href=&quot;https://www.ruby-lang.org/en/downloads/&quot;&gt;Ruby is installed&lt;/a&gt; on your computer, as well as &lt;a href=&quot;http://rubygems.org/pages/download&quot;&gt;RubyGems&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;To install the gem on your computer, run in shell:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;hive-ruby
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;… then add in your code:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'hive'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To add the gem as a dependency to your project with &lt;a href=&quot;http://bundler.io/&quot;&gt;Bundler&lt;/a&gt;, you can add this line in your Gemfile:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'hive-ruby'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;require: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'hive'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;examples&quot;&gt;Examples&lt;/h2&gt;

&lt;h3 id=&quot;broadcast-vote&quot;&gt;Broadcast Vote&lt;/h3&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;voter: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;voter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;author: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;permlink: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;permlink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;weight: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;weight&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Hive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Broadcast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;vote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;wif: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wif&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;params: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;streaming&quot;&gt;Streaming&lt;/h3&gt;

&lt;p&gt;The value passed to the block is an object, with the keys: &lt;code class=&quot;highlighter-rouge&quot;&gt;:type&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;:value&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;operations&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To start a stream from a specific block number, pass it as an argument:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;operations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;at_block_num: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9001&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can also grab the related transaction id and block number for each operation:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;operations&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trx_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;block_num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block_num&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; :: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trx_id&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To stream only certain operations:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;operations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;types: :vote_operation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Or pass an array of certain operations:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;operations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;types: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:comment_operation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:vote_operation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Or (optionally) just pass the operation(s) you want as the only arguments.  This is semantic sugar for when you want specific types and take all of the defaults.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;operations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:vote_operation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To also include virtual operations:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;operations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;include_virtual: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;multisig&quot;&gt;Multisig&lt;/h3&gt;

&lt;p&gt;You can use multisignature to broadcast an operation.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;voter: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;voter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;author: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;permlink: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;permlink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;weight: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;weight&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Hive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Broadcast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;vote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;wif: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wif1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wif2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;params: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In addition to signing with multiple &lt;code class=&quot;highlighter-rouge&quot;&gt;wif&lt;/code&gt; private keys, it is possible to also export a partially signed transaction to have signing completed by someone else.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;TransactionBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;wif: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wif1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;vote: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;voter: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;voter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;author: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;permlink: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;permlink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;weight: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;weight&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;trx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_json&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'trx.json'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'w'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then send the contents of &lt;code class=&quot;highlighter-rouge&quot;&gt;trx.json&lt;/code&gt; to the other signing party so they can privately sign and broadcast the transaction.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;trx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'trx.json'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;TransactionBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;wif: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wif2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;trx: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;api&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CondenserApi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;trx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;transaction&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;broadcast_transaction_synchronous&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;get-accounts&quot;&gt;Get Accounts&lt;/h3&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;api&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;DatabaseApi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find_accounts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;accounts: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'hiveio'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'alice'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;accounts&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;reputation-formatter&quot;&gt;Reputation Formatter&lt;/h3&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;rep&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Formatter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reputation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reputation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rep&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;tests&quot;&gt;Tests&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Clone the client repository into a directory of your choice:
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git clone 
&amp;lt;a href=&quot;https://gitlab.syncad.com/hive/hive-ruby.git&quot;&amp;gt;https://gitlab.syncad.com/hive/hive-ruby.git&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Navigate into the new folder
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cd hive-ruby&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;All tests can be invoked as follows:
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bundle exec rake test&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;To run &lt;code class=&quot;highlighter-rouge&quot;&gt;static&lt;/code&gt; tests:
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bundle exec rake test:static&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;To run &lt;code class=&quot;highlighter-rouge&quot;&gt;broadcast&lt;/code&gt; tests (broadcast is simulated, only &lt;code class=&quot;highlighter-rouge&quot;&gt;verify&lt;/code&gt; is actually used):
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bundle exec rake test:broadcast&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;To run &lt;code class=&quot;highlighter-rouge&quot;&gt;threads&lt;/code&gt; tests (which quickly verifies thread safety):
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bundle exec rake test:threads&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;To run &lt;code class=&quot;highlighter-rouge&quot;&gt;testnet&lt;/code&gt; tests (which does actual broadcasts)
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;TEST_NODE=
&amp;lt;a href=&quot;https://testnet-api.openhive.network&quot;&amp;gt;https://testnet-api.openhive.network&amp;lt;/a&amp;gt;
 bundle exec rake test:testnet&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can also run other tests that are not part of the above &lt;code class=&quot;highlighter-rouge&quot;&gt;test&lt;/code&gt; execution:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;To run &lt;code class=&quot;highlighter-rouge&quot;&gt;block_range&lt;/code&gt;, which streams blocks (using &lt;code class=&quot;highlighter-rouge&quot;&gt;json-rpc-batch&lt;/code&gt;)
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bundle exec rake stream:block_range&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want to point to any node for tests, instead of letting the test suite pick the default, set the environment variable to &lt;code class=&quot;highlighter-rouge&quot;&gt;TEST_NODE&lt;/code&gt;, e.g.:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ TEST_NODE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&amp;lt;a &lt;span class=&quot;nv&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://testnet-api.openhive.network&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;https://testnet-api.openhive.network&amp;lt;/a&amp;gt;
 bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;rake &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;contributions&quot;&gt;Contributions&lt;/h2&gt;

&lt;p&gt;Patches are welcome! Contributors are listed in the &lt;code class=&quot;highlighter-rouge&quot;&gt;hive-ruby.gemspec&lt;/code&gt; file. Please run the tests (&lt;code class=&quot;highlighter-rouge&quot;&gt;rake test&lt;/code&gt;) before opening a pull request and make sure that you are passing all of them. If you would like to contribute, but don’t know what to work on, check the issues list.&lt;/p&gt;

&lt;h2 id=&quot;issues&quot;&gt;Issues&lt;/h2&gt;

&lt;p&gt;When you find issues, please report them!&lt;/p&gt;

&lt;h2 id=&quot;license&quot;&gt;License&lt;/h2&gt;

&lt;p&gt;MIT&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;
  See: &lt;a href=&quot;https://peakd.com/hive-139531/@inertia/ruby-client-for-hive-hive-ruby-1-0-0-pre-1&quot;&gt;Ruby Client for Hive: hive-ruby-1.0.0.pre.1&lt;/a&gt;
  by
  &lt;a href=&quot;https://hive.blog/@inertia&quot;&gt;@inertia&lt;/a&gt;
&lt;/p&gt;</content><author><name>inertia</name></author><summary type="html">hive-ruby Hive-ruby the Ruby API for Hive blockchain. radiator vs. hive-ruby The hive-ruby gem was written from the ground up by @inertia, who is also the author of radiator. “I intend to continue work on radiator indefinitely. But in radiator-0.5, I intend to refactor radiator so that is uses hive-ruby as its core. This means that some features of radiator like Serialization will become redundant. I think it’s still useful for radiator to do its own serialization because it reduces the number of API requests.” - @inertia radiator hive-ruby Has internal failover logic Can have failover delegated externally Passes error responses to the caller Handles error responses and raises exceptions Supports tx signing, does its own serialization Also supports tx signing, but delegates serialization to database_api.get_transaction_hex, then deserializes to verify All apis and methods are hardcoded Asks jsonrpc what apis and methods are available from the node (radiator-0.4.x) Only supports AppBase but relies on condenser_api Only supports AppBase but does not rely on condenser_api (WIP) Small list of helper methods for select ops (in addition to build your own transaction) Complete implementation of helper methods for every op (in addition to build your own transaction) Does not (yet) support json-rpc-batch requests Supports json-rpc-batch requests Getting Started The hive-ruby gem is compatible with Ruby 2.2.5 or later. Install the gem for your project (Assuming that Ruby is installed on your computer, as well as RubyGems) To install the gem on your computer, run in shell: gem install hive-ruby … then add in your code: require 'hive' To add the gem as a dependency to your project with Bundler, you can add this line in your Gemfile: gem 'hive-ruby', require: 'hive' Examples Broadcast Vote params = { voter: voter, author: author, permlink: permlink, weight: weight } Hive::Broadcast.vote(wif: wif, params: params) do |result| puts result end Streaming The value passed to the block is an object, with the keys: :type and :value. stream = Hive::Stream.new stream.operations do |op| puts &quot;#{op.type}: #{op.value}&quot; end To start a stream from a specific block number, pass it as an argument: stream = Hive::Stream.new stream.operations(at_block_num: 9001) do |op| puts &quot;#{op.type}: #{op.value}&quot; end You can also grab the related transaction id and block number for each operation: stream = Hive::Stream.new stream.operations do |op, trx_id, block_num| puts &quot;#{block_num} :: #{trx_id}&quot; puts &quot;#{op.type}: #{op.value}&quot; end To stream only certain operations: stream = Hive::Stream.new stream.operations(types: :vote_operation) do |op| puts &quot;#{op.type}: #{op.value}&quot; end Or pass an array of certain operations: stream = Hive::Stream.new stream.operations(types: [:comment_operation, :vote_operation]) do |op| puts &quot;#{op.type}: #{op.value}&quot; end Or (optionally) just pass the operation(s) you want as the only arguments. This is semantic sugar for when you want specific types and take all of the defaults. stream = Hive::Stream.new stream.operations(:vote_operation) do |op| puts &quot;#{op.type}: #{op.value}&quot; end To also include virtual operations: stream = Hive::Stream.new stream.operations(include_virtual: true) do |op| puts &quot;#{op.type}: #{op.value}&quot; end Multisig You can use multisignature to broadcast an operation. params = { voter: voter, author: author, permlink: permlink, weight: weight } Hive::Broadcast.vote(wif: [wif1, wif2], params: params) do |result| puts result end In addition to signing with multiple wif private keys, it is possible to also export a partially signed transaction to have signing completed by someone else. builder = Hive::TransactionBuilder.new(wif: wif1) builder.put(vote: { voter: voter, author: author, permlink: permlink, weight: weight }) trx = builder.sign.to_json File.open('trx.json', 'w') do |f| f.write(trx) end Then send the contents of trx.json to the other signing party so they can privately sign and broadcast the transaction. trx = open('trx.json').read builder = Hive::TransactionBuilder.new(wif: wif2, trx: trx) api = Hive::CondenserApi.new trx = builder.transaction api.broadcast_transaction_synchronous(trx) Get Accounts api = Hive::DatabaseApi.new api.find_accounts(accounts: ['hiveio', 'alice']) do |result| puts result.accounts end Reputation Formatter rep = Hive::Formatter.reputation(account.reputation) puts rep Tests Clone the client repository into a directory of your choice: git clone &amp;lt;a href=&quot;https://gitlab.syncad.com/hive/hive-ruby.git&quot;&amp;gt;https://gitlab.syncad.com/hive/hive-ruby.git&amp;lt;/a&amp;gt; Navigate into the new folder cd hive-ruby All tests can be invoked as follows: bundle exec rake test To run static tests: bundle exec rake test:static To run broadcast tests (broadcast is simulated, only verify is actually used): bundle exec rake test:broadcast To run threads tests (which quickly verifies thread safety): bundle exec rake test:threads To run testnet tests (which does actual broadcasts) TEST_NODE= &amp;lt;a href=&quot;https://testnet-api.openhive.network&quot;&amp;gt;https://testnet-api.openhive.network&amp;lt;/a&amp;gt; bundle exec rake test:testnet You can also run other tests that are not part of the above test execution: To run block_range, which streams blocks (using json-rpc-batch) bundle exec rake stream:block_range If you want to point to any node for tests, instead of letting the test suite pick the default, set the environment variable to TEST_NODE, e.g.: $ TEST_NODE= &amp;lt;a href=&quot;https://testnet-api.openhive.network&quot;&amp;gt;https://testnet-api.openhive.network&amp;lt;/a&amp;gt; bundle exec rake test Contributions Patches are welcome! Contributors are listed in the hive-ruby.gemspec file. Please run the tests (rake test) before opening a pull request and make sure that you are passing all of them. If you would like to contribute, but don’t know what to work on, check the issues list. Issues When you find issues, please report them! License MIT See: Ruby Client for Hive: hive-ruby-1.0.0.pre.1 by @inertia</summary></entry><entry><title type="html">Hive Pressure 2: How to Answer Hive Questions?</title><link href="https://hivedocs.info/news/devops/hivemind/nodes/2020/05/04/hive-pressure-2-how-to-answer-hive-questions.html" rel="alternate" type="text/html" title="Hive Pressure 2: How to Answer Hive Questions?" /><published>2020-05-04T11:32:57-07:00</published><updated>2020-05-04T11:32:57-07:00</updated><id>https://hivedocs.info/news/devops/hivemind/nodes/2020/05/04/hive-pressure-2-how-to-answer-hive-questions</id><content type="html" xml:base="https://hivedocs.info/news/devops/hivemind/nodes/2020/05/04/hive-pressure-2-how-to-answer-hive-questions.html">&lt;p&gt;First, you need to learn how to ask good questions, and here are some of the resources that will help you to do so:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developers.hive.io/apidefinitions/&quot;&gt;https://developers.hive.io/apidefinitions/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://hive.hivesigner.com/&quot;&gt;https://hive.hivesigner.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(Kudos to @inertia and @good-karma)&lt;/p&gt;

&lt;p&gt;This set of API calls is far from perfect, but for now it has to be enough for general purpose API nodes.&lt;/p&gt;

&lt;center&gt;
&lt;a href=&quot;https://www.youtube.com/watch&quot;&gt;https://www.youtube.com/watch&lt;/a&gt;
?v=vlW9lDE3DuI&lt;/center&gt;

&lt;h1 id=&quot;the-big-the-slow-and-the-ugly&quot;&gt;The big, the slow, and the ugly.&lt;/h1&gt;
&lt;p&gt;Back in the days, we used to run a so-called “full node”, that is a single &lt;del&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;steemd&lt;/code&gt;&lt;/del&gt; (yeah, we haven’t renamed the binary yet) node that was built with &lt;code class=&quot;highlighter-rouge&quot;&gt;LOW_MEMORY_NODE=OFF&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;CLEAR_VOTES=OFF&lt;/code&gt; and configured with all the plugins you can get.
It required a lot of RAM, it replayed for ages, and it was a huge pain to keep it running.
Our code is great for running blockchain. It’s not equally efficient when it has to answer complex questions.&lt;/p&gt;

&lt;h1 id=&quot;current-architecture&quot;&gt;Current architecture&lt;/h1&gt;
&lt;p&gt;The idea is to move the workload requiring complex queries out of our blockchain nodes.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                  +----------+                                                                
                  |          &amp;lt;-----------------+             @     @@@@@@    ,@@@@@%          
                  | Hivemind |                 |            @@@@    (@@@@@*    @@@@@@         
        +-------+ |          &amp;lt;-------+         |          %@@@@@@     @@@@@@    %@@@@@,       
        |       | +-----^----+       |         |         @@@@@@@@@@    @@@@@@     @@@@@@      
        | redis |       |            |         |       ,@@@@@@@@@@@@     @@@@@@    @@@@@@     
        |       &amp;lt;--+    |       +----v-----+   |      @@@@@@@@@@@@@@@&amp;amp;    @@@@@@     @@@@@@   
        +-------+  |  +-v-+     |          |   |     @@@@@@@@@@@@@@@@@@    .@@@@@%    @@@@@@  
                   |  |   &amp;lt;-----&amp;gt; AH node  |   |   @@@@@@@@@@@@@@@@@@@@@(              .@@@@@%
        +-------+  +--&amp;gt; j |     |          |   |    @@@@@@@@@@@@@@@@@@@@               @@@@@@ 
&amp;lt;-------&amp;gt;       |     | u |     +----------+   |     *@@@@@@@@@@@@@@@@     @@@@@@    @@@@@@.  
&amp;lt;-------&amp;gt; nginx &amp;lt;-----&amp;gt; s |                    |       @@@@@@@@@@@@@@    &amp;amp;@@@@@.    @@@@@@    
&amp;lt;-------&amp;gt;       |     | s |     +----------+   |        #@@@@@@@@@@     @@@@@@    #@@@@@/     
        +-------+     | i |     |          |   |          @@@@@@@@    /@@@@@/    @@@@@@       
                      |   &amp;lt;-----&amp;gt; FAT node &amp;lt;---+           @@@@@(    @@@@@@    .@@@@@&amp;amp;        
                      +---+     |          |                 @@     @@@@@&amp;amp;    @@@@@@          
                                +----------+                                                  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;sup&gt;
Sorry, lack of GIMP skills
&lt;/sup&gt;&lt;/p&gt;

&lt;h2 id=&quot;hivemind&quot;&gt;Hivemind&lt;/h2&gt;
&lt;p&gt;For this purpose I use Hivemind (hats off to @roadscape) backed by PostgreSQL.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Hive is a “consensus interpretation” layer for the Hive blockchain, maintaining the state of social features such as post feeds, follows, and communities. Written in Python, it synchronizes an SQL database with chain state, providing developers with a more flexible/extensible alternative to the raw hived API.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;fat-node&quot;&gt;FAT node&lt;/h2&gt;
&lt;p&gt;Also, instead of a single &lt;code class=&quot;highlighter-rouge&quot;&gt;hived&lt;/code&gt; node with all the plugins, I chose to run two nodes, one of them is a “fat node” (&lt;code class=&quot;highlighter-rouge&quot;&gt;LOW_MEMORY_NODE=OFF&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;CLEAR_VOTES=OFF&lt;/code&gt;) on a MIRA-enabled instance to feed the Hivemind.&lt;/p&gt;

&lt;p&gt;Please note that I have NOT included &lt;code class=&quot;highlighter-rouge&quot;&gt;market_history&lt;/code&gt; in my configuration, simply because it doesn’t require a “fat node”, but Hivemind requires it, so make sure that you have it somewhere.&lt;/p&gt;

&lt;h2 id=&quot;ah-node&quot;&gt;AH node&lt;/h2&gt;
&lt;p&gt;Account history node is the other node I use in my setup. It serves not only account history, but it’s definitely the heaviest plugin here, hence the name.
I’m not using MIRA here, because I prefer the pre-MIRA implementation of the account history plugin and MIRA had some issues with it. Also, it’s way too slow for replay.&lt;/p&gt;

&lt;h2 id=&quot;jussi&quot;&gt;Jussi&lt;/h2&gt;
&lt;p&gt;Instead of one service, I now have three specialized ones, I need to route incoming calls to them.
So the &lt;code class=&quot;highlighter-rouge&quot;&gt;get_account_history&lt;/code&gt; goes to the AH node, while the &lt;code class=&quot;highlighter-rouge&quot;&gt;get_followers&lt;/code&gt; goes to Hivemind.
That’s what jussi does, but it also caches things.&lt;/p&gt;

&lt;h2 id=&quot;redis&quot;&gt;Redis&lt;/h2&gt;
&lt;p&gt;Jussi uses Redis as in-memory data cache. This can very effectively take load off the nodes. Even though most of the entries quickly expire, it’s enough to effectively answer common questions such as “what’s in the head block?”&lt;/p&gt;

&lt;div style=&quot;display: block; margin: 0 auto;&quot;&gt;
  &lt;p&gt;&lt;img src=&quot;https://images.hive.blog/DQmdb8PSfpBkD2dm8cJtLZJNvCYAe2aYLy5Rr9MCLQxHLoN/headblock.jpg&quot; alt=&quot;headblock.jpg&quot; /&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;8 dApps asking for the latest block will result in 1 call to the node and 7 cache hits from Redis.&lt;/p&gt;

&lt;h2 id=&quot;nginx&quot;&gt;Nginx&lt;/h2&gt;
&lt;p&gt;That’s the world facing component - here you can have your SSL termination, rate limiting, load balancing, and all other fancy stuff related to serving your clients.&lt;/p&gt;

&lt;h1 id=&quot;resources&quot;&gt;Resources&lt;/h1&gt;
&lt;p&gt;Now when you know all the components, let’s take a look at what is required to run them all and (in the darkness) bind them.&lt;/p&gt;

&lt;h2 id=&quot;small-stuff&quot;&gt;Small stuff&lt;/h2&gt;
&lt;p&gt;There are no specific needs here. The more traffic you expect, the more resources you will need, but they can run on any reasonable server on instance:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Nginx needs what nginx usually needs - a bunch of cores and some RAM.&lt;/li&gt;
  &lt;li&gt;Jussi is no different than nginx when it comes to resources.&lt;/li&gt;
  &lt;li&gt;Redis needs what redis usually needs - a few GB of RAM to hold the data.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;big-stuff&quot;&gt;Big stuff&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;the AH node, which is non-MIRA in my setup, requires plenty of RAM for the &lt;code class=&quot;highlighter-rouge&quot;&gt;shared_memory.bin&lt;/code&gt; file to either hold it on tmpfs or buffer/cache it, especially during replay. A machine with 32GB RAM will work, but I would rather suggest using a 64GB RAM machine these days. Of course, low latency storage such as SSD or NVMe is a must. You need 600GB of it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;the FAT node in my setup is running MIRA, so it’s not that memory hungry, but the more RAM you have, the more effective it can be. A machine with 16GB RAM might work, but I would go with 32GB or 64GB for it. Don’t even try without a very fast SSD or NVMe. You need 400GB of it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Hivemind itself is a simple script, but it needs PostgreSQL as a database backend, and for that you need all the things that PostgreSQL usually needs. It can run on pretty much everything, as long as you have enough space to fit the data, currently 300GB. Of course, faster storage and more RAM will result in much better performance.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;from-zero-to-hero&quot;&gt;From zero to hero&lt;/h1&gt;
&lt;p&gt;Reference hardware configuration:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Intel(R) Xeon(R) E-2274G CPU @ 4.00GHz
64GB RAM, ECC, 2666MT/s
2x NVMe 960GB (SAMSUNG PM983)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;When you are starting from scratch, it’s best to get a recent &lt;code class=&quot;highlighter-rouge&quot;&gt;block_log&lt;/code&gt;
I’m providing one at 
&lt;a href=&quot;https://gtg.openhive.network/get/blockchain/&quot;&gt;https://gtg.openhive.network/get/blockchain/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;How fast you can get it depends on your network and load on my server. The average downloading speed is around 30MB/s, so you should be able to get it in less than 3 hours.&lt;/p&gt;

&lt;div style=&quot;display: block; margin: 0 auto;&quot;&gt;
  &lt;p&gt;&lt;img src=&quot;https://images.hive.blog/DQmRTxHALWD8Nszhg7cYkqu4tQHCLotEYMK7USDF2xthbAH/replay-speed.png&quot; alt=&quot;replay-speed.png&quot; /&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;div style=&quot;display: block; margin: 0 auto;&quot;&gt;
  &lt;p&gt;&lt;img src=&quot;https://images.hive.blog/DQmeYsSaz9PTyt6wamQU76Z6Mz7gJGce8aHxmj78Q58DLuo/replay-times.png&quot; alt=&quot;replay-times.png&quot; /&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Node type&lt;/th&gt;
      &lt;th&gt;Replay Time&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;AH Node&lt;/td&gt;
      &lt;td&gt;15 hours 42 minutes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Fat Node&lt;/td&gt;
      &lt;td&gt;48 hours 53 minutes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Hivemind&lt;/td&gt;
      &lt;td&gt;85 hours 50 minutes&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Roughly you need 4 days and 9 hours to have it synced to the latest head block.&lt;/p&gt;

&lt;div style=&quot;display: block; margin: 0 auto;&quot;&gt;
  &lt;p&gt;&lt;img src=&quot;https://images.hive.blog/DQmTQXoQYYFenMLrvLRZzuHZQdZ6wStc394jKTnGF8bya1s/4days9hours.jpg&quot; alt=&quot;4days9hours.jpg&quot; /&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;A lot can be improved at the backend, and we are working on that. To be developer-friendly, we also need to improve the set of available API calls, finally get rid of the deprecated ones such as &lt;code class=&quot;highlighter-rouge&quot;&gt;get_state&lt;/code&gt;, and move away from the all in one wrapper &lt;code class=&quot;highlighter-rouge&quot;&gt;condenser_api&lt;/code&gt;. But that’s a different story for a different occasion.&lt;/p&gt;

&lt;div style=&quot;display: block; margin: 0 auto;&quot;&gt;
  &lt;p&gt;&lt;img src=&quot;https://images.hive.blog/DQmSJUo4g9AmoVFoAbs6gzMw6coVURUQKg7URtBSfkEj5oJ/Hive_free-file.png&quot; alt=&quot;Hive_Queen&quot; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;

&lt;p&gt;
  See: &lt;a href=&quot;https://hive.blog/hive-160391/@gtg/hive-pressure-2-how-to-answer-hive-questions&quot;&gt;Hive Pressure 2: How to Answer Hive Questions?&lt;/a&gt;
  by
  &lt;a href=&quot;https://hive.blog/@gtg&quot;&gt;@gtg&lt;/a&gt;
&lt;/p&gt;</content><author><name>gtg</name></author><summary type="html">First, you need to learn how to ask good questions, and here are some of the resources that will help you to do so: https://developers.hive.io/apidefinitions/ https://hive.hivesigner.com/ (Kudos to @inertia and @good-karma) This set of API calls is far from perfect, but for now it has to be enough for general purpose API nodes. https://www.youtube.com/watch ?v=vlW9lDE3DuI The big, the slow, and the ugly. Back in the days, we used to run a so-called “full node”, that is a single steemd (yeah, we haven’t renamed the binary yet) node that was built with LOW_MEMORY_NODE=OFF and CLEAR_VOTES=OFF and configured with all the plugins you can get. It required a lot of RAM, it replayed for ages, and it was a huge pain to keep it running. Our code is great for running blockchain. It’s not equally efficient when it has to answer complex questions. Current architecture The idea is to move the workload requiring complex queries out of our blockchain nodes. +----------+ | &amp;lt;-----------------+ @ @@@@@@ ,@@@@@% | Hivemind | | @@@@ (@@@@@* @@@@@@ +-------+ | &amp;lt;-------+ | %@@@@@@ @@@@@@ %@@@@@, | | +-----^----+ | | @@@@@@@@@@ @@@@@@ @@@@@@ | redis | | | | ,@@@@@@@@@@@@ @@@@@@ @@@@@@ | &amp;lt;--+ | +----v-----+ | @@@@@@@@@@@@@@@&amp;amp; @@@@@@ @@@@@@ +-------+ | +-v-+ | | | @@@@@@@@@@@@@@@@@@ .@@@@@% @@@@@@ | | &amp;lt;-----&amp;gt; AH node | | @@@@@@@@@@@@@@@@@@@@@( .@@@@@% +-------+ +--&amp;gt; j | | | | @@@@@@@@@@@@@@@@@@@@ @@@@@@ &amp;lt;-------&amp;gt; | | u | +----------+ | *@@@@@@@@@@@@@@@@ @@@@@@ @@@@@@. &amp;lt;-------&amp;gt; nginx &amp;lt;-----&amp;gt; s | | @@@@@@@@@@@@@@ &amp;amp;@@@@@. @@@@@@ &amp;lt;-------&amp;gt; | | s | +----------+ | #@@@@@@@@@@ @@@@@@ #@@@@@/ +-------+ | i | | | | @@@@@@@@ /@@@@@/ @@@@@@ | &amp;lt;-----&amp;gt; FAT node &amp;lt;---+ @@@@@( @@@@@@ .@@@@@&amp;amp; +---+ | | @@ @@@@@&amp;amp; @@@@@@ +----------+ Sorry, lack of GIMP skills Hivemind For this purpose I use Hivemind (hats off to @roadscape) backed by PostgreSQL. Hive is a “consensus interpretation” layer for the Hive blockchain, maintaining the state of social features such as post feeds, follows, and communities. Written in Python, it synchronizes an SQL database with chain state, providing developers with a more flexible/extensible alternative to the raw hived API. FAT node Also, instead of a single hived node with all the plugins, I chose to run two nodes, one of them is a “fat node” (LOW_MEMORY_NODE=OFF and CLEAR_VOTES=OFF) on a MIRA-enabled instance to feed the Hivemind. Please note that I have NOT included market_history in my configuration, simply because it doesn’t require a “fat node”, but Hivemind requires it, so make sure that you have it somewhere. AH node Account history node is the other node I use in my setup. It serves not only account history, but it’s definitely the heaviest plugin here, hence the name. I’m not using MIRA here, because I prefer the pre-MIRA implementation of the account history plugin and MIRA had some issues with it. Also, it’s way too slow for replay. Jussi Instead of one service, I now have three specialized ones, I need to route incoming calls to them. So the get_account_history goes to the AH node, while the get_followers goes to Hivemind. That’s what jussi does, but it also caches things. Redis Jussi uses Redis as in-memory data cache. This can very effectively take load off the nodes. Even though most of the entries quickly expire, it’s enough to effectively answer common questions such as “what’s in the head block?” 8 dApps asking for the latest block will result in 1 call to the node and 7 cache hits from Redis. Nginx That’s the world facing component - here you can have your SSL termination, rate limiting, load balancing, and all other fancy stuff related to serving your clients. Resources Now when you know all the components, let’s take a look at what is required to run them all and (in the darkness) bind them. Small stuff There are no specific needs here. The more traffic you expect, the more resources you will need, but they can run on any reasonable server on instance: Nginx needs what nginx usually needs - a bunch of cores and some RAM. Jussi is no different than nginx when it comes to resources. Redis needs what redis usually needs - a few GB of RAM to hold the data. Big stuff the AH node, which is non-MIRA in my setup, requires plenty of RAM for the shared_memory.bin file to either hold it on tmpfs or buffer/cache it, especially during replay. A machine with 32GB RAM will work, but I would rather suggest using a 64GB RAM machine these days. Of course, low latency storage such as SSD or NVMe is a must. You need 600GB of it. the FAT node in my setup is running MIRA, so it’s not that memory hungry, but the more RAM you have, the more effective it can be. A machine with 16GB RAM might work, but I would go with 32GB or 64GB for it. Don’t even try without a very fast SSD or NVMe. You need 400GB of it. Hivemind itself is a simple script, but it needs PostgreSQL as a database backend, and for that you need all the things that PostgreSQL usually needs. It can run on pretty much everything, as long as you have enough space to fit the data, currently 300GB. Of course, faster storage and more RAM will result in much better performance. From zero to hero Reference hardware configuration: Intel(R) Xeon(R) E-2274G CPU @ 4.00GHz 64GB RAM, ECC, 2666MT/s 2x NVMe 960GB (SAMSUNG PM983) When you are starting from scratch, it’s best to get a recent block_log I’m providing one at https://gtg.openhive.network/get/blockchain/ How fast you can get it depends on your network and load on my server. The average downloading speed is around 30MB/s, so you should be able to get it in less than 3 hours. Node type Replay Time AH Node 15 hours 42 minutes Fat Node 48 hours 53 minutes Hivemind 85 hours 50 minutes Roughly you need 4 days and 9 hours to have it synced to the latest head block. A lot can be improved at the backend, and we are working on that. To be developer-friendly, we also need to improve the set of available API calls, finally get rid of the deprecated ones such as get_state, and move away from the all in one wrapper condenser_api. But that’s a different story for a different occasion. See: Hive Pressure 2: How to Answer Hive Questions? by @gtg</summary></entry><entry><title type="html">Interactive Hive API moved to Hivesigner</title><link href="https://hivedocs.info/news/swagger/api/2020/04/29/interactive-hive-api-moved-to-hivesigner.html" rel="alternate" type="text/html" title="Interactive Hive API moved to Hivesigner" /><published>2020-04-29T05:59:54-07:00</published><updated>2020-04-29T05:59:54-07:00</updated><id>https://hivedocs.info/news/swagger/api/2020/04/29/interactive-hive-api-moved-to-hivesigner</id><content type="html" xml:base="https://hivedocs.info/news/swagger/api/2020/04/29/interactive-hive-api-moved-to-hivesigner.html">&lt;p&gt;Thank you everyone for your &lt;a href=&quot;https://esteem.app/hive/@good-karma/hivesigner-ongoing-development-and-improvement&quot;&gt;support on Hivesigner proposal&lt;/a&gt;. We are almost in range of approved proposals. If you haven’t voted, please consider approving proposal to help us make Hivesigner better.&lt;/p&gt;

&lt;center&gt; 
&lt;img src=&quot;https://img.esteem.app/kbgnol.png&quot; /&gt;
 &lt;/center&gt;

&lt;h2 id=&quot;recent-updates&quot;&gt;Recent updates&lt;/h2&gt;

&lt;p&gt;Some updates if you have missed recent developments related to Hivesigner:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://esteem.app/hive-139531/@emrebeyler/powering-up-2&quot;&gt;Hivesigner Python Client&lt;/a&gt; released thanks to @emrebeyler for his awesome job and contribution. Consider voting for his witness!&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/ledgerconnect/hivesigner/wiki&quot;&gt;Hivesigner wiki updated&lt;/a&gt;, we are in process of unifying all documentation via github so that website can mirror and guide developers. Integrating Hivesigner OAuth is quite simple but with proper documentation it can help even new developers to start developing on Blockchain/Hive.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Earlier today, we pushed new release that changes some links and fixes few bugs related to dhive. Chrome/Brave extension update is submitted for review, should be available soon.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Today, in effort to help onboarding more developers and new apps on Hive, we are introducing &lt;a href=&quot;https://hive.hivesigner.com&quot;&gt;Interactive Hive API explorer&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Visit 
&lt;a href=&quot;https://hive.hivesigner.com&quot;&gt;https://hive.hivesigner.com&lt;/a&gt;
 to try out Hive API directly on your browser.&lt;/li&gt;
  &lt;li&gt;It is &lt;a href=&quot;https://github.com/ledgerconnect/hiveapi&quot;&gt;opensource&lt;/a&gt;, if you find bugs or want to contribute, feel free to create pull request or &lt;a href=&quot;https://github.com/ledgerconnect/hiveapi/issues&quot;&gt;report issues on github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It has search field to find relevant APIs quickly, some queries have default values so results can be fetched with single click, I believe it is very convenient for developers to get started. Check it out!&lt;/p&gt;

&lt;p&gt;Simply studying Hive API + Hivesigner API, you can start building decentralized apps in matter of hours.&lt;/p&gt;

&lt;h2 id=&quot;buidl-on&quot;&gt;Buidl on!&lt;/h2&gt;

&lt;h1 id=&quot;support-proposal&quot;&gt;Support proposal&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://hivesigner.com/sign/update-proposal-votes?proposal_ids=%5B88%5D&amp;amp;approve=true&quot;&gt;Vote for Hivesigner Proposal&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;HiveDao: 
&lt;a href=&quot;https://hivedao.com/proposal/88&quot;&gt;https://hivedao.com/proposal/88&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;PeakD: 
&lt;a href=&quot;https://peakd.com/proposals/88&quot;&gt;https://peakd.com/proposals/88&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;HiveBlog Wallet: 
&lt;a href=&quot;https://wallet.hive.blog/proposals&quot;&gt;https://wallet.hive.blog/proposals&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Discord: 
&lt;a href=&quot;https://discord.gg/pNJn7wh&quot;&gt;https://discord.gg/pNJn7wh&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ledgerconnect/hivesigner/issues/2&quot;&gt;Github roadmap thread&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;
  See: &lt;a href=&quot;https://esteem.app/hivesigner/@good-karma/interactive-hive-api-moved-to-hivesigner&quot;&gt;Interactive Hive API moved to Hivesigner&lt;/a&gt;
  by
  &lt;a href=&quot;https://hive.blog/@good-karma&quot;&gt;@good-karma&lt;/a&gt;
&lt;/p&gt;</content><author><name>good-karma</name></author><summary type="html">Thank you everyone for your support on Hivesigner proposal. We are almost in range of approved proposals. If you haven’t voted, please consider approving proposal to help us make Hivesigner better. Recent updates Some updates if you have missed recent developments related to Hivesigner: Hivesigner Python Client released thanks to @emrebeyler for his awesome job and contribution. Consider voting for his witness! Hivesigner wiki updated, we are in process of unifying all documentation via github so that website can mirror and guide developers. Integrating Hivesigner OAuth is quite simple but with proper documentation it can help even new developers to start developing on Blockchain/Hive. Earlier today, we pushed new release that changes some links and fixes few bugs related to dhive. Chrome/Brave extension update is submitted for review, should be available soon. Today, in effort to help onboarding more developers and new apps on Hive, we are introducing Interactive Hive API explorer Visit https://hive.hivesigner.com to try out Hive API directly on your browser. It is opensource, if you find bugs or want to contribute, feel free to create pull request or report issues on github It has search field to find relevant APIs quickly, some queries have default values so results can be fetched with single click, I believe it is very convenient for developers to get started. Check it out! Simply studying Hive API + Hivesigner API, you can start building decentralized apps in matter of hours. Buidl on! Support proposal Vote for Hivesigner Proposal HiveDao: https://hivedao.com/proposal/88 PeakD: https://peakd.com/proposals/88 HiveBlog Wallet: https://wallet.hive.blog/proposals Discord: https://discord.gg/pNJn7wh Github roadmap thread See: Interactive Hive API moved to Hivesigner by @good-karma</summary></entry><entry><title type="html">How to set up a Hive Witness or Seed node (non-MIRA) / Upgrade from Steem-Docker to Hive-Docker</title><link href="https://hivedocs.info/howto/witness/docker/node/2020/04/27/how-to-set-up-a-hive-witness-or-seed-node-non-mira-upgrade-from-steem-docker-to-hive-docker.html" rel="alternate" type="text/html" title="How to set up a Hive Witness or Seed node (non-MIRA) / Upgrade from Steem-Docker to Hive-Docker" /><published>2020-04-27T12:30:21-07:00</published><updated>2020-04-27T12:30:21-07:00</updated><id>https://hivedocs.info/howto/witness/docker/node/2020/04/27/how-to-set-up-a-hive-witness-or-seed-node-non-mira-upgrade-from-steem-docker-to-hive-docker</id><content type="html" xml:base="https://hivedocs.info/howto/witness/docker/node/2020/04/27/how-to-set-up-a-hive-witness-or-seed-node-non-mira-upgrade-from-steem-docker-to-hive-docker.html">&lt;div style=&quot;display: block; margin: 0 auto;&quot;&gt;

  &lt;p&gt;&lt;img src=&quot;https://cdn.privex.io/img/posts/hive-in-a-box.png&quot; alt=&quot;Hive-in-a-box Logo&quot; /&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;h1 id=&quot;fresh-install&quot;&gt;Fresh install&lt;/h1&gt;

&lt;p&gt;To become a witness without using MIRA, you’ll require a server with at LEAST 64GB of RAM, 500GB disk (preferably SSD / NVMe), and a fast, reliable network.&lt;/p&gt;

&lt;p&gt;If you do not have a server which meets these requirements, you can order one from &lt;a href=&quot;privex.io&quot;&gt;Privex&lt;/a&gt; (you can even pay with HIVE/HBD!)&lt;/p&gt;

&lt;p&gt;I personally use @privex for my own witness as a Top 20. While I am the CEO of Privex, there are many other customers, including witnesses who use our servers for their witness nodes, seed nodes, RPC nodes and/or other projects.&lt;/p&gt;

&lt;p&gt;You’re free to use any other server provider. I don’t recommend trying to run a witness on your home internet, as it’s likely not reliable enough for a witness.&lt;/p&gt;

&lt;p&gt;Be aware that certain server providers have poor networks or hardware, which may cause missed blocks, so you may be hopping around a few until you can find one that’s suitable for a witness node.&lt;/p&gt;

&lt;p&gt;If you want to learn more about witnesses and what they do, check out my article: &lt;a href=&quot;https://peakd.com/witness-category/@someguy123/seriously-what-is-a-witness-why-should-i-care-how-do-i-become-one-answer&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;shared-memory-note&quot;&gt;Shared memory note&lt;/h3&gt;

&lt;p&gt;Right now, the minimum RAM requirement for non-MIRA witnesses is 64GB due to shared memory.&lt;/p&gt;

&lt;p&gt;This is because Hive stores information in a file called “shared_memory.bin” which is used similar to RAM. This file is around 58GB on HF23, and will continue to grow overtime.&lt;/p&gt;

&lt;p&gt;As this file continues to grow, you will need to increase the amount of RAM in your server. So it is better to have some room.&lt;/p&gt;

&lt;h3 id=&quot;install-hive-docker-and-dependencies&quot;&gt;Install hive-docker and dependencies&lt;/h3&gt;

&lt;p&gt;First, we install some basic dependencies (assuming you’re on Ubuntu/Debian).&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt update
sudo apt install git curl wget
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next, we install hive-docker (a line starting with a # is a comment, you don’t need to paste them)&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone 
&amp;lt;a &lt;span class=&quot;nv&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://github.com/someguy123/hive-docker.git&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;https://github.com/someguy123/hive-docker.git&amp;lt;/a&amp;gt;

&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;hive-docker
&lt;span class=&quot;c&quot;&gt;# If you don't already have a docker installation, this will install it for you&lt;/span&gt;
./run.sh install_docker
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After the install_docker command has finished, it’s recommended to log out and back in again (e.g. close your SSH client and re-connect) to ensure that the shell correctly detects docker.&lt;/p&gt;

&lt;p&gt;Then, you can download and install the latest witness/seed docker image&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# This downloads/updates the low-memory docker image for Hive
./run.sh install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you are a witness, you need to adjust the configuration as needed e.g. witness name, private key, logging config, turn off p2p-endpoint etc.&lt;/p&gt;

&lt;p&gt;If you’re running a seed, then don’t worry about the config, it will just work and you can skip the signing key/config section&lt;/p&gt;

&lt;h3 id=&quot;generating-a-signing-key&quot;&gt;Generating a signing key&lt;/h3&gt;

&lt;p&gt;For witnesses, you’ll need to generate a signing key first. You can use the remote wallet for this.&lt;/p&gt;

&lt;p&gt;Open the wallet using a public server with the following command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./run.sh remote_wallet
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Note: you may receive an error such as “timeout” or “invalid http status”. This is normal, it’s usually due to a server in the Privex load balancer having temporary problems.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Just run the command again a few times until it connects (you’ll see new»&amp;gt; or locked»&amp;gt;)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Create a key pair for your witness.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;suggest_brain_key
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div style=&quot;display: block; margin: 0 auto;&quot;&gt;

  &lt;p&gt;&lt;img src=&quot;https://cdn.privex.io/img/posts/hive-suggest-brainkey.png&quot; alt=&quot;Screenshot of cli_wallet suggest_brain_key command&quot; /&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;You should get something similar to this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  &quot;brain_priv_key&quot;: &quot;GOCART VINCENT PHOTIC IRON OUTHIT UNGLOBE SICCA LOP TASKIT BOOSTER WINDED SPRY SACKBUT UNICE WELL RUBELLE&quot;,
  &quot;wif_priv_key&quot;: &quot;5J1Wn41BbSS4L83N9n7P5nmMSVg9uaWfVySnd363TvyhWPzU2e9&quot;,
  &quot;pub_key&quot;: &quot;STM7iCEkCR261F7CeBCsmpE1RcW8hnR5pZYKCFbuVqe5HSJ41YewE&quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Put the keys in Notepad or something similar for the moment so you don’t lose them.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Press CTRL-D to exit the wallet.&lt;/p&gt;

&lt;h3 id=&quot;setting-up-your-config&quot;&gt;Setting up your config&lt;/h3&gt;

&lt;p&gt;Now, to set your witness name and private key. You can use &lt;code class=&quot;highlighter-rouge&quot;&gt;nano&lt;/code&gt; (a simple text editor on Linux) for this.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nano data/witness_node_data_dir/config.ini
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you are running a witness, you’ll want to change one of the first lines in the file to disable the seed.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Endpoint for P2P node to listen on
p2p-endpoint = 0.0.0.0:2001
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Simply place a # (hash sign) at the start of the p2p-endpoint line. This will disable the seed. Example:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Endpoint for P2P node to listen on
#p2p-endpoint = 0.0.0.0:2001
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now to add your witness settings. Scroll down the file (use the up/down arrows, or page up/down) until you see something like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Percent of witnesses (0-99) that must be participating in order to produce blocks
required-participation = 33

# name of witness controlled by this node (e.g. initwitness )
# witness =

# name of miner and its private key (e.g. [&quot;account&quot;,&quot;WIF PRIVATE KEY&quot;] )
# miner =

# Number of threads to use for proof of work mining
# mining-threads =

# WIF PRIVATE KEY to be used by one or more witnesses or miners
# private-key =
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div style=&quot;display: block; margin: 0 auto;&quot;&gt;

  &lt;p&gt;&lt;img src=&quot;https://cdn.privex.io/img/posts/hive-witness-config.png&quot; alt=&quot;Screenshot of witness config.ini&quot; /&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;You’ll want to uncomment (remove the # from the start) the &lt;code class=&quot;highlighter-rouge&quot;&gt;witness =&lt;/code&gt; line, and the &lt;code class=&quot;highlighter-rouge&quot;&gt;private-key =&lt;/code&gt; line.&lt;/p&gt;

&lt;p&gt;Grab your public/private key that you saved earlier into notepad (or other similar app).&lt;/p&gt;

&lt;p&gt;Then, similar to below, add your witness’ name in quotes, e.g. “someguy123” in front of the &lt;code class=&quot;highlighter-rouge&quot;&gt;witness =&lt;/code&gt;, and your private key (without quotes) in front of the &lt;code class=&quot;highlighter-rouge&quot;&gt;private-key =&lt;/code&gt; line. To save you time in the future, it can be useful to place your public signing key in a comment above your private key (see example)&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# name of witness controlled by this node (e.g. initwitness )
witness = &quot;someguy123&quot;

# name of miner and its private key (e.g. [&quot;account&quot;,&quot;WIF PRIVATE KEY&quot;] )
# miner =

# Number of threads to use for proof of work mining
# mining-threads =

# WIF PRIVATE KEY to be used by one or more witnesses or miners
# public key: STM7iCEkCR261F7CeBCsmpE1RcW8hnR5pZYKCFbuVqe5HSJ41YewE
private-key = 5J1Wn41BbSS4L83N9n7P5nmMSVg9uaWfVySnd363TvyhWPzU2e9
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now (assuming you’re using nano) press CTRL-X, and press the y key when it asks if you would like to save.&lt;/p&gt;

&lt;h3 id=&quot;environment-settings&quot;&gt;Environment settings&lt;/h3&gt;

&lt;p&gt;If you’re already comfortable with Linux, and want to play around with settings for hive-docker you may want to consider setting up a .env file, see the &lt;a href=&quot;https://github.com/someguy123/hive-docker&quot;&gt;README for more information&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Otherwise, let’s continue. The defaults are generally fine for most people.&lt;/p&gt;

&lt;h3 id=&quot;setting-up-shared-memory-swap-settings-and-downloading-the-blockchain&quot;&gt;Setting up shared memory, swap settings, and downloading the blockchain&lt;/h3&gt;

&lt;p&gt;At this point you should have:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;installed hive-in-a-box&lt;/li&gt;
  &lt;li&gt;installed docker (through the run.sh command)&lt;/li&gt;
  &lt;li&gt;downloaded and installed the Hive docker container&lt;/li&gt;
  &lt;li&gt;set up your witness configuration&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Your witness is almost ready. Just a few more small things.&lt;/p&gt;

&lt;p&gt;You’ll need to set the shared memory size (use sudo if not logged in as root). 64 gigabytes is recommended (64G). Please be aware that the shared memory size changes constantly.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo ./run.sh shm_size 64G
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You’ll also want to adjust your “swappiness”. This is a setting which tells Linux how much it should use swap (virtual memory on your disk. very slow). You’ll want to set this to 1, which means “don’t use the swap unless it’s absolutely necessary”. This helps to prevent missed blocks due to excessive swapping despite plenty of free RAM.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# To persist on reboot, place 'vm.swappiness=1' in /etc/sysctl.conf
sudo sysctl -w vm.swappiness=1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now that you’ve configured your server, it’s recommended to download the block log, as replays can be faster than p2p download.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./run.sh dlblocks
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.privex.io/img/posts/hive-dlblocks.png&quot; alt=&quot;Screenshot of run.sh dlblocks command&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;almost-ready&quot;&gt;Almost ready!&lt;/h3&gt;

&lt;p&gt;Once this is done, you should be ready to start your server. The &lt;code class=&quot;highlighter-rouge&quot;&gt;replay&lt;/code&gt; command will start &lt;code class=&quot;highlighter-rouge&quot;&gt;steemd&lt;/code&gt; (the binary is still called &lt;code class=&quot;highlighter-rouge&quot;&gt;steemd&lt;/code&gt; for Hive) in docker, and begin replaying the blockchain which was downloaded to create a block index, and the shared_memory file.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./run.sh replay
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can check the status with the &lt;code class=&quot;highlighter-rouge&quot;&gt;logs&lt;/code&gt; command.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./run.sh logs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Assuming you did everything correctly, you should see something like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;------------------------------------------------------

            STARTING HIVE NETWORK

------------------------------------------------------
initminer public key: STM8GC13uCZbP44HzMLV6zPZGwVQ8Nt4Kji8PapsPiNq1BK153XTX
chain id: 0000000000000000000000000000000000000000000000000000000000000000
blockchain version: 0.23.0
------------------------------------------------------
2393837ms main.cpp:121                  main                 ] Backtrace on segfault is enabled.
2393837ms chain_plugin.cpp:405          plugin_startup       ] Starting chain with shared_file_size: 53687091200 bytes
2393837ms chain_plugin.cpp:483          plugin_startup       ] Replaying blockchain on user request.
2393837ms database.cpp:185              reindex              ] Reindexing Blockchain
2396435ms block_log.cpp:142             open                 ] Log is nonempty
2396435ms block_log.cpp:151             open                 ] Index is nonempty
2396435ms database.cpp:193              reindex              ] Replaying blocks...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Please be aware that this can take many hours depending on your disk speed and CPU. In some cases it can take up to 24 hours.&lt;/p&gt;

&lt;p&gt;You can press CTRL-C to exit the logs, or just leave it if you want to watch it replay.&lt;/p&gt;

&lt;h3 id=&quot;after-youve-replayed&quot;&gt;After you’ve replayed&lt;/h3&gt;

&lt;p&gt;Once you see something which looks like this, it means your server is now ready to go:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1299055ms th_a       application.cpp:507           handle_block         ] Got 14 transactions on block 12928269 by pharesim -- latency: 55 ms
1302427ms th_a       application.cpp:507           handle_block         ] Got 18 transactions on block 12928270 by xeldal -- latency: 426 ms
1305291ms th_a       application.cpp:507           handle_block         ] Got 26 transactions on block 12928271 by arhag -- latency: 291 ms
1308045ms th_a       application.cpp:507           handle_block         ] Got 20 transactions on block 12928272 by pfunk -- latency: 45 ms
1311092ms th_a       application.cpp:507           handle_block         ] Got 23 transactions on block 12928273 by bhuz -- latency: 92 ms
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Go to your profile:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://wallet.hive.blog/@yourusername/permissions&quot;&gt;https://wallet.hive.blog/@yourusername/permissions&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://peakd.com/@yourusername/permissions&quot;&gt;https://peakd.com/@yourusername/permissions&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;(for the links, you need to edit the @yourusername part)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Click Wallet, then Permissions. Next to “Active Key” you should see “Reveal”. Click that button and log in. Then press “Show private key”, to reveal it. Make sure it begins with a “5”.&lt;/p&gt;

&lt;p&gt;Copy the key.&lt;/p&gt;

&lt;p&gt;Now open the wallet with:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./run.sh wallet
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.privex.io/img/posts/hive-wallet-activekey.png&quot; alt=&quot;Screenshot of Hive Wallet active key page&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Set a password, unlock the wallet with the same password, then import your ACTIVE private key from wallet.hive.blog / Peakd (NOT the one in notepad):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;set_password &quot;hunter2&quot;
unlock &quot;hunter2&quot;
import_key 5somethingprivatekey
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally, we can update/create the witness on the network. Replace the STMxxxx key with the public key you saved earlier in notepad (or if you wrote it as a comment in your config file, you can open that and get it from there), and replace YOURNAME with your witness name on Hive.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;update_witness &quot;YOURNAME&quot; &quot;https://hive.blog/witness-category/@YOURNAME/my-witness-thread&quot; &quot;STMxxxxxxx&quot; {&quot;account_creation_fee&quot;:&quot;3.000 HIVE&quot;,&quot;maximum_block_size&quot;:65536,&quot;sbd_interest_rate&quot;:0} true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;congratulations-your-witness-should-now-be-working-and-you-can-begin-getting-votes-and-producing-blocks&quot;&gt;Congratulations, your witness should now be working, and you can begin getting votes and producing blocks&lt;/h1&gt;

&lt;h3 id=&quot;other-useful-information&quot;&gt;Other useful information&lt;/h3&gt;

&lt;p&gt;You may want to persist the /dev/shm size (shared memory) across reboots. To do this, you can edit &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/fstab&lt;/code&gt;, please be very careful, as any mistakes in this file will cause your system to become unbootable. (&lt;strong&gt;if you are not comfortable with linux, please don’t try this as you may break your server&lt;/strong&gt;).&lt;/p&gt;

&lt;p&gt;Simply add this to the bottom of the file on a new line. Be sure not to damage any other lines in the file. Adjust “64G” to whatever size you would like /dev/shm to be.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;tmpfs   /dev/shm         tmpfs   nodev,nosuid,size=64G          0  0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;See &lt;a href=&quot;https://github.com/someguy123/hive-docker&quot;&gt;the README&lt;/a&gt; for more advanced options.&lt;/p&gt;

&lt;h1 id=&quot;upgrading-steem-docker-to-hive-docker&quot;&gt;Upgrading steem-docker to hive-docker&lt;/h1&gt;

&lt;p&gt;If you have an existing &lt;code class=&quot;highlighter-rouge&quot;&gt;steem-docker&lt;/code&gt; installation, you can convert it into a &lt;code class=&quot;highlighter-rouge&quot;&gt;hive-docker&lt;/code&gt; installation by following the below steps.&lt;/p&gt;

&lt;h2 id=&quot;updating-your-git-repository&quot;&gt;Updating your Git repository&lt;/h2&gt;

&lt;p&gt;Use &lt;code class=&quot;highlighter-rouge&quot;&gt;git remote set-url&lt;/code&gt; to change your steem-docker installation to track my &lt;code class=&quot;highlighter-rouge&quot;&gt;hive-docker&lt;/code&gt; repository. Then &lt;code class=&quot;highlighter-rouge&quot;&gt;git fetch&lt;/code&gt; to download any updates, checkout master, and &lt;code class=&quot;highlighter-rouge&quot;&gt;git pull&lt;/code&gt; to update to &lt;code class=&quot;highlighter-rouge&quot;&gt;hive-docker&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
~/steem-docker $ git remote set-url origin 
&amp;lt;a href=&quot;https://github.com/Someguy123/hive-docker.git&quot;&amp;gt;https://github.com/Someguy123/hive-docker.git&amp;lt;/a&amp;gt;

~/steem-docker $ git fetch
~/steem-docker $ git checkout master
~/steem-docker $ git pull
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To ensure &lt;code class=&quot;highlighter-rouge&quot;&gt;hive-docker&lt;/code&gt; always uses the Hive network, add &lt;code class=&quot;highlighter-rouge&quot;&gt;NETWORK=hive&lt;/code&gt; to your &lt;code class=&quot;highlighter-rouge&quot;&gt;.env&lt;/code&gt; file&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;NETWORK=hive&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; .env

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Download the Hive HF23 docker image using this command.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./run.sh install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;if-you-were-previously-running-steem-youll-need-to-replace-your-blockchain-and-state-files&quot;&gt;If you were previously running Steem, you’ll need to replace your blockchain and state files&lt;/h2&gt;

&lt;p&gt;Delete your blockchain files and shared memory files using the &lt;code class=&quot;highlighter-rouge&quot;&gt;clean&lt;/code&gt; command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./run.sh clean
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.privex.io/img/posts/hive-clean.png&quot; alt=&quot;Screenshot of run.sh clean command&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Download a fresh block_log:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./run.sh dlblocks
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.privex.io/img/posts/hive-dlblocks.png&quot; alt=&quot;Screenshot of run.sh dlblocks command&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;now-for-the-slow-part---replaying&quot;&gt;Now for the slow part - replaying&lt;/h3&gt;

&lt;p&gt;When upgrading from Steem to Hive, you’ll need to replay.&lt;/p&gt;

&lt;p&gt;To replay your witness, do the following (this will shutdown and remove the Steem software, and start a Hive one in replay mode)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./run.sh stop
./run.sh replay
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can check the status of the replay with the logs command&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./run.sh logs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note: the command now automatically updates in realtime. to exit the logs press CTRL-C&lt;/p&gt;

&lt;p&gt;If all is well, you’ll see it replaying on v0.23.0 (or whatever version is out by the time you read this):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;------------------------------------------------------

            STARTING HIVE NETWORK

------------------------------------------------------
initminer public key: STM8GC13uCZbP44HzMLV6zPZGwVQ8Nt4Kji8PapsPiNq1BK153XTX
chain id: 0000000000000000000000000000000000000000000000000000000000000000
blockchain version: 0.23.0
------------------------------------------------------
2393837ms main.cpp:121                  main                 ] Backtrace on segfault is enabled.
2393837ms chain_plugin.cpp:405          plugin_startup       ] Starting chain with shared_file_size: 53687091200 bytes
2393837ms chain_plugin.cpp:483          plugin_startup       ] Replaying blockchain on user request.
2393837ms database.cpp:185              reindex              ] Reindexing Blockchain
2396435ms block_log.cpp:142             open                 ] Log is nonempty
2396435ms block_log.cpp:151             open                 ] Index is nonempty
2396435ms database.cpp:193              reindex              ] Replaying blocks...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once it’s replayed (may take 3 or more hours), you’ll see the standard “got x transactions on block y”.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1668107ms p2p_plugin.cpp:210            handle_block         ] Got 54 transactions on block 25299003 by cervantes -- latency: 107 ms
1671090ms p2p_plugin.cpp:210            handle_block         ] Got 36 transactions on block 25299004 by blocktrades -- latency: 90 ms
1674098ms p2p_plugin.cpp:210            handle_block         ] Got 28 transactions on block 25299005 by roelandp -- latency: 98 ms
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you see this, you can now re-enable this server :)&lt;/p&gt;

&lt;p&gt;You’re successfully upgraded to 0.23.0 (or higher).&lt;/p&gt;

&lt;p&gt;For future HF23 releases, it will now be as simple as &lt;code class=&quot;highlighter-rouge&quot;&gt;./run.sh install &amp;amp;&amp;amp; ./run.sh restart&lt;/code&gt;, but as always, be careful, always assume a replay may be needed. Test on your backup, or disable your witness before attempting to update.&lt;/p&gt;

&lt;p&gt;To see if I’ve released a new version of the docker image and haven’t made a post yet, just check my docker hub: 
&lt;a href=&quot;https://hub.docker.com/r/someguy123/hive/tags/&quot;&gt;https://hub.docker.com/r/someguy123/hive/tags/&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;div style=&quot;display: block; margin: 0 auto;&quot;&gt;

  &lt;p&gt;&lt;img src=&quot;https://i.giphy.com/media/l378lvuErndt84HII/giphy.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;GIF Avatar by @stellabelle&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;do-you-like-what-im-doing-for-hive&quot;&gt;Do you like what I’m doing for Hive?&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://wallet.hive.blog/~witnesses&quot;&gt;Vote for me to be a witness&lt;/a&gt; - every vote counts.&lt;/p&gt;

&lt;h3 id=&quot;dont-forget-to-follow-me-for-more-like-this&quot;&gt;Don’t forget to follow me for more like this.&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;Are you looking for a new server provider? My company @privex offers highly-reliable and affordable dedicated and virtual servers for HIVE, HBD, EOS, Monero, DOGE, LTC, and BTC!&lt;/p&gt;

&lt;p&gt;Check out our website at 
&lt;a href=&quot;https://www.privex.io&quot;&gt;https://www.privex.io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Join the Privex discord at: 
&lt;a href=&quot;https://invite.gg/privex&quot;&gt;https://invite.gg/privex&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;p&gt;
  See: &lt;a href=&quot;https://peakd.com/hive-139531/@someguy123/how-to-set-up-a-hive-witness-or-seed-node-non-mira-upgrade-from-steem-docker-to-hive-docker&quot;&gt;How to set up a Hive Witness or Seed node (non-MIRA) / Upgrade from Steem-Docker to Hive-Docker&lt;/a&gt;
  by
  &lt;a href=&quot;https://hive.blog/@someguy123&quot;&gt;@someguy123&lt;/a&gt;
&lt;/p&gt;</content><author><name>someguy123</name></author><summary type="html">Fresh install To become a witness without using MIRA, you’ll require a server with at LEAST 64GB of RAM, 500GB disk (preferably SSD / NVMe), and a fast, reliable network. If you do not have a server which meets these requirements, you can order one from Privex (you can even pay with HIVE/HBD!) I personally use @privex for my own witness as a Top 20. While I am the CEO of Privex, there are many other customers, including witnesses who use our servers for their witness nodes, seed nodes, RPC nodes and/or other projects. You’re free to use any other server provider. I don’t recommend trying to run a witness on your home internet, as it’s likely not reliable enough for a witness. Be aware that certain server providers have poor networks or hardware, which may cause missed blocks, so you may be hopping around a few until you can find one that’s suitable for a witness node. If you want to learn more about witnesses and what they do, check out my article: here Shared memory note Right now, the minimum RAM requirement for non-MIRA witnesses is 64GB due to shared memory. This is because Hive stores information in a file called “shared_memory.bin” which is used similar to RAM. This file is around 58GB on HF23, and will continue to grow overtime. As this file continues to grow, you will need to increase the amount of RAM in your server. So it is better to have some room. Install hive-docker and dependencies First, we install some basic dependencies (assuming you’re on Ubuntu/Debian). sudo apt update sudo apt install git curl wget Next, we install hive-docker (a line starting with a # is a comment, you don’t need to paste them) git clone &amp;lt;a href=&quot;https://github.com/someguy123/hive-docker.git&quot;&amp;gt;https://github.com/someguy123/hive-docker.git&amp;lt;/a&amp;gt; cd hive-docker # If you don't already have a docker installation, this will install it for you ./run.sh install_docker After the install_docker command has finished, it’s recommended to log out and back in again (e.g. close your SSH client and re-connect) to ensure that the shell correctly detects docker. Then, you can download and install the latest witness/seed docker image # This downloads/updates the low-memory docker image for Hive ./run.sh install If you are a witness, you need to adjust the configuration as needed e.g. witness name, private key, logging config, turn off p2p-endpoint etc. If you’re running a seed, then don’t worry about the config, it will just work and you can skip the signing key/config section Generating a signing key For witnesses, you’ll need to generate a signing key first. You can use the remote wallet for this. Open the wallet using a public server with the following command: ./run.sh remote_wallet Note: you may receive an error such as “timeout” or “invalid http status”. This is normal, it’s usually due to a server in the Privex load balancer having temporary problems. Just run the command again a few times until it connects (you’ll see new»&amp;gt; or locked»&amp;gt;) Create a key pair for your witness. suggest_brain_key You should get something similar to this: { &quot;brain_priv_key&quot;: &quot;GOCART VINCENT PHOTIC IRON OUTHIT UNGLOBE SICCA LOP TASKIT BOOSTER WINDED SPRY SACKBUT UNICE WELL RUBELLE&quot;, &quot;wif_priv_key&quot;: &quot;5J1Wn41BbSS4L83N9n7P5nmMSVg9uaWfVySnd363TvyhWPzU2e9&quot;, &quot;pub_key&quot;: &quot;STM7iCEkCR261F7CeBCsmpE1RcW8hnR5pZYKCFbuVqe5HSJ41YewE&quot; } Put the keys in Notepad or something similar for the moment so you don’t lose them. Press CTRL-D to exit the wallet. Setting up your config Now, to set your witness name and private key. You can use nano (a simple text editor on Linux) for this. nano data/witness_node_data_dir/config.ini If you are running a witness, you’ll want to change one of the first lines in the file to disable the seed. # Endpoint for P2P node to listen on p2p-endpoint = 0.0.0.0:2001 Simply place a # (hash sign) at the start of the p2p-endpoint line. This will disable the seed. Example: # Endpoint for P2P node to listen on #p2p-endpoint = 0.0.0.0:2001 Now to add your witness settings. Scroll down the file (use the up/down arrows, or page up/down) until you see something like this: # Percent of witnesses (0-99) that must be participating in order to produce blocks required-participation = 33 # name of witness controlled by this node (e.g. initwitness ) # witness = # name of miner and its private key (e.g. [&quot;account&quot;,&quot;WIF PRIVATE KEY&quot;] ) # miner = # Number of threads to use for proof of work mining # mining-threads = # WIF PRIVATE KEY to be used by one or more witnesses or miners # private-key = You’ll want to uncomment (remove the # from the start) the witness = line, and the private-key = line. Grab your public/private key that you saved earlier into notepad (or other similar app). Then, similar to below, add your witness’ name in quotes, e.g. “someguy123” in front of the witness =, and your private key (without quotes) in front of the private-key = line. To save you time in the future, it can be useful to place your public signing key in a comment above your private key (see example) Example: # name of witness controlled by this node (e.g. initwitness ) witness = &quot;someguy123&quot; # name of miner and its private key (e.g. [&quot;account&quot;,&quot;WIF PRIVATE KEY&quot;] ) # miner = # Number of threads to use for proof of work mining # mining-threads = # WIF PRIVATE KEY to be used by one or more witnesses or miners # public key: STM7iCEkCR261F7CeBCsmpE1RcW8hnR5pZYKCFbuVqe5HSJ41YewE private-key = 5J1Wn41BbSS4L83N9n7P5nmMSVg9uaWfVySnd363TvyhWPzU2e9 Now (assuming you’re using nano) press CTRL-X, and press the y key when it asks if you would like to save. Environment settings If you’re already comfortable with Linux, and want to play around with settings for hive-docker you may want to consider setting up a .env file, see the README for more information Otherwise, let’s continue. The defaults are generally fine for most people. Setting up shared memory, swap settings, and downloading the blockchain At this point you should have: installed hive-in-a-box installed docker (through the run.sh command) downloaded and installed the Hive docker container set up your witness configuration Your witness is almost ready. Just a few more small things. You’ll need to set the shared memory size (use sudo if not logged in as root). 64 gigabytes is recommended (64G). Please be aware that the shared memory size changes constantly. sudo ./run.sh shm_size 64G You’ll also want to adjust your “swappiness”. This is a setting which tells Linux how much it should use swap (virtual memory on your disk. very slow). You’ll want to set this to 1, which means “don’t use the swap unless it’s absolutely necessary”. This helps to prevent missed blocks due to excessive swapping despite plenty of free RAM. # To persist on reboot, place 'vm.swappiness=1' in /etc/sysctl.conf sudo sysctl -w vm.swappiness=1 Now that you’ve configured your server, it’s recommended to download the block log, as replays can be faster than p2p download. ./run.sh dlblocks Almost ready! Once this is done, you should be ready to start your server. The replay command will start steemd (the binary is still called steemd for Hive) in docker, and begin replaying the blockchain which was downloaded to create a block index, and the shared_memory file. ./run.sh replay You can check the status with the logs command. ./run.sh logs Assuming you did everything correctly, you should see something like this: ------------------------------------------------------ STARTING HIVE NETWORK ------------------------------------------------------ initminer public key: STM8GC13uCZbP44HzMLV6zPZGwVQ8Nt4Kji8PapsPiNq1BK153XTX chain id: 0000000000000000000000000000000000000000000000000000000000000000 blockchain version: 0.23.0 ------------------------------------------------------ 2393837ms main.cpp:121 main ] Backtrace on segfault is enabled. 2393837ms chain_plugin.cpp:405 plugin_startup ] Starting chain with shared_file_size: 53687091200 bytes 2393837ms chain_plugin.cpp:483 plugin_startup ] Replaying blockchain on user request. 2393837ms database.cpp:185 reindex ] Reindexing Blockchain 2396435ms block_log.cpp:142 open ] Log is nonempty 2396435ms block_log.cpp:151 open ] Index is nonempty 2396435ms database.cpp:193 reindex ] Replaying blocks... Please be aware that this can take many hours depending on your disk speed and CPU. In some cases it can take up to 24 hours. You can press CTRL-C to exit the logs, or just leave it if you want to watch it replay. After you’ve replayed Once you see something which looks like this, it means your server is now ready to go: 1299055ms th_a application.cpp:507 handle_block ] Got 14 transactions on block 12928269 by pharesim -- latency: 55 ms 1302427ms th_a application.cpp:507 handle_block ] Got 18 transactions on block 12928270 by xeldal -- latency: 426 ms 1305291ms th_a application.cpp:507 handle_block ] Got 26 transactions on block 12928271 by arhag -- latency: 291 ms 1308045ms th_a application.cpp:507 handle_block ] Got 20 transactions on block 12928272 by pfunk -- latency: 45 ms 1311092ms th_a application.cpp:507 handle_block ] Got 23 transactions on block 12928273 by bhuz -- latency: 92 ms Go to your profile: https://wallet.hive.blog/@yourusername/permissions https://peakd.com/@yourusername/permissions (for the links, you need to edit the @yourusername part) Click Wallet, then Permissions. Next to “Active Key” you should see “Reveal”. Click that button and log in. Then press “Show private key”, to reveal it. Make sure it begins with a “5”. Copy the key. Now open the wallet with: ./run.sh wallet Set a password, unlock the wallet with the same password, then import your ACTIVE private key from wallet.hive.blog / Peakd (NOT the one in notepad): set_password &quot;hunter2&quot; unlock &quot;hunter2&quot; import_key 5somethingprivatekey Finally, we can update/create the witness on the network. Replace the STMxxxx key with the public key you saved earlier in notepad (or if you wrote it as a comment in your config file, you can open that and get it from there), and replace YOURNAME with your witness name on Hive. update_witness &quot;YOURNAME&quot; &quot;https://hive.blog/witness-category/@YOURNAME/my-witness-thread&quot; &quot;STMxxxxxxx&quot; {&quot;account_creation_fee&quot;:&quot;3.000 HIVE&quot;,&quot;maximum_block_size&quot;:65536,&quot;sbd_interest_rate&quot;:0} true Congratulations, your witness should now be working, and you can begin getting votes and producing blocks Other useful information You may want to persist the /dev/shm size (shared memory) across reboots. To do this, you can edit /etc/fstab, please be very careful, as any mistakes in this file will cause your system to become unbootable. (if you are not comfortable with linux, please don’t try this as you may break your server). Simply add this to the bottom of the file on a new line. Be sure not to damage any other lines in the file. Adjust “64G” to whatever size you would like /dev/shm to be. tmpfs /dev/shm tmpfs nodev,nosuid,size=64G 0 0 See the README for more advanced options. Upgrading steem-docker to hive-docker If you have an existing steem-docker installation, you can convert it into a hive-docker installation by following the below steps. Updating your Git repository Use git remote set-url to change your steem-docker installation to track my hive-docker repository. Then git fetch to download any updates, checkout master, and git pull to update to hive-docker. ~/steem-docker $ git remote set-url origin &amp;lt;a href=&quot;https://github.com/Someguy123/hive-docker.git&quot;&amp;gt;https://github.com/Someguy123/hive-docker.git&amp;lt;/a&amp;gt; ~/steem-docker $ git fetch ~/steem-docker $ git checkout master ~/steem-docker $ git pull To ensure hive-docker always uses the Hive network, add NETWORK=hive to your .env file echo &quot;NETWORK=hive&quot; &amp;gt;&amp;gt; .env Download the Hive HF23 docker image using this command. ./run.sh install If you were previously running Steem, you’ll need to replace your blockchain and state files Delete your blockchain files and shared memory files using the clean command: ./run.sh clean Download a fresh block_log: ./run.sh dlblocks Now for the slow part - replaying When upgrading from Steem to Hive, you’ll need to replay. To replay your witness, do the following (this will shutdown and remove the Steem software, and start a Hive one in replay mode) ./run.sh stop ./run.sh replay You can check the status of the replay with the logs command ./run.sh logs Note: the command now automatically updates in realtime. to exit the logs press CTRL-C If all is well, you’ll see it replaying on v0.23.0 (or whatever version is out by the time you read this): ------------------------------------------------------ STARTING HIVE NETWORK ------------------------------------------------------ initminer public key: STM8GC13uCZbP44HzMLV6zPZGwVQ8Nt4Kji8PapsPiNq1BK153XTX chain id: 0000000000000000000000000000000000000000000000000000000000000000 blockchain version: 0.23.0 ------------------------------------------------------ 2393837ms main.cpp:121 main ] Backtrace on segfault is enabled. 2393837ms chain_plugin.cpp:405 plugin_startup ] Starting chain with shared_file_size: 53687091200 bytes 2393837ms chain_plugin.cpp:483 plugin_startup ] Replaying blockchain on user request. 2393837ms database.cpp:185 reindex ] Reindexing Blockchain 2396435ms block_log.cpp:142 open ] Log is nonempty 2396435ms block_log.cpp:151 open ] Index is nonempty 2396435ms database.cpp:193 reindex ] Replaying blocks... Once it’s replayed (may take 3 or more hours), you’ll see the standard “got x transactions on block y”. 1668107ms p2p_plugin.cpp:210 handle_block ] Got 54 transactions on block 25299003 by cervantes -- latency: 107 ms 1671090ms p2p_plugin.cpp:210 handle_block ] Got 36 transactions on block 25299004 by blocktrades -- latency: 90 ms 1674098ms p2p_plugin.cpp:210 handle_block ] Got 28 transactions on block 25299005 by roelandp -- latency: 98 ms If you see this, you can now re-enable this server :) You’re successfully upgraded to 0.23.0 (or higher). For future HF23 releases, it will now be as simple as ./run.sh install &amp;amp;&amp;amp; ./run.sh restart, but as always, be careful, always assume a replay may be needed. Test on your backup, or disable your witness before attempting to update. To see if I’ve released a new version of the docker image and haven’t made a post yet, just check my docker hub: https://hub.docker.com/r/someguy123/hive/tags/ GIF Avatar by @stellabelle Do you like what I’m doing for Hive? Vote for me to be a witness - every vote counts. Don’t forget to follow me for more like this. Are you looking for a new server provider? My company @privex offers highly-reliable and affordable dedicated and virtual servers for HIVE, HBD, EOS, Monero, DOGE, LTC, and BTC! Check out our website at https://www.privex.io Join the Privex discord at: https://invite.gg/privex See: How to set up a Hive Witness or Seed node (non-MIRA) / Upgrade from Steem-Docker to Hive-Docker by @someguy123</summary></entry><entry><title type="html">Improvements for Condenser repository, Continuous Integration and Deployments</title><link href="https://hivedocs.info/howto/devops/docker/2020/04/19/improvements-for-condenser-repository-continuous-integration-and-deployments.html" rel="alternate" type="text/html" title="Improvements for Condenser repository, Continuous Integration and Deployments" /><published>2020-04-19T13:38:27-07:00</published><updated>2020-04-19T13:38:27-07:00</updated><id>https://hivedocs.info/howto/devops/docker/2020/04/19/improvements-for-condenser-repository-continuous-integration-and-deployments</id><content type="html" xml:base="https://hivedocs.info/howto/devops/docker/2020/04/19/improvements-for-condenser-repository-continuous-integration-and-deployments.html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/yCIuIaF.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I want to elaborate not only on introduced features but also on my thought and reasoning so everyone can benefit and introduce changes in their projects. This post will be long but I believe it might be useful for the entire HiveDevs community.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The workflow is built on top of Gitlab CI/CD but can be easily modified for any other CI/CD tool (i.e. CircleCI or Jenkins).&lt;/p&gt;

&lt;h1 id=&quot;docker&quot;&gt;Docker&lt;/h1&gt;

&lt;p&gt;I’ve started my work by reviewing &lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt;. I’ve built the &lt;code class=&quot;highlighter-rouge&quot;&gt;condenser&lt;/code&gt; image and was a bit shocked:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker image ls
condenser   latest   6d57c0c8a904   19 seconds ago   1.54GB
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;1.54 GB for a simple frontend application? Boy, it’s just too much. Let’s do something with it.&lt;/p&gt;

&lt;h2 id=&quot;leaner-docker-image&quot;&gt;Leaner docker image&lt;/h2&gt;

&lt;p&gt;Let’s start by recognizing the reason why is this so big. You can also look into your &lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; and search for some common mistakes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;using full-sized images rather than &lt;code class=&quot;highlighter-rouge&quot;&gt;alpine&lt;/code&gt; versions&lt;/li&gt;
  &lt;li&gt;installing dev dependencies for production images&lt;/li&gt;
  &lt;li&gt;putting dev dependencies into production dependencies list&lt;/li&gt;
  &lt;li&gt;copying useless files into the final image&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Yep, you can check every point here. Let’s make some work on a new Dockerfile:&lt;/p&gt;

&lt;div class=&quot;language-dockerfile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; node:12.16.2 as development&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;WORKDIR&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; /var/app&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; package.json yarn.lock ./&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;yarn &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--non-interactive&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--frozen-lockfile&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--ignore-optional&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; . .&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;tmp &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; yarn build

&lt;span class=&quot;k&quot;&gt;CMD&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; [ &quot;yarn&quot;, &quot;run&quot;, &quot;start&quot; ]&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;### REMOVE DEV DEPENDENCIES ##&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; development as dependencies&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;yarn &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--non-interactive&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--frozen-lockfile&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--ignore-optional&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--production&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;### BUILD MINIFIED PRODUCTION ##&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; node:12.16.2-alpine as production&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;WORKDIR&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; /var/app&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;ARG&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; SOURCE_COMMIT&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; SOURCE_COMMIT ${SOURCE_COMMIT}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ARG&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; DOCKER_TAG&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; DOCKER_TAG ${DOCKER_TAG}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; --from=dependencies /var/app/package.json /var/app/package.json&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; --from=dependencies /var/app/config /var/app/config&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; --from=dependencies /var/app/dist /var/app/dist&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; --from=dependencies /var/app/lib /var/app/lib&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; --from=dependencies /var/app/src /var/app/src&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; --from=dependencies /var/app/tmp /var/app/tmp&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; --from=dependencies /var/app/webpack /var/app/webpack&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; --from=dependencies /var/app/node_modules /var/app/node_modules&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; --from=dependencies /var/app/healthcheck.js /var/app/healthcheck.js&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;HEALTHCHECK&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; --interval=30s --timeout=5s --start-period=30s --retries=5 CMD node /var/app/healthcheck.js&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;CMD&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; [ &quot;yarn&quot;, &quot;run&quot;, &quot;production&quot; ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What has been improved:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Node.js version was upgraded from &lt;code class=&quot;highlighter-rouge&quot;&gt;8.7&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;12.16.2&lt;/code&gt; which is the latest LTS at the moment. Always try using the latest framework versions, which may include security fixes and performance upgrades. It’s also a good habit to use a specific version up to the &lt;code class=&quot;highlighter-rouge&quot;&gt;patch&lt;/code&gt; number.&lt;/li&gt;
  &lt;li&gt;Multistage build was used to build an optimal image for production deployment. First, we build a &lt;code class=&quot;highlighter-rouge&quot;&gt;development&lt;/code&gt; stage with every dependency to be able to compile React application. Next, we’re removing development dependencies with &lt;code class=&quot;highlighter-rouge&quot;&gt;--production&lt;/code&gt; switch during the &lt;code class=&quot;highlighter-rouge&quot;&gt;dependencies&lt;/code&gt; stage. After all, we’re creating a minimal image from the &lt;code class=&quot;highlighter-rouge&quot;&gt;alpine&lt;/code&gt; node version which is the smallest base available, by copying only necessary files and directories.&lt;/li&gt;
  &lt;li&gt;Healthcheck has been introduced, so the docker daemon can easily manage containers with automatic restarts if necessary and zero-downtime deployments which will be explained later in this post. It will be also useful for dynamic scaling capabilities with &lt;code class=&quot;highlighter-rouge&quot;&gt;docker swarm&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also, &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; file was modified, but it’s not worth to post its content here:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Dev dependencies like &lt;code class=&quot;highlighter-rouge&quot;&gt;webpack&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;babel&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;eslint&lt;/code&gt; was moved into a proper list called &lt;code class=&quot;highlighter-rouge&quot;&gt;devDependencies&lt;/code&gt; so &lt;code class=&quot;highlighter-rouge&quot;&gt;yarn&lt;/code&gt; could install only production deps for the final image.&lt;/li&gt;
  &lt;li&gt;Strict versions were introduced for every dependency to make sure every build produces exactly the same image. Semantic versioning is popular, but there is no way to check if the package author does not introduce breaking changes with only &lt;code class=&quot;highlighter-rouge&quot;&gt;patch&lt;/code&gt; version increased. If you need to update a package, do it manually. If you have enough test coverage, you can update the package and run CI/CD to check if everything works fine.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After all that work done, the condenser image size was massively reduced:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker image ls
condenser   latest   58406d338e67   8 seconds ago   226MB
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/xGtpXCQ.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/aCCoCud.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The compressed image in the docker registry is even smaller. Much better, right? Shame on you, Steemit!&lt;/p&gt;

&lt;h2 id=&quot;healthcheck&quot;&gt;Healthcheck&lt;/h2&gt;

&lt;p&gt;Simply speaking, docker is running containers and trying to keep it alive as long as possible. But the system needs to have a tool to determine if the container is &lt;code class=&quot;highlighter-rouge&quot;&gt;actually alive&lt;/code&gt;. It may seem alive, but is your app responding to requests for example? Fortunately, docker has also integrated health check mechanism which can be integrated into &lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose.yml&lt;/code&gt;. Usually, you need to create an endpoint for liveness checks. Fortunately, condenser already has one so we can utilize it easily.&lt;/p&gt;

&lt;p&gt;There is a lot of examples with &lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt; used as a docker health check, but it’s not a good way to go. Healthcheck should work cross-platform and &lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt; implementation differs on Windows and Unix. You should write health check in the same technology or framework as your projects are written, for condenser it’s Node.js.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;http&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;localhost&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;8080&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;/.well-known/healthcheck.json&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5000&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`STATUS: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;statusCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;statusCode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`ERROR: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;statusCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;ERROR&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When ready, instruct Docker to use your health check mechanism. Add following line into your &lt;code class=&quot;highlighter-rouge&quot;&gt;Dockefile&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;HEALTHCHECK --interval=30s --timeout=5s --start-period=30s --retries=5 CMD node /var/app/healthcheck.js&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Make sure this file &lt;code class=&quot;highlighter-rouge&quot;&gt;/var/app/healthcheck.js&lt;/code&gt; exists inside your image. If you want to be sure your health check is working, inspect your container after running it:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker container ls
CONTAINER ID        IMAGE                          COMMAND                  CREATED             STATUS                   PORTS                    NAMES
060166cf52ee        hiveio/condenser:development   &quot;docker-entrypoint.s…&quot;   5 minutes ago       Up 5 minutes (healthy)   0.0.0.0:8080-&amp;gt;8080/tcp   mystifying_dhawan
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There should be a &lt;code class=&quot;highlighter-rouge&quot;&gt;(healthy)&lt;/code&gt; indicator in &lt;code class=&quot;highlighter-rouge&quot;&gt;STATUS&lt;/code&gt; column. And there is. Please also note that during the container startup process, it will indicate slightly different status (&lt;code class=&quot;highlighter-rouge&quot;&gt;starting&lt;/code&gt;), as the docker daemon will wait before making the first check. It’s because we’re giving some time for our app to startup. It’s the &lt;code class=&quot;highlighter-rouge&quot;&gt;start-period&lt;/code&gt; parameter.&lt;/p&gt;

&lt;p&gt;Depending on your app and traffic/load, those parameters should vary.&lt;/p&gt;

&lt;h2 id=&quot;pushing-images-to-docker-hub&quot;&gt;Pushing images to Docker Hub&lt;/h2&gt;

&lt;p&gt;We already have an improved (smaller) docker image, so it’s time to push it to the repository. Doing it manually is a waste of time and may cause human mistakes. The best way is to utilize Gitlab Runner to do it for us in an automatic and bullet-proof manner.&lt;/p&gt;

&lt;p&gt;Here is a &lt;code class=&quot;highlighter-rouge&quot;&gt;job&lt;/code&gt; definition from &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitlab-ci.yml&lt;/code&gt; file with some additional code which we will breakdown:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;variables&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;DOCKER_IMAGE&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;hiveio/condenser&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;.docker-job&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;&amp;amp;docker-job&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;docker:stable&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;docker:dind&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;before_script&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;echo $HUB_TOKEN | docker login -u $HUB_USERNAME --password-stdin&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;build-development&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;*docker-job&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;stage&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;build&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;variables&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;DOCKER_TAG&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;$DOCKER_IMAGE:$CI_COMMIT_SHORT_SHA&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;DOCKER_TAG_MAIN&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;$DOCKER_IMAGE:development&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;SOURCE_COMMIT&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;$CI_COMMIT_SHA&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;only&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;develop&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;docker build -t $DOCKER_TAG -t $DOCKER_TAG_MAIN --build-arg SOURCE_COMMIT --build-arg DOCKER_TAG .&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;docker push $DOCKER_TAG&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;docker push $DOCKER_TAG_MAIN&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;First, we’re creating global variable &lt;code class=&quot;highlighter-rouge&quot;&gt;DOCKER_IMAGE&lt;/code&gt; so we can reuse it later in many places. And in case we would like to change the image name, we do it only in a single place.&lt;/p&gt;

&lt;p&gt;Hence we have multiple &lt;code class=&quot;highlighter-rouge&quot;&gt;jobs&lt;/code&gt; defined in &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitlab-ci.yml&lt;/code&gt; file, it’s good to utilize advanced YAML syntax, which includes &lt;strong&gt;hidden keys&lt;/strong&gt; and &lt;strong&gt;anchors&lt;/strong&gt;. It will decrease the duplicated code and make the file easier to read and maintain. Every job name starting with the dot will be considered as a hidden key and &lt;strong&gt;won’t be directly executed&lt;/strong&gt;. Btw, this is a quick way to temporarily disable any job in your GitLab CI/CD without commenting or removing it.&lt;/p&gt;

&lt;p&gt;By using &lt;code class=&quot;highlighter-rouge&quot;&gt;.docker-job: &amp;amp;docker-job&lt;/code&gt; we created an anchor which can be later used to extend any job. If you add &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;&amp;lt;: *docker-job&lt;/code&gt;, it will populate &lt;code class=&quot;highlighter-rouge&quot;&gt;image&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;services&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;before_script&lt;/code&gt; properties automatically. It’s a good move if you have multiple jobs that do similar things.&lt;/p&gt;

&lt;p&gt;Later on, we’re creating some additional local (job scoped) variables:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DOCKER_TAG_MAIN&lt;/code&gt;  which will be evaluated to &lt;code class=&quot;highlighter-rouge&quot;&gt;hiveio/condenser:development&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DOCKER_TAG&lt;/code&gt; which will be evaluated to &lt;code class=&quot;highlighter-rouge&quot;&gt;hiveio/condenser:344e55ef&lt;/code&gt; or similar&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SOURCE_COMMIT&lt;/code&gt; which will be evaluated to &lt;code class=&quot;highlighter-rouge&quot;&gt;344e55efefd56e00b15eea6ccf8560a1107b9ff6&lt;/code&gt; (or similar commit SHA)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It’s a good idea to double tag an image. &lt;code class=&quot;highlighter-rouge&quot;&gt;Latest&lt;/code&gt; tag is useless if you want to track your development process. Later on, I will describe the way how we’re using this specific, &lt;code class=&quot;highlighter-rouge&quot;&gt;sha&lt;/code&gt;-tagged image to track deployments and rollback them anytime with a single click.&lt;/p&gt;

&lt;p&gt;Finally, we’re building an image with additional build arguments by using &lt;code class=&quot;highlighter-rouge&quot;&gt;--build-arg&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker build -t $DOCKER_TAG -t $DOCKER_TAG_MAIN --build-arg SOURCE_COMMIT --build-arg DOCKER_TAG .&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If you scroll up to the Dockerfile section, you will notice &lt;code class=&quot;highlighter-rouge&quot;&gt;ARG SOURCE_COMMIT&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ENV SOURCE_COMMIT ${SOURCE_COMMIT}&lt;/code&gt; which means these build arguments will be injected as an environment variables into your containers. It’s a quick and easy way to pass additional, build-level variables into your images. Those specific variables are later returned by the condenser health endpoint. It may be useful to check a specific instance source.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl 
&amp;lt;a &lt;span class=&quot;nv&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://staging.condenser.engrave.dev/.well-known/healthcheck.json&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;https://staging.condenser.engrave.dev/.well-known/healthcheck.json&amp;lt;/a&amp;gt;

&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;status&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;ok&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;docker_tag&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;hiveio/condenser:344e55ef&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;source_commit&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;344e55efefd56e00b15eea6ccf8560a1107b9ff6&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;An important thing to mention is that &lt;code class=&quot;highlighter-rouge&quot;&gt;HUB_TOKEN&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;HUB_USERNAME&lt;/code&gt; are environment variables injected into the GitLab runner job and configured in Projects Settings. To prevent unauthorized users from pushing malicious images into the official registry, those variables are configured as &lt;code class=&quot;highlighter-rouge&quot;&gt;protected&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;masked&lt;/code&gt;, which means they can be only used on specific branches and are moderated from job logs, so there is no way it can leak without internal bad actor with elevated permissions.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/o3FAaQb.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;merge-requests&quot;&gt;Merge requests&lt;/h1&gt;

&lt;p&gt;To improve the process of adding new features and fixes to the codebase, Merge Requests have got a brand new CI/CD workflow which includes the following jobs:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/3kV2zPi.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The entire pipeline is fired on every Merge Request and it’s required to pass before changes could be merged. If the pipeline fails for some reason (i.e. failing unit tests), there is no way to merge changes into the main branch. This will enforce code quality and prevent regression.&lt;/p&gt;

&lt;h2 id=&quot;eslint&quot;&gt;Eslint&lt;/h2&gt;

&lt;p&gt;Code quality and standardization are important, especially if it’s an open-source project that could be maintained by totally different developers from all around the world. &lt;code class=&quot;highlighter-rouge&quot;&gt;Eslint&lt;/code&gt; is a tool that statically analyzes the code to quickly find potential problems and keep code organized with specified rules. Code analysis is especially useful when developing Javascript applications. It’s really easy to make some stupid mistakes.&lt;/p&gt;

&lt;p&gt;Eslint job will be fired on every Merge Request and on every branch pushed to the repository:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;run-eslint&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;stage&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;node:12.16.2&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;only&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;branches&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;merge_requests&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;before_script&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;yarn install --frozen-lockfile --ignore-optional&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;yarn ci:eslint&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;allow_failure&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# will be changed to false when all linter errors removed&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Because the codebase is a bit neglected, &lt;code class=&quot;highlighter-rouge&quot;&gt;run-eslint&lt;/code&gt; job is allowed to fail for the moment (&lt;code class=&quot;highlighter-rouge&quot;&gt;allow_failure: true&lt;/code&gt;), which is indicated by an orange exclamation mark on a MR view or pipelines list. There are “some” errors and warnings right now but it should be cleaned up soon, so we can require eslint job to pass before merging proposed changes:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; ✖ 1208 problems (1187 errors, 21 warnings)
   831 errors and 0 warnings potentially fixable with the `--fix` option.
 error Command failed with exit code 1.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;unit-tests&quot;&gt;Unit tests&lt;/h2&gt;

&lt;p&gt;Extensive testing is the only way to produce bullet-proof code and stable applications. Similar to &lt;code class=&quot;highlighter-rouge&quot;&gt;run-eslint&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;run-unit-tests&lt;/code&gt; job is fired on every branch and every merge request.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;run-unit-tests&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;stage&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;node:12.16.2&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;only&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;branches&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;merge_requests&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;before_script&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;yarn install --frozen-lockfile --ignore-optional&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;yarn run ci:test&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;coverage&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/All files[^|]*\|[^|]*\s+([\d\.]+)/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Testing suit (&lt;code class=&quot;highlighter-rouge&quot;&gt;jest&lt;/code&gt;) was configured to produce coverage report:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/43JrdbE.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This report is later parsed by a Gitlab, using &lt;code class=&quot;highlighter-rouge&quot;&gt;coverage: /All files[^|]*\|[^|]*\s+([\d\.]+)/&lt;/code&gt; configuration. It will display coverage status and percentage change on the Merge Request view, allowing reviewers to quickly inspect if the code quality is increasing or not.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/Yn6lbe8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I would advise declining merging new features not covered with tests. This may be omitted for important fixes, but we all should try to make the code better, not worse.&lt;/p&gt;

&lt;p&gt;Also, repository settings were changed and &lt;code class=&quot;highlighter-rouge&quot;&gt;Pipelines must succeed&lt;/code&gt; setting is checked by default. It means no more broken code on develop/production branches.&lt;/p&gt;

&lt;h2 id=&quot;review-apps&quot;&gt;Review apps&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Review Apps&lt;/code&gt; are a huge and very important feature. From now on, every feature can be inspected visually by the reviewer with a single click. Gitlab Runner will create a special instance built from proposed code and expose it for the reviewers:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/FOEhZ6d.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Review app requires three jobs to run on a merge request:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;build-review-app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;*docker-job&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;stage&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;build&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;variables&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;DOCKER_TAG&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;SOURCE_COMMIT&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;$CI_COMMIT_SHA&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;only&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;merge_requests&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;before_script&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;echo $CI_JOB_TOKEN | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;docker build -t $DOCKER_TAG --build-arg SOURCE_COMMIT --build-arg DOCKER_TAG .&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;docker push $DOCKER_TAG&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;deploy-review-app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;*docker-job&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;*docker-remote-host-review&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;stage&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;deploy&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;variables&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;DOCKER_TAG&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;SERVICE_NAME&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;review_$CI_ENVIRONMENT_SLUG&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;only&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;merge_requests&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;DOCKER_CERT_PATH=$CERTS docker -H $REVIEW_HOST --tlsverify pull $DOCKER_TAG&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;DOCKER_CERT_PATH=$CERTS docker -H $REVIEW_HOST --tlsverify service rm $SERVICE_NAME || &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# try to remove previous service but do not fail if it not exist&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;DOCKER_CERT_PATH=$CERTS docker -H $REVIEW_HOST --tlsverify service create --with-registry-auth --network infrastructure --name $SERVICE_NAME $DOCKER_TAG&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;echo &quot;Review app deployed&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;review/$CI_COMMIT_REF_NAME&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; 
&lt;span class=&quot;s&quot;&gt;&amp;lt;a href=&quot;https://&quot;&amp;gt;https://&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;$CI_ENVIRONMENT_SLUG$APP_REVIEW_SUBDOMAIN&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;on_stop&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;stop-review-app&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;auto_stop_in&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;1 week&lt;/span&gt;
        
&lt;span class=&quot;na&quot;&gt;stop-review-app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;*docker-job&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;*docker-remote-host-review&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;stage&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;deploy&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;variables&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;SERVICE_NAME&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;review_$CI_ENVIRONMENT_SLUG&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;only&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;merge_requests&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;manual&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;DOCKER_CERT_PATH=$CERTS docker -H $REVIEW_HOST --tlsverify service rm $SERVICE_NAME || &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# try to remove previous service but do not fail if it not exist&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;echo &quot;Review app stopped&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;review/$CI_COMMIT_REF_NAME&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;stop&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The first job should look familiar if you read previous parts of the post. The only difference is that we’re overwriting &lt;code class=&quot;highlighter-rouge&quot;&gt;before_script&lt;/code&gt;. Note that if you’re using &lt;strong&gt;anchors&lt;/strong&gt;, you can always overwrite the template freely which is what we did here.&lt;/p&gt;

&lt;p&gt;Because merge requests could be opened by developers which may not be well known in the community (vel. bad actors), it could be a security issue if the CI/CD on Merge Requests could push images to the official repository. To prevent this, we’re using an internal registry provided by the Gitlab itself. It’s private, will work well for Review Apps but won’t be accessible by anyone else.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;echo $CI_JOB_TOKEN | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We are using &lt;code class=&quot;highlighter-rouge&quot;&gt;CI_JOB_TOKEN&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;CI_REGISTRY_USER&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;CI_REGISTRY&lt;/code&gt; which are &lt;a href=&quot;https://docs.gitlab.com/ee/ci/variables/predefined_variables.html&quot;&gt;environment variables injected automatically by Gitlab&lt;/a&gt;, no need to configure them. Also, please note using &lt;code class=&quot;highlighter-rouge&quot;&gt;--password-stdin&lt;/code&gt; which is a more secure way to log in as it will prevent the password from being exposed in job logs.&lt;/p&gt;

&lt;p&gt;By default, docker will connect to the local daemon on unsecured, but not exposed port. It is yet possible to configure Docker daemon to validate TLS certificates so it could be exposed to the external world in a secure way, which is how we deploy services from our runners to our machine. You need to pass additional parameters:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-H&lt;/code&gt; which is remote docker address&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--tlsverify&lt;/code&gt; makes sure your daemon is trying to identify itself with certificates&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--with-registry-auth&lt;/code&gt; will send registry authentication to swarm agents&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--network&lt;/code&gt; will connect service to the specified network so the reverse proxy could expose the instance&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DOCKER_CERT_PATH&lt;/code&gt; will instruct demon where to search for TLS certificates&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DOCKER_CERT_PATH=$CERTS docker -H $REVIEW_HOST --tlsverify service create --with-registry-auth --network infrastructure --name $SERVICE_NAME $DOCKER_TAG&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This will create a new &lt;code class=&quot;highlighter-rouge&quot;&gt;docker service&lt;/code&gt; and expose it automatically under the URL created with &lt;code class=&quot;highlighter-rouge&quot;&gt;CI_ENVIRONMENT_SLUG&lt;/code&gt;, which is a variable provided by Gitlab. It’s guaranteed to be a valid URL or docker/kubernetes service name.&lt;/p&gt;

&lt;p&gt;Review App instances are automatically removed when MR is closed or 1 week after it’s opened. This is achieved by running &lt;code class=&quot;highlighter-rouge&quot;&gt;stop-review-app&lt;/code&gt; job which is configured to be manually triggered (&lt;code class=&quot;highlighter-rouge&quot;&gt;when: manual&lt;/code&gt;).&lt;/p&gt;

&lt;h1 id=&quot;tracking-environment-deployments&quot;&gt;Tracking environment deployments&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/8ncGrE9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;By using &lt;code class=&quot;highlighter-rouge&quot;&gt;sha&lt;/code&gt;-tagged images, it’s possible to quickly redeploy the environment at any moment, with a single click. In case of emergency, project maintainers can rollback the environment to the specified point in time (docker image to be specific)&lt;/p&gt;

&lt;h1 id=&quot;staging&quot;&gt;Staging&lt;/h1&gt;

&lt;p&gt;Deploying a staging environment is quite similar to deploying a Review App. It also uses remote docker daemon but the service is not created on-demand, it’s updated with a new image.&lt;/p&gt;

&lt;p&gt;With &lt;code class=&quot;highlighter-rouge&quot;&gt;docker swarm&lt;/code&gt; mode, you can ensure your application to be highly available. The swarm agent will take care of your containers. It will restart them or spin a new one if necessary (this is why health check is so important). It is a built-in, native docker mode everyone should start using.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;na&quot;&gt;deploy-staging&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;*docker-job&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;*docker-remote-host-staging&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;stage&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;deploy&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;variables&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;DOCKER_TAG&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;$DOCKER_IMAGE:$CI_COMMIT_SHORT_SHA&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;SERVICE_NAME&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;staging_condenser&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;only&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;develop&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;DOCKER_CERT_PATH=$CERTS docker -H $STAGING_HOST --tlsverify pull $DOCKER_TAG&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;DOCKER_CERT_PATH=$CERTS docker -H $STAGING_HOST --tlsverify service update --image $DOCKER_TAG --update-failure-action rollback --update-order start-first $SERVICE_NAME&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;staging&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; 
&lt;span class=&quot;s&quot;&gt;&amp;lt;a href=&quot;https://&quot;&amp;gt;https://&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;$STAGING_DOMAIN&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Job uses protected variables to prevent  “bad” developers from pushing/deploying malicious code. It is only possible to push staging from the protected &lt;code class=&quot;highlighter-rouge&quot;&gt;develop&lt;/code&gt; branch. Pushing directly to &lt;code class=&quot;highlighter-rouge&quot;&gt;develop&lt;/code&gt; is disabled.&lt;/p&gt;

&lt;h2 id=&quot;zero-downtime-deployments&quot;&gt;Zero downtime deployments&lt;/h2&gt;

&lt;p&gt;Updating single service is easy with &lt;code class=&quot;highlighter-rouge&quot;&gt;docker swarm&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DOCKER_CERT_PATH=$CERTS docker -H $STAGING_HOST --tlsverify service update --image $DOCKER_TAG --update-failure-action rollback --update-order start-first $SERVICE_NAME&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;There are additional but important parameters provided:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--image $DOCKER_TAG&lt;/code&gt; - update existing service by running new containers with the specified image. For this case, it’s sha-tagged image build from develop branch&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--update-failure-action rollback&lt;/code&gt; - by default, docker daemon will try to update the service and do nothing if it fails. By passing this parameter, we’re instructing docker to roll back the service to a previous state, which means containers using the previous image.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--update-order start-first&lt;/code&gt; - by default, docker will kill current containers and spin new ones after it. It may cause some downtime which we don’t want. By setting &lt;code class=&quot;highlighter-rouge&quot;&gt;start-first&lt;/code&gt;, we instruct docker to spin new containers first. Swarm agent will switch containers without downtime if the healtcheck result becomes positive. And in case something gone wrong (healtcheck failed for any reason), we end up with a working staging environment because old containers are not touched at all.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;resources-under-control&quot;&gt;Resources under control&lt;/h2&gt;

&lt;p&gt;With &lt;code class=&quot;highlighter-rouge&quot;&gt;docker swarm&lt;/code&gt; you have full control over your services and containers. This is an example configuration which is used for staging environment. With some tweaks, it could be used for production also:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;3.7&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;condenser&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;hiveio/condenser:latest&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;deploy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;replicated&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;replicas&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;resources&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;limits&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;na&quot;&gt;cpus&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0.85&quot;&lt;/span&gt;
                    &lt;span class=&quot;na&quot;&gt;memory&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;2024M&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;restart_policy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;condition&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;any&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;5s&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;update_config&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;parallelism&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;10s&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;failure_action&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;rollback&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;start-first&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;rollback_config&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;parallelism&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;5s&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;networks&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;reverse-proxy&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;networks&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;reverse-proxy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;external&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;reverse-proxy&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;production&quot;&gt;Production&lt;/h1&gt;

&lt;p&gt;It is not finished yet, but my advice is to start using &lt;code class=&quot;highlighter-rouge&quot;&gt;docker swarm&lt;/code&gt; mode for production deployments (CI/CD is ready). It’s designed to serve services like a condenser.&lt;/p&gt;

&lt;p&gt;Some key features of Docker Swarm (based on official documentation):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Cluster management integrated with Docker Engine&lt;/strong&gt;: if you know how to build the docker image, start a container, read some logs, you’re ready to use Docker Swarm. You don’t need to install additional software as it is a native Docker feature.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Decentralized design&lt;/strong&gt;: adding a worker or a manager to your swarm is as easy as running a single command. Those could be machines from all around the world.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Scaling&lt;/strong&gt;: For each service, you can declare the number of tasks you want to run. When you scale up or down, the swarm manager automatically adapts by adding or removing tasks to maintain the desired state.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Multi-host networking&lt;/strong&gt;: You can specify an overlay network for your services. The swarm manager automatically assigns addresses to the containers on the overlay network when it initializes or updates the application.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Load balancing&lt;/strong&gt;: You can expose the ports for services to an external load balancer. Internally, the swarm lets you specify how to distribute service containers between nodes.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Secure by default&lt;/strong&gt;: Each node in the swarm enforces TLS mutual authentication and encryption to secure communications between itself and all other nodes. You have the option to use self-signed root certificates or certificates from a custom root CA.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Rolling updates&lt;/strong&gt;: At rollout time you can apply service updates to nodes incrementally. The swarm manager lets you control the delay between service deployment to different sets of nodes. If anything goes wrong, you can roll back to a previous version of the service.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And after all, it is called &lt;code class=&quot;highlighter-rouge&quot;&gt;Swarm&lt;/code&gt;, can’t be a coincidence! ;)&lt;/p&gt;

&lt;p&gt;I’m using Swarm mode for most of my projects. Within Engrave (dblog.org) swarm is automatically managing a set of 23 microservices with almost 30 containers at the moment.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/JMs3d48.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;my-requests-and-tips-for-condenser-developers-and-not-only&quot;&gt;My requests and tips for condenser Developers (and not only)&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Please do write unit tests covering your code. Improving coverage will only cause fewer problems and bugs. Coverage is now visible on every merge request so it’s damn easy to see a regression. Take care of the code quality.&lt;/li&gt;
  &lt;li&gt;Use exact package versions in &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; file. When using &lt;code class=&quot;highlighter-rouge&quot;&gt;^&lt;/code&gt;, it’s not guaranteed to install the same version on two different builds. And some developers like to introduce breaking changes without changing the &lt;code class=&quot;highlighter-rouge&quot;&gt;major&lt;/code&gt; version number.&lt;/li&gt;
  &lt;li&gt;Use &lt;code class=&quot;highlighter-rouge&quot;&gt;alpine&lt;/code&gt; images to create minified production images.&lt;/li&gt;
  &lt;li&gt;Use the latest images from official Docker HUB when possible.&lt;/li&gt;
  &lt;li&gt;Use &lt;a href=&quot;https://docs.docker.com/develop/develop-images/multistage-build/&quot;&gt;multi-stage builds&lt;/a&gt; to create leaner docker image&lt;/li&gt;
  &lt;li&gt;Write and configure health checks for your applications&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;highlighter-rouge&quot;&gt;eslint&lt;/code&gt; to clean up your code before you push it to the repository. You can use &lt;code class=&quot;highlighter-rouge&quot;&gt;husky&lt;/code&gt; to ensure it happens automatically.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;vote-for-engrave-witness-if-you-find-my-work-valuable&quot;&gt;Vote for @engrave witness if you find my work valuable&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://hivesigner.com/sign/account-witness-vote?witness=engrave&amp;amp;approve=1&quot;&gt;&lt;img src=&quot;https://i.imgur.com/lawFvZF.png&quot; alt=&quot;Vote for @engrave witness&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;
  See: &lt;a href=&quot;https://peakd.com/hive-139531/@engrave/improvements-for-condenser-repository-continuous-integration-and-deployments&quot;&gt;Improvements for hive.blog, Continuous Integration and Deployments&lt;/a&gt;
  by
  &lt;a href=&quot;https://hive.blog/@engrave&quot;&gt;@engrave&lt;/a&gt;
&lt;/p&gt;</content><author><name>engrave</name></author><summary type="html">I want to elaborate not only on introduced features but also on my thought and reasoning so everyone can benefit and introduce changes in their projects. This post will be long but I believe it might be useful for the entire HiveDevs community. The workflow is built on top of Gitlab CI/CD but can be easily modified for any other CI/CD tool (i.e. CircleCI or Jenkins). Docker I’ve started my work by reviewing Dockerfile. I’ve built the condenser image and was a bit shocked: $ docker image ls condenser latest 6d57c0c8a904 19 seconds ago 1.54GB 1.54 GB for a simple frontend application? Boy, it’s just too much. Let’s do something with it. Leaner docker image Let’s start by recognizing the reason why is this so big. You can also look into your Dockerfile and package.json and search for some common mistakes: using full-sized images rather than alpine versions installing dev dependencies for production images putting dev dependencies into production dependencies list copying useless files into the final image Yep, you can check every point here. Let’s make some work on a new Dockerfile: FROM node:12.16.2 as development WORKDIR /var/app COPY package.json yarn.lock ./ RUN yarn install --non-interactive --frozen-lockfile --ignore-optional COPY . . RUN mkdir tmp &amp;amp;&amp;amp; yarn build CMD [ &quot;yarn&quot;, &quot;run&quot;, &quot;start&quot; ] ### REMOVE DEV DEPENDENCIES ## FROM development as dependencies RUN yarn install --non-interactive --frozen-lockfile --ignore-optional --production ### BUILD MINIFIED PRODUCTION ## FROM node:12.16.2-alpine as production WORKDIR /var/app ARG SOURCE_COMMIT ENV SOURCE_COMMIT ${SOURCE_COMMIT} ARG DOCKER_TAG ENV DOCKER_TAG ${DOCKER_TAG} COPY --from=dependencies /var/app/package.json /var/app/package.json COPY --from=dependencies /var/app/config /var/app/config COPY --from=dependencies /var/app/dist /var/app/dist COPY --from=dependencies /var/app/lib /var/app/lib COPY --from=dependencies /var/app/src /var/app/src COPY --from=dependencies /var/app/tmp /var/app/tmp COPY --from=dependencies /var/app/webpack /var/app/webpack COPY --from=dependencies /var/app/node_modules /var/app/node_modules COPY --from=dependencies /var/app/healthcheck.js /var/app/healthcheck.js HEALTHCHECK --interval=30s --timeout=5s --start-period=30s --retries=5 CMD node /var/app/healthcheck.js CMD [ &quot;yarn&quot;, &quot;run&quot;, &quot;production&quot; ] What has been improved: Node.js version was upgraded from 8.7 to 12.16.2 which is the latest LTS at the moment. Always try using the latest framework versions, which may include security fixes and performance upgrades. It’s also a good habit to use a specific version up to the patch number. Multistage build was used to build an optimal image for production deployment. First, we build a development stage with every dependency to be able to compile React application. Next, we’re removing development dependencies with --production switch during the dependencies stage. After all, we’re creating a minimal image from the alpine node version which is the smallest base available, by copying only necessary files and directories. Healthcheck has been introduced, so the docker daemon can easily manage containers with automatic restarts if necessary and zero-downtime deployments which will be explained later in this post. It will be also useful for dynamic scaling capabilities with docker swarm. Also, package.json file was modified, but it’s not worth to post its content here: Dev dependencies like webpack, babel or eslint was moved into a proper list called devDependencies so yarn could install only production deps for the final image. Strict versions were introduced for every dependency to make sure every build produces exactly the same image. Semantic versioning is popular, but there is no way to check if the package author does not introduce breaking changes with only patch version increased. If you need to update a package, do it manually. If you have enough test coverage, you can update the package and run CI/CD to check if everything works fine. After all that work done, the condenser image size was massively reduced: $ docker image ls condenser latest 58406d338e67 8 seconds ago 226MB The compressed image in the docker registry is even smaller. Much better, right? Shame on you, Steemit! Healthcheck Simply speaking, docker is running containers and trying to keep it alive as long as possible. But the system needs to have a tool to determine if the container is actually alive. It may seem alive, but is your app responding to requests for example? Fortunately, docker has also integrated health check mechanism which can be integrated into Dockerfile or docker-compose.yml. Usually, you need to create an endpoint for liveness checks. Fortunately, condenser already has one so we can utilize it easily. There is a lot of examples with curl used as a docker health check, but it’s not a good way to go. Healthcheck should work cross-platform and curl implementation differs on Windows and Unix. You should write health check in the same technology or framework as your projects are written, for condenser it’s Node.js. const http = require(&quot;http&quot;); const options = { host: &quot;localhost&quot;, port: &quot;8080&quot;, path: '/.well-known/healthcheck.json', timeout: 5000 }; const request = http.request(options, (res) =&amp;gt; { console.log(`STATUS: ${res.statusCode}`); if (res.statusCode == 200) { process.exit(0); } else { console.error(`ERROR: ${res.statusCode}`); process.exit(1); } }); request.on('error', (err) =&amp;gt; { console.error('ERROR', err); process.exit(1); }); request.end(); When ready, instruct Docker to use your health check mechanism. Add following line into your Dockefile: HEALTHCHECK --interval=30s --timeout=5s --start-period=30s --retries=5 CMD node /var/app/healthcheck.js Make sure this file /var/app/healthcheck.js exists inside your image. If you want to be sure your health check is working, inspect your container after running it: $ docker container ls CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 060166cf52ee hiveio/condenser:development &quot;docker-entrypoint.s…&quot; 5 minutes ago Up 5 minutes (healthy) 0.0.0.0:8080-&amp;gt;8080/tcp mystifying_dhawan There should be a (healthy) indicator in STATUS column. And there is. Please also note that during the container startup process, it will indicate slightly different status (starting), as the docker daemon will wait before making the first check. It’s because we’re giving some time for our app to startup. It’s the start-period parameter. Depending on your app and traffic/load, those parameters should vary. Pushing images to Docker Hub We already have an improved (smaller) docker image, so it’s time to push it to the repository. Doing it manually is a waste of time and may cause human mistakes. The best way is to utilize Gitlab Runner to do it for us in an automatic and bullet-proof manner. Here is a job definition from .gitlab-ci.yml file with some additional code which we will breakdown: variables: DOCKER_IMAGE: hiveio/condenser .docker-job: &amp;amp;docker-job image: docker:stable services: - docker:dind before_script: - echo $HUB_TOKEN | docker login -u $HUB_USERNAME --password-stdin build-development: &amp;lt;&amp;lt;: *docker-job stage: build variables: DOCKER_TAG: $DOCKER_IMAGE:$CI_COMMIT_SHORT_SHA DOCKER_TAG_MAIN: $DOCKER_IMAGE:development SOURCE_COMMIT: $CI_COMMIT_SHA only: - develop script: - docker build -t $DOCKER_TAG -t $DOCKER_TAG_MAIN --build-arg SOURCE_COMMIT --build-arg DOCKER_TAG . - docker push $DOCKER_TAG - docker push $DOCKER_TAG_MAIN First, we’re creating global variable DOCKER_IMAGE so we can reuse it later in many places. And in case we would like to change the image name, we do it only in a single place. Hence we have multiple jobs defined in .gitlab-ci.yml file, it’s good to utilize advanced YAML syntax, which includes hidden keys and anchors. It will decrease the duplicated code and make the file easier to read and maintain. Every job name starting with the dot will be considered as a hidden key and won’t be directly executed. Btw, this is a quick way to temporarily disable any job in your GitLab CI/CD without commenting or removing it. By using .docker-job: &amp;amp;docker-job we created an anchor which can be later used to extend any job. If you add &amp;lt;&amp;lt;: *docker-job, it will populate image, services and before_script properties automatically. It’s a good move if you have multiple jobs that do similar things. Later on, we’re creating some additional local (job scoped) variables: DOCKER_TAG_MAIN which will be evaluated to hiveio/condenser:development DOCKER_TAG which will be evaluated to hiveio/condenser:344e55ef or similar SOURCE_COMMIT which will be evaluated to 344e55efefd56e00b15eea6ccf8560a1107b9ff6 (or similar commit SHA) It’s a good idea to double tag an image. Latest tag is useless if you want to track your development process. Later on, I will describe the way how we’re using this specific, sha-tagged image to track deployments and rollback them anytime with a single click. Finally, we’re building an image with additional build arguments by using --build-arg: docker build -t $DOCKER_TAG -t $DOCKER_TAG_MAIN --build-arg SOURCE_COMMIT --build-arg DOCKER_TAG . If you scroll up to the Dockerfile section, you will notice ARG SOURCE_COMMIT and ENV SOURCE_COMMIT ${SOURCE_COMMIT} which means these build arguments will be injected as an environment variables into your containers. It’s a quick and easy way to pass additional, build-level variables into your images. Those specific variables are later returned by the condenser health endpoint. It may be useful to check a specific instance source. $ curl &amp;lt;a href=&quot;https://staging.condenser.engrave.dev/.well-known/healthcheck.json&quot;&amp;gt;https://staging.condenser.engrave.dev/.well-known/healthcheck.json&amp;lt;/a&amp;gt; {&quot;status&quot;:&quot;ok&quot;,&quot;docker_tag&quot;:&quot;hiveio/condenser:344e55ef&quot;,&quot;source_commit&quot;:&quot;344e55efefd56e00b15eea6ccf8560a1107b9ff6&quot;} An important thing to mention is that HUB_TOKEN and HUB_USERNAME are environment variables injected into the GitLab runner job and configured in Projects Settings. To prevent unauthorized users from pushing malicious images into the official registry, those variables are configured as protected and masked, which means they can be only used on specific branches and are moderated from job logs, so there is no way it can leak without internal bad actor with elevated permissions. Merge requests To improve the process of adding new features and fixes to the codebase, Merge Requests have got a brand new CI/CD workflow which includes the following jobs: The entire pipeline is fired on every Merge Request and it’s required to pass before changes could be merged. If the pipeline fails for some reason (i.e. failing unit tests), there is no way to merge changes into the main branch. This will enforce code quality and prevent regression. Eslint Code quality and standardization are important, especially if it’s an open-source project that could be maintained by totally different developers from all around the world. Eslint is a tool that statically analyzes the code to quickly find potential problems and keep code organized with specified rules. Code analysis is especially useful when developing Javascript applications. It’s really easy to make some stupid mistakes. Eslint job will be fired on every Merge Request and on every branch pushed to the repository: run-eslint: stage: test image: node:12.16.2 only: - branches - merge_requests before_script: - yarn install --frozen-lockfile --ignore-optional script: - yarn ci:eslint allow_failure: true # will be changed to false when all linter errors removed Because the codebase is a bit neglected, run-eslint job is allowed to fail for the moment (allow_failure: true), which is indicated by an orange exclamation mark on a MR view or pipelines list. There are “some” errors and warnings right now but it should be cleaned up soon, so we can require eslint job to pass before merging proposed changes: ✖ 1208 problems (1187 errors, 21 warnings) 831 errors and 0 warnings potentially fixable with the `--fix` option. error Command failed with exit code 1. Unit tests Extensive testing is the only way to produce bullet-proof code and stable applications. Similar to run-eslint, run-unit-tests job is fired on every branch and every merge request. run-unit-tests: stage: test image: node:12.16.2 only: - branches - merge_requests before_script: - yarn install --frozen-lockfile --ignore-optional script: - yarn run ci:test coverage: /All files[^|]*\|[^|]*\s+([\d\.]+)/ Testing suit (jest) was configured to produce coverage report: This report is later parsed by a Gitlab, using coverage: /All files[^|]*\|[^|]*\s+([\d\.]+)/ configuration. It will display coverage status and percentage change on the Merge Request view, allowing reviewers to quickly inspect if the code quality is increasing or not. I would advise declining merging new features not covered with tests. This may be omitted for important fixes, but we all should try to make the code better, not worse. Also, repository settings were changed and Pipelines must succeed setting is checked by default. It means no more broken code on develop/production branches. Review apps Review Apps are a huge and very important feature. From now on, every feature can be inspected visually by the reviewer with a single click. Gitlab Runner will create a special instance built from proposed code and expose it for the reviewers: Review app requires three jobs to run on a merge request: build-review-app: &amp;lt;&amp;lt;: *docker-job stage: build variables: DOCKER_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA SOURCE_COMMIT: $CI_COMMIT_SHA only: - merge_requests before_script: - echo $CI_JOB_TOKEN | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin script: - docker build -t $DOCKER_TAG --build-arg SOURCE_COMMIT --build-arg DOCKER_TAG . - docker push $DOCKER_TAG deploy-review-app: &amp;lt;&amp;lt;: *docker-job &amp;lt;&amp;lt;: *docker-remote-host-review stage: deploy variables: DOCKER_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA SERVICE_NAME: review_$CI_ENVIRONMENT_SLUG only: - merge_requests script: - DOCKER_CERT_PATH=$CERTS docker -H $REVIEW_HOST --tlsverify pull $DOCKER_TAG - DOCKER_CERT_PATH=$CERTS docker -H $REVIEW_HOST --tlsverify service rm $SERVICE_NAME || true # try to remove previous service but do not fail if it not exist - DOCKER_CERT_PATH=$CERTS docker -H $REVIEW_HOST --tlsverify service create --with-registry-auth --network infrastructure --name $SERVICE_NAME $DOCKER_TAG - echo &quot;Review app deployed&quot; environment: name: review/$CI_COMMIT_REF_NAME url: &amp;lt;a href=&quot;https://&quot;&amp;gt;https://&amp;lt;/a&amp;gt; $CI_ENVIRONMENT_SLUG$APP_REVIEW_SUBDOMAIN on_stop: stop-review-app auto_stop_in: 1 week stop-review-app: &amp;lt;&amp;lt;: *docker-job &amp;lt;&amp;lt;: *docker-remote-host-review stage: deploy variables: SERVICE_NAME: review_$CI_ENVIRONMENT_SLUG only: - merge_requests when: manual script: - DOCKER_CERT_PATH=$CERTS docker -H $REVIEW_HOST --tlsverify service rm $SERVICE_NAME || true # try to remove previous service but do not fail if it not exist - echo &quot;Review app stopped&quot; environment: name: review/$CI_COMMIT_REF_NAME action: stop The first job should look familiar if you read previous parts of the post. The only difference is that we’re overwriting before_script. Note that if you’re using anchors, you can always overwrite the template freely which is what we did here. Because merge requests could be opened by developers which may not be well known in the community (vel. bad actors), it could be a security issue if the CI/CD on Merge Requests could push images to the official repository. To prevent this, we’re using an internal registry provided by the Gitlab itself. It’s private, will work well for Review Apps but won’t be accessible by anyone else. echo $CI_JOB_TOKEN | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin We are using CI_JOB_TOKEN, CI_REGISTRY_USER and CI_REGISTRY which are environment variables injected automatically by Gitlab, no need to configure them. Also, please note using --password-stdin which is a more secure way to log in as it will prevent the password from being exposed in job logs. By default, docker will connect to the local daemon on unsecured, but not exposed port. It is yet possible to configure Docker daemon to validate TLS certificates so it could be exposed to the external world in a secure way, which is how we deploy services from our runners to our machine. You need to pass additional parameters: -H which is remote docker address --tlsverify makes sure your daemon is trying to identify itself with certificates --with-registry-auth will send registry authentication to swarm agents --network will connect service to the specified network so the reverse proxy could expose the instance DOCKER_CERT_PATH will instruct demon where to search for TLS certificates DOCKER_CERT_PATH=$CERTS docker -H $REVIEW_HOST --tlsverify service create --with-registry-auth --network infrastructure --name $SERVICE_NAME $DOCKER_TAG This will create a new docker service and expose it automatically under the URL created with CI_ENVIRONMENT_SLUG, which is a variable provided by Gitlab. It’s guaranteed to be a valid URL or docker/kubernetes service name. Review App instances are automatically removed when MR is closed or 1 week after it’s opened. This is achieved by running stop-review-app job which is configured to be manually triggered (when: manual). Tracking environment deployments By using sha-tagged images, it’s possible to quickly redeploy the environment at any moment, with a single click. In case of emergency, project maintainers can rollback the environment to the specified point in time (docker image to be specific) Staging Deploying a staging environment is quite similar to deploying a Review App. It also uses remote docker daemon but the service is not created on-demand, it’s updated with a new image. With docker swarm mode, you can ensure your application to be highly available. The swarm agent will take care of your containers. It will restart them or spin a new one if necessary (this is why health check is so important). It is a built-in, native docker mode everyone should start using. deploy-staging: &amp;lt;&amp;lt;: *docker-job &amp;lt;&amp;lt;: *docker-remote-host-staging stage: deploy variables: DOCKER_TAG: $DOCKER_IMAGE:$CI_COMMIT_SHORT_SHA SERVICE_NAME: staging_condenser only: - develop script: - DOCKER_CERT_PATH=$CERTS docker -H $STAGING_HOST --tlsverify pull $DOCKER_TAG - DOCKER_CERT_PATH=$CERTS docker -H $STAGING_HOST --tlsverify service update --image $DOCKER_TAG --update-failure-action rollback --update-order start-first $SERVICE_NAME environment: name: staging url: &amp;lt;a href=&quot;https://&quot;&amp;gt;https://&amp;lt;/a&amp;gt; $STAGING_DOMAIN Job uses protected variables to prevent “bad” developers from pushing/deploying malicious code. It is only possible to push staging from the protected develop branch. Pushing directly to develop is disabled. Zero downtime deployments Updating single service is easy with docker swarm: DOCKER_CERT_PATH=$CERTS docker -H $STAGING_HOST --tlsverify service update --image $DOCKER_TAG --update-failure-action rollback --update-order start-first $SERVICE_NAME There are additional but important parameters provided: --image $DOCKER_TAG - update existing service by running new containers with the specified image. For this case, it’s sha-tagged image build from develop branch --update-failure-action rollback - by default, docker daemon will try to update the service and do nothing if it fails. By passing this parameter, we’re instructing docker to roll back the service to a previous state, which means containers using the previous image. --update-order start-first - by default, docker will kill current containers and spin new ones after it. It may cause some downtime which we don’t want. By setting start-first, we instruct docker to spin new containers first. Swarm agent will switch containers without downtime if the healtcheck result becomes positive. And in case something gone wrong (healtcheck failed for any reason), we end up with a working staging environment because old containers are not touched at all. Resources under control With docker swarm you have full control over your services and containers. This is an example configuration which is used for staging environment. With some tweaks, it could be used for production also: version: &quot;3.7&quot; services: condenser: image: hiveio/condenser:latest deploy: mode: replicated replicas: 2 resources: limits: cpus: &quot;0.85&quot; memory: 2024M restart_policy: condition: any delay: 5s update_config: parallelism: 1 delay: 10s failure_action: rollback order: start-first rollback_config: parallelism: 1 delay: 5s networks: - reverse-proxy networks: reverse-proxy: external: name: reverse-proxy Production It is not finished yet, but my advice is to start using docker swarm mode for production deployments (CI/CD is ready). It’s designed to serve services like a condenser. Some key features of Docker Swarm (based on official documentation): Cluster management integrated with Docker Engine: if you know how to build the docker image, start a container, read some logs, you’re ready to use Docker Swarm. You don’t need to install additional software as it is a native Docker feature. Decentralized design: adding a worker or a manager to your swarm is as easy as running a single command. Those could be machines from all around the world. Scaling: For each service, you can declare the number of tasks you want to run. When you scale up or down, the swarm manager automatically adapts by adding or removing tasks to maintain the desired state. Multi-host networking: You can specify an overlay network for your services. The swarm manager automatically assigns addresses to the containers on the overlay network when it initializes or updates the application. Load balancing: You can expose the ports for services to an external load balancer. Internally, the swarm lets you specify how to distribute service containers between nodes. Secure by default: Each node in the swarm enforces TLS mutual authentication and encryption to secure communications between itself and all other nodes. You have the option to use self-signed root certificates or certificates from a custom root CA. Rolling updates: At rollout time you can apply service updates to nodes incrementally. The swarm manager lets you control the delay between service deployment to different sets of nodes. If anything goes wrong, you can roll back to a previous version of the service. And after all, it is called Swarm, can’t be a coincidence! ;) I’m using Swarm mode for most of my projects. Within Engrave (dblog.org) swarm is automatically managing a set of 23 microservices with almost 30 containers at the moment. My requests and tips for condenser Developers (and not only) Please do write unit tests covering your code. Improving coverage will only cause fewer problems and bugs. Coverage is now visible on every merge request so it’s damn easy to see a regression. Take care of the code quality. Use exact package versions in package.json file. When using ^, it’s not guaranteed to install the same version on two different builds. And some developers like to introduce breaking changes without changing the major version number. Use alpine images to create minified production images. Use the latest images from official Docker HUB when possible. Use multi-stage builds to create leaner docker image Write and configure health checks for your applications Run eslint to clean up your code before you push it to the repository. You can use husky to ensure it happens automatically. Vote for @engrave witness if you find my work valuable See: Improvements for hive.blog, Continuous Integration and Deployments by @engrave</summary></entry><entry><title type="html">Hive Pressure #1: A New Hope</title><link href="https://hivedocs.info/news/devops/nodes/2020/04/19/hive-pressure-1-a-new-hope.html" rel="alternate" type="text/html" title="Hive Pressure #1: A New Hope" /><published>2020-04-19T10:28:03-07:00</published><updated>2020-04-19T10:28:03-07:00</updated><id>https://hivedocs.info/news/devops/nodes/2020/04/19/hive-pressure-1-a-new-hope</id><content type="html" xml:base="https://hivedocs.info/news/devops/nodes/2020/04/19/hive-pressure-1-a-new-hope.html">&lt;p&gt;A long time ago, in a block far, far away…
No, wait, this is NOT the story you are looking for ;-)&lt;/p&gt;

&lt;p&gt;This part was going to be filled with retrospectives, the origins of the &lt;del&gt;Steem&lt;/del&gt; Pressure series, stories about events that caused us to fork from &lt;del&gt;Steem&lt;/del&gt; but that would be just a waste of time, and time is a resource that we can’t afford to waste.
TL;DR: &lt;del&gt;Steem&lt;/del&gt; is no longer what we knew it to be.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;“No Ned to worry.”&lt;/em&gt;
&lt;sup&gt;&lt;/sup&gt;&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;Anonymous
&amp;lt;/sup&amp;gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Our future is in our hands.
We are Hive now.&lt;/p&gt;

&lt;h1 id=&quot;paint-it-hive&quot;&gt;Paint it Hive&lt;/h1&gt;
&lt;p&gt;Time to update promo materials.&lt;/p&gt;

&lt;center&gt;
&lt;a href=&quot;https://www.youtube.com/watch&quot;&gt;https://www.youtube.com/watch&lt;/a&gt;
?v=vlW9lDE3DuI&lt;/center&gt;

&lt;h1 id=&quot;new-net-new-nodes&quot;&gt;New Net, New Nodes&lt;/h1&gt;
&lt;p&gt;Since many of us have just upgraded their toys to Hive, at the time of the HF23, most of what we used is now Hive compatible.&lt;/p&gt;

&lt;h2 id=&quot;seed-nodes&quot;&gt;Seed nodes&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;seed.openhive.network:2001     # gtg
seed.roelandp.nl:2001          # roelandp
hiveseed-se.privex.io:2001     # privex (SE)
steemseed-fin.privex.io:2001   # privex (FI)
seed.liondani.com:2016         # liondani
hived.splinterlands.com:2001   # aggroed
seed.hivekings.com:2001        # drakos
node.mahdiyari.info:2001       # mahdiyari
anyx.io:2001                   # anyx
seed.buildteam.io:2001         # thecryptodrive
hive-seed.lukestokes.info:2001 # lukestokes.mhth
hive-seed.arcange.eu:2001      # arcange
seed.chitty.me:2001            # chitty
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;api-nodes&quot;&gt;API nodes&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://api.openhive.network&quot;&gt;https://api.openhive.network&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://api.hive.blog&quot;&gt;https://api.hive.blog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://anyx.io&quot;&gt;https://anyx.io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://api.hivekings.com&quot;&gt;https://api.hivekings.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://api.pharesim.me&quot;&gt;https://api.pharesim.me&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://hived.hive-engine.com&quot;&gt;https://hived.hive-engine.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://rpc.esteem.app&quot;&gt;https://rpc.esteem.app&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://hived.privex.io&quot;&gt;https://hived.privex.io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://techcoderx.com&quot;&gt;https://techcoderx.com&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;diy&quot;&gt;DIY&lt;/h1&gt;
&lt;p&gt;If you want to run your own node, here are some quick tips that can be useful:&lt;/p&gt;

&lt;h2 id=&quot;seed-node&quot;&gt;Seed Node&lt;/h2&gt;
&lt;p&gt;Configure your build with:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cmake \
        -DCMAKE_BUILD_TYPE=Release \
        -DLOW_MEMORY_NODE=ON \
        -DCLEAR_VOTES=ON \
        -DSKIP_BY_TX_ID=OFF \
        -DBUILD_STEEM_TESTNET=OFF \
        -DENABLE_MIRA=OFF \
        -DSTEEM_STATIC_BUILD=ON \
        ../hive
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Depending on your needs and resources, you might want to use either
&lt;code class=&quot;highlighter-rouge&quot;&gt;ENABLE_MIRA=OFF&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;ENABLE_MIRA=ON&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;config.ini&lt;/code&gt; for a seed node can be as simple as that:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;plugin = witness
p2p-endpoint = 0.0.0.0:2001
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This is intended to be used as a seed node, but you can easily extend it to be more useful by enabling a webserver endpoint and useful APIs such as &lt;code class=&quot;highlighter-rouge&quot;&gt;block_api&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;network_broadcast_api&lt;/code&gt;. However, if you choose to add a plugin such as &lt;code class=&quot;highlighter-rouge&quot;&gt;account_by_key&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;market_history&lt;/code&gt; you will have to replay.&lt;/p&gt;

&lt;h2 id=&quot;api-node&quot;&gt;API Node&lt;/h2&gt;
&lt;p&gt;If you’ve read my &lt;del&gt;Steem&lt;/del&gt; Pressure series you know that I no longer use a monolithic node. Instead, I use &lt;code class=&quot;highlighter-rouge&quot;&gt;jussi&lt;/code&gt; to route specific methods to specialized endpoints.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Account History Node (non-MIRA)&lt;/li&gt;
  &lt;li&gt;Fat Node (MIRA)&lt;/li&gt;
  &lt;li&gt;Hivemind&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Please note that in my setup the Fat Node itself is &lt;em&gt;not enough&lt;/em&gt; to feed the Hivemind instance because of the lack of a market_history plugin. Not an issue in my environment, because I’m running both nodes, and I prefer to run plugins on the low memory node where possible.&lt;/p&gt;

&lt;h3 id=&quot;account-history-node---reference-configuration&quot;&gt;Account History Node - reference configuration&lt;/h3&gt;
&lt;p&gt;Configure your build with:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cmake \
        -DCMAKE_BUILD_TYPE=Release \
        -DLOW_MEMORY_NODE=ON \
        -DCLEAR_VOTES=ON \
        -DSKIP_BY_TX_ID=OFF \
        -DBUILD_STEEM_TESTNET=OFF \
        -DENABLE_MIRA=OFF \
        -DSTEEM_STATIC_BUILD=ON \
        ../hive
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;We can’t use MIRA here, because we are going to use the pre-MIRA implementation of account history plugin: &lt;code class=&quot;highlighter-rouge&quot;&gt;account_history_rocksdb&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here’s reference &lt;code class=&quot;highlighter-rouge&quot;&gt;config.ini&lt;/code&gt; file:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;log-appender = {&quot;appender&quot;:&quot;stderr&quot;,&quot;stream&quot;:&quot;std_error&quot;}
log-logger = {&quot;name&quot;:&quot;default&quot;,&quot;level&quot;:&quot;info&quot;,&quot;appender&quot;:&quot;stderr&quot;}

backtrace = yes

plugin = webserver p2p json_rpc
plugin = database_api condenser_api

plugin = witness
plugin = rc

plugin = market_history
plugin = market_history_api

plugin = account_history_rocksdb
plugin = account_history_api

plugin = transaction_status
plugin = transaction_status_api

plugin = account_by_key
plugin = account_by_key_api

plugin = block_api network_broadcast_api rc_api

p2p-endpoint = 0.0.0.0:2001
p2p-seed-node = gtg.openhive.network:2001

transaction-status-block-depth = 64000
transaction-status-track-after-block = 42000000

webserver-http-endpoint = 127.0.0.1:8091
webserver-ws-endpoint = 127.0.0.1:8090

webserver-thread-pool-size = 256
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;fat-node---reference-configuration&quot;&gt;Fat Node - reference configuration&lt;/h3&gt;
&lt;p&gt;Configure your build with:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cmake \
        -DCMAKE_BUILD_TYPE=Release \
        -DLOW_MEMORY_NODE=OFF \
        -DCLEAR_VOTES=OFF \
        -DSKIP_BY_TX_ID=ON \
        -DBUILD_STEEM_TESTNET=OFF \
        -DENABLE_MIRA=ON \
        -DSTEEM_STATIC_BUILD=ON \
        ../hive
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;For the fat node, I use  the MIRA build&lt;/p&gt;

&lt;p&gt;Here’s reference &lt;code class=&quot;highlighter-rouge&quot;&gt;config.ini&lt;/code&gt; file:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;log-appender = {&quot;appender&quot;:&quot;stderr&quot;,&quot;stream&quot;:&quot;std_error&quot;}
log-logger = {&quot;name&quot;:&quot;default&quot;,&quot;level&quot;:&quot;info&quot;,&quot;appender&quot;:&quot;stderr&quot;}

backtrace = yes

plugin = webserver p2p json_rpc
plugin = database_api condenser_api

plugin = reputation
plugin = reputation_api

plugin = block_api

p2p-endpoint = 0.0.0.0:32001
p2p-seed-node = gtg.openhive.network:2001

webserver-http-endpoint = 127.0.0.1:8091
webserver-ws-endpoint = 127.0.0.1:8090

webserver-thread-pool-size = 256
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;storage-needs&quot;&gt;Storage needs:&lt;/h2&gt;
&lt;p&gt;As always, make sure that you have very fast storage.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Node type&lt;/th&gt;
      &lt;th&gt;Storage&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;AH Node&lt;/td&gt;
      &lt;td&gt;600 GB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Fat Node&lt;/td&gt;
      &lt;td&gt;400 GB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Hivemind&lt;/td&gt;
      &lt;td&gt;300 GB&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;In the next episode, I will write more about such setup and required hardware and about how long it takes nowadays to build it from scratch.&lt;/p&gt;
&lt;div style=&quot;display: block; margin: 0 auto;&quot;&gt;
  &lt;p&gt;&lt;img src=&quot;https://images.hive.blog/DQmSJUo4g9AmoVFoAbs6gzMw6coVURUQKg7URtBSfkEj5oJ/Hive_free-file.png&quot; alt=&quot;Hive_Queen&quot; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;

&lt;p&gt;
  See: &lt;a href=&quot;https://hive.blog/hive-160391/@gtg/hive-pressure-1-a-new-hope&quot;&gt;Hive Pressure #1: A New Hope&lt;/a&gt;
  by
  &lt;a href=&quot;https://hive.blog/@gtg&quot;&gt;@gtg&lt;/a&gt;
&lt;/p&gt;</content><author><name>gtg</name></author><summary type="html">A long time ago, in a block far, far away… No, wait, this is NOT the story you are looking for ;-) This part was going to be filled with retrospectives, the origins of the Steem Pressure series, stories about events that caused us to fork from Steem but that would be just a waste of time, and time is a resource that we can’t afford to waste. TL;DR: Steem is no longer what we knew it to be. “No Ned to worry.” Anonymous &amp;lt;/sup&amp;gt; Our future is in our hands. We are Hive now. Paint it Hive Time to update promo materials. https://www.youtube.com/watch ?v=vlW9lDE3DuI New Net, New Nodes Since many of us have just upgraded their toys to Hive, at the time of the HF23, most of what we used is now Hive compatible. Seed nodes seed.openhive.network:2001 # gtg seed.roelandp.nl:2001 # roelandp hiveseed-se.privex.io:2001 # privex (SE) steemseed-fin.privex.io:2001 # privex (FI) seed.liondani.com:2016 # liondani hived.splinterlands.com:2001 # aggroed seed.hivekings.com:2001 # drakos node.mahdiyari.info:2001 # mahdiyari anyx.io:2001 # anyx seed.buildteam.io:2001 # thecryptodrive hive-seed.lukestokes.info:2001 # lukestokes.mhth hive-seed.arcange.eu:2001 # arcange seed.chitty.me:2001 # chitty API nodes https://api.openhive.network https://api.hive.blog https://anyx.io https://api.hivekings.com https://api.pharesim.me https://hived.hive-engine.com https://rpc.esteem.app https://hived.privex.io https://techcoderx.com DIY If you want to run your own node, here are some quick tips that can be useful: Seed Node Configure your build with: cmake \ -DCMAKE_BUILD_TYPE=Release \ -DLOW_MEMORY_NODE=ON \ -DCLEAR_VOTES=ON \ -DSKIP_BY_TX_ID=OFF \ -DBUILD_STEEM_TESTNET=OFF \ -DENABLE_MIRA=OFF \ -DSTEEM_STATIC_BUILD=ON \ ../hive Depending on your needs and resources, you might want to use either ENABLE_MIRA=OFF or ENABLE_MIRA=ON. config.ini for a seed node can be as simple as that: plugin = witness p2p-endpoint = 0.0.0.0:2001 This is intended to be used as a seed node, but you can easily extend it to be more useful by enabling a webserver endpoint and useful APIs such as block_api or network_broadcast_api. However, if you choose to add a plugin such as account_by_key or market_history you will have to replay. API Node If you’ve read my Steem Pressure series you know that I no longer use a monolithic node. Instead, I use jussi to route specific methods to specialized endpoints. Account History Node (non-MIRA) Fat Node (MIRA) Hivemind Please note that in my setup the Fat Node itself is not enough to feed the Hivemind instance because of the lack of a market_history plugin. Not an issue in my environment, because I’m running both nodes, and I prefer to run plugins on the low memory node where possible. Account History Node - reference configuration Configure your build with: cmake \ -DCMAKE_BUILD_TYPE=Release \ -DLOW_MEMORY_NODE=ON \ -DCLEAR_VOTES=ON \ -DSKIP_BY_TX_ID=OFF \ -DBUILD_STEEM_TESTNET=OFF \ -DENABLE_MIRA=OFF \ -DSTEEM_STATIC_BUILD=ON \ ../hive We can’t use MIRA here, because we are going to use the pre-MIRA implementation of account history plugin: account_history_rocksdb. Here’s reference config.ini file: log-appender = {&quot;appender&quot;:&quot;stderr&quot;,&quot;stream&quot;:&quot;std_error&quot;} log-logger = {&quot;name&quot;:&quot;default&quot;,&quot;level&quot;:&quot;info&quot;,&quot;appender&quot;:&quot;stderr&quot;} backtrace = yes plugin = webserver p2p json_rpc plugin = database_api condenser_api plugin = witness plugin = rc plugin = market_history plugin = market_history_api plugin = account_history_rocksdb plugin = account_history_api plugin = transaction_status plugin = transaction_status_api plugin = account_by_key plugin = account_by_key_api plugin = block_api network_broadcast_api rc_api p2p-endpoint = 0.0.0.0:2001 p2p-seed-node = gtg.openhive.network:2001 transaction-status-block-depth = 64000 transaction-status-track-after-block = 42000000 webserver-http-endpoint = 127.0.0.1:8091 webserver-ws-endpoint = 127.0.0.1:8090 webserver-thread-pool-size = 256 Fat Node - reference configuration Configure your build with: cmake \ -DCMAKE_BUILD_TYPE=Release \ -DLOW_MEMORY_NODE=OFF \ -DCLEAR_VOTES=OFF \ -DSKIP_BY_TX_ID=ON \ -DBUILD_STEEM_TESTNET=OFF \ -DENABLE_MIRA=ON \ -DSTEEM_STATIC_BUILD=ON \ ../hive For the fat node, I use the MIRA build Here’s reference config.ini file: log-appender = {&quot;appender&quot;:&quot;stderr&quot;,&quot;stream&quot;:&quot;std_error&quot;} log-logger = {&quot;name&quot;:&quot;default&quot;,&quot;level&quot;:&quot;info&quot;,&quot;appender&quot;:&quot;stderr&quot;} backtrace = yes plugin = webserver p2p json_rpc plugin = database_api condenser_api plugin = reputation plugin = reputation_api plugin = block_api p2p-endpoint = 0.0.0.0:32001 p2p-seed-node = gtg.openhive.network:2001 webserver-http-endpoint = 127.0.0.1:8091 webserver-ws-endpoint = 127.0.0.1:8090 webserver-thread-pool-size = 256 Storage needs: As always, make sure that you have very fast storage. Node type Storage AH Node 600 GB Fat Node 400 GB Hivemind 300 GB In the next episode, I will write more about such setup and required hardware and about how long it takes nowadays to build it from scratch. See: Hive Pressure #1: A New Hope by @gtg</summary></entry><entry><title type="html">Hive Keychain Now Available on Chrome &amp;amp; Brave!</title><link href="https://hivedocs.info/news/nodejs/keychain/2020/04/17/hive-keychain-now-available-on-chrome-and-brave.html" rel="alternate" type="text/html" title="Hive Keychain Now Available on Chrome &amp; Brave!" /><published>2020-04-17T08:50:54-07:00</published><updated>2020-04-17T08:50:54-07:00</updated><id>https://hivedocs.info/news/nodejs/keychain/2020/04/17/hive-keychain-now-available-on-chrome-and-brave</id><content type="html" xml:base="https://hivedocs.info/news/nodejs/keychain/2020/04/17/hive-keychain-now-available-on-chrome-and-brave.html">&lt;p&gt;&lt;img src=&quot;https://files.peakd.com/file/peakd-hive/stoodkev/AmSWoznK-keychain_title.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I am extremely happy to report that the Hive Keychain browser extension has FINALLY been approved by Google and is now available for everyone to install on the Google Chrome and Brave browsers!&lt;/p&gt;

&lt;p&gt;You can use the following link to find the extension in the Google Chrome Web Store:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/hive-keychain/jcacnejopjdphbnjgfaaobbfafkihpep&quot;&gt;https://chrome.google.com/webstore/detail/hive-keychain/jcacnejopjdphbnjgfaaobbfafkihpep&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We encourage everyone to add a positive review for the extension on the Google Web Store&lt;/strong&gt; as that will help ensure that it remains listed and future updates get approved in a timely fashion.&lt;/p&gt;

&lt;p&gt;It has also been available in Firefox for a while now here: 
&lt;a href=&quot;https://addons.mozilla.org/en-US/firefox/addon/hive-keychain/&quot;&gt;https://addons.mozilla.org/en-US/firefox/addon/hive-keychain/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;@stoodkev did the vast majority of the development work on the extension with contributions also from @arcange and @quochuy, and @nateaguila took care of the design and graphics as always.&lt;/p&gt;

&lt;p&gt;To see a detailed update of the work being done on the extension please see @stoodkev’s recent development update post here: 
&lt;a href=&quot;https://peakd.com/hive-139531/@stoodkev/hive-keychain-1-8-3&quot;&gt;https://peakd.com/hive-139531/@stoodkev/hive-keychain-1-8-3&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;hdf-proposal-update&quot;&gt;HDF Proposal Update&lt;/h2&gt;

&lt;p&gt;The existing funding proposal for the extension will end in approximately one month at which time we expect to launch a new proposal to continue to fund ongoing development of the project. We do not intend to submit another proposal on Steem as we do not plan to continue to work on the Steem Keychain extension, so funding going forward will only come from Hive.&lt;/p&gt;

&lt;p&gt;We greatly appreciate the support from everyone who has backed the proposal, and we hope that the community will vote to continue the funding when the initial proposal expires.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;NOTE: All rewards from this post will go to @steem.dao (the Hive Development Fund account) to support the ongoing development of the Hive platform&lt;/em&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;
  See: &lt;a href=&quot;https://peakd.com/hive/@yabapmatt/hive-keychain-now-available-on-chrome-and-brave&quot;&gt;Hive Keychain Now Available on Chrome &amp;amp; Brave!&lt;/a&gt;
  by
  &lt;a href=&quot;https://hive.blog/@yabapmatt&quot;&gt;@yabapmatt&lt;/a&gt;
&lt;/p&gt;</content><author><name>yabapmatt</name></author><summary type="html">I am extremely happy to report that the Hive Keychain browser extension has FINALLY been approved by Google and is now available for everyone to install on the Google Chrome and Brave browsers! You can use the following link to find the extension in the Google Chrome Web Store: https://chrome.google.com/webstore/detail/hive-keychain/jcacnejopjdphbnjgfaaobbfafkihpep We encourage everyone to add a positive review for the extension on the Google Web Store as that will help ensure that it remains listed and future updates get approved in a timely fashion. It has also been available in Firefox for a while now here: https://addons.mozilla.org/en-US/firefox/addon/hive-keychain/ @stoodkev did the vast majority of the development work on the extension with contributions also from @arcange and @quochuy, and @nateaguila took care of the design and graphics as always. To see a detailed update of the work being done on the extension please see @stoodkev’s recent development update post here: https://peakd.com/hive-139531/@stoodkev/hive-keychain-1-8-3 HDF Proposal Update The existing funding proposal for the extension will end in approximately one month at which time we expect to launch a new proposal to continue to fund ongoing development of the project. We do not intend to submit another proposal on Steem as we do not plan to continue to work on the Steem Keychain extension, so funding going forward will only come from Hive. We greatly appreciate the support from everyone who has backed the proposal, and we hope that the community will vote to continue the funding when the initial proposal expires. NOTE: All rewards from this post will go to @steem.dao (the Hive Development Fund account) to support the ongoing development of the Hive platform See: Hive Keychain Now Available on Chrome &amp;amp; Brave! by @yabapmatt</summary></entry></feed>